# Generated from /var/antlrResult/modelica.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3`")
        buf.write("\u040e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\3\2\7\2\u00a2\n\2\f\2\16\2\u00a5\13")
        buf.write("\2\3\2\5\2\u00a8\n\2\3\2\3\2\3\2\7\2\u00ad\n\2\f\2\16")
        buf.write("\2\u00b0\13\2\3\3\3\3\5\3\u00b4\n\3\3\3\3\3\3\4\5\4\u00b9")
        buf.write("\n\4\3\4\3\4\3\4\3\5\3\5\3\5\5\5\u00c1\n\5\3\6\5\6\u00c4")
        buf.write("\n\6\3\6\3\6\3\6\5\6\u00c9\n\6\3\6\3\6\3\6\5\6\u00ce\n")
        buf.write("\6\3\6\3\6\3\6\3\6\5\6\u00d4\n\6\3\6\5\6\u00d7\n\6\3\6")
        buf.write("\3\6\5\6\u00db\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\5\7\u00e6\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u00ed\n\7\3\b\3")
        buf.write("\b\3\b\3\b\3\b\5\b\u00f4\n\b\3\b\5\b\u00f7\n\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\5\b\u0100\n\b\3\b\5\b\u0103\n\b\3")
        buf.write("\b\3\b\5\b\u0107\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\7\t\u0112\n\t\f\t\16\t\u0115\13\t\3\t\3\t\3\t\3\n\3")
        buf.write("\n\3\13\3\13\3\13\7\13\u011f\n\13\f\13\16\13\u0122\13")
        buf.write("\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u012e")
        buf.write("\n\r\f\r\16\r\u0131\13\r\3\r\3\r\5\r\u0135\n\r\3\r\5\r")
        buf.write("\u0138\n\r\3\r\5\r\u013b\n\r\3\r\5\r\u013e\n\r\3\r\3\r")
        buf.write("\3\r\5\r\u0143\n\r\3\16\3\16\3\17\3\17\3\17\5\17\u014a")
        buf.write("\n\17\3\17\3\17\3\17\5\17\u014f\n\17\3\17\3\17\3\20\7")
        buf.write("\20\u0154\n\20\f\20\16\20\u0157\13\20\3\21\3\21\3\21\5")
        buf.write("\21\u015c\n\21\3\21\5\21\u015f\n\21\3\21\5\21\u0162\n")
        buf.write("\21\3\21\5\21\u0165\n\21\3\21\3\21\5\21\u0169\n\21\3\21")
        buf.write("\3\21\3\21\5\21\u016e\n\21\3\21\3\21\3\21\5\21\u0173\n")
        buf.write("\21\5\21\u0175\n\21\5\21\u0177\n\21\3\21\3\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\5\22\u0188\n\22\3\22\3\22\3\23\3\23\3\23\7\23\u018f\n")
        buf.write("\23\f\23\16\23\u0192\13\23\3\24\3\24\3\24\5\24\u0197\n")
        buf.write("\24\3\24\5\24\u019a\n\24\3\25\3\25\3\25\5\25\u019f\n\25")
        buf.write("\3\26\3\26\3\26\5\26\u01a4\n\26\3\26\3\26\3\27\5\27\u01a9")
        buf.write("\n\27\3\27\5\27\u01ac\n\27\3\27\5\27\u01af\n\27\3\30\3")
        buf.write("\30\3\31\3\31\3\31\7\31\u01b6\n\31\f\31\16\31\u01b9\13")
        buf.write("\31\3\32\3\32\5\32\u01bd\n\32\3\32\3\32\3\33\3\33\3\33")
        buf.write("\3\34\3\34\5\34\u01c6\n\34\3\34\5\34\u01c9\n\34\3\35\3")
        buf.write("\35\3\35\5\35\u01ce\n\35\3\35\3\35\3\35\3\35\5\35\u01d4")
        buf.write("\n\35\3\36\3\36\5\36\u01d8\n\36\3\36\3\36\3\37\3\37\3")
        buf.write("\37\7\37\u01df\n\37\f\37\16\37\u01e2\13\37\3 \3 \5 \u01e6")
        buf.write("\n \3!\5!\u01e9\n!\3!\5!\u01ec\n!\3!\3!\5!\u01f0\n!\3")
        buf.write("\"\3\"\5\"\u01f4\n\"\3\"\3\"\3#\3#\5#\u01fa\n#\3#\5#\u01fd")
        buf.write("\n#\3#\3#\5#\u0201\n#\3#\5#\u0204\n#\3$\3$\3$\5$\u0209")
        buf.write("\n$\3$\5$\u020c\n$\3%\3%\3%\3%\3&\3&\3&\3\'\3\'\3\'\3")
        buf.write("(\5(\u0219\n(\3(\3(\7(\u021d\n(\f(\16(\u0220\13(\3)\5")
        buf.write(")\u0223\n)\3)\3)\3)\3)\7)\u0229\n)\f)\16)\u022c\13)\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0239\n*\3*\3*\3*\3")
        buf.write("+\3+\3+\3+\5+\u0242\n+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\5+\u0251\n+\3+\3+\3,\3,\3,\3,\3,\3,\7,\u025b\n")
        buf.write(",\f,\16,\u025e\13,\3,\3,\3,\3,\3,\3,\7,\u0266\n,\f,\16")
        buf.write(",\u0269\13,\7,\u026b\n,\f,\16,\u026e\13,\3,\3,\3,\3,\7")
        buf.write(",\u0274\n,\f,\16,\u0277\13,\5,\u0279\n,\3,\3,\3,\3-\3")
        buf.write("-\3-\3-\3-\3-\7-\u0284\n-\f-\16-\u0287\13-\3-\3-\3-\3")
        buf.write("-\3-\3-\7-\u028f\n-\f-\16-\u0292\13-\7-\u0294\n-\f-\16")
        buf.write("-\u0297\13-\3-\3-\3-\3-\7-\u029d\n-\f-\16-\u02a0\13-\5")
        buf.write("-\u02a2\n-\3-\3-\3-\3.\3.\3.\3.\3.\3.\7.\u02ad\n.\f.\16")
        buf.write(".\u02b0\13.\3.\3.\3.\3/\3/\3/\3/\3/\3/\7/\u02bb\n/\f/")
        buf.write("\16/\u02be\13/\3/\3/\3/\3\60\3\60\3\60\7\60\u02c6\n\60")
        buf.write("\f\60\16\60\u02c9\13\60\3\61\3\61\3\61\5\61\u02ce\n\61")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u02d6\n\62\f\62\16")
        buf.write("\62\u02d9\13\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\7\63\u02e4\n\63\f\63\16\63\u02e7\13\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\7\63\u02ef\n\63\f\63\16\63\u02f2")
        buf.write("\13\63\7\63\u02f4\n\63\f\63\16\63\u02f7\13\63\3\63\3\63")
        buf.write("\3\63\3\64\3\64\3\64\3\64\3\64\3\64\7\64\u0302\n\64\f")
        buf.write("\64\16\64\u0305\13\64\3\64\3\64\3\64\3\64\3\64\3\64\7")
        buf.write("\64\u030d\n\64\f\64\16\64\u0310\13\64\7\64\u0312\n\64")
        buf.write("\f\64\16\64\u0315\13\64\3\64\3\64\3\64\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\66\7\66\u032b\n\66\f\66\16\66\u032e\13\66")
        buf.write("\3\66\3\66\3\66\5\66\u0333\n\66\3\67\3\67\3\67\3\67\3")
        buf.write("\67\5\67\u033a\n\67\5\67\u033c\n\67\38\38\38\78\u0341")
        buf.write("\n8\f8\168\u0344\138\39\39\39\79\u0349\n9\f9\169\u034c")
        buf.write("\139\3:\5:\u034f\n:\3:\3:\3;\3;\3;\3;\5;\u0357\n;\3<\3")
        buf.write("<\3=\5=\u035c\n=\3=\3=\3=\3=\7=\u0362\n=\f=\16=\u0365")
        buf.write("\13=\3>\3>\3?\3?\3?\3?\7?\u036d\n?\f?\16?\u0370\13?\3")
        buf.write("@\3@\3A\3A\3A\5A\u0377\nA\3B\3B\3B\3B\3B\3B\3B\5B\u0380")
        buf.write("\nB\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\7B\u038c\nB\fB\16B\u038f")
        buf.write("\13B\3B\3B\3B\3B\3B\3B\3B\5B\u0398\nB\3C\5C\u039b\nC\3")
        buf.write("C\3C\3C\7C\u03a0\nC\fC\16C\u03a3\13C\3D\5D\u03a6\nD\3")
        buf.write("D\3D\5D\u03aa\nD\3D\3D\3D\5D\u03af\nD\7D\u03b1\nD\fD\16")
        buf.write("D\u03b4\13D\3E\3E\5E\u03b8\nE\3E\3E\3F\3F\3F\3F\3F\5F")
        buf.write("\u03c1\nF\3F\5F\u03c4\nF\3G\3G\3G\5G\u03c9\nG\3H\3H\3")
        buf.write("H\3H\3I\3I\3I\3I\5I\u03d3\nI\3I\3I\3I\5I\u03d8\nI\3J\5")
        buf.write("J\u03db\nJ\3J\3J\5J\u03df\nJ\7J\u03e1\nJ\fJ\16J\u03e4")
        buf.write("\13J\3K\3K\3K\7K\u03e9\nK\fK\16K\u03ec\13K\3L\3L\3L\3")
        buf.write("L\7L\u03f2\nL\fL\16L\u03f5\13L\3L\3L\3M\3M\5M\u03fb\n")
        buf.write("M\3N\3N\5N\u03ff\nN\3O\3O\3O\7O\u0404\nO\fO\16O\u0407")
        buf.write("\13O\5O\u0409\nO\3P\3P\3P\3P\2\2Q\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\2\n\3\2\21\22\3\2)*\3\2+-\3\2./\3\2EJ\3\2")
        buf.write("KN\4\2%%OQ\3\2RS\2\u0464\2\u00a3\3\2\2\2\4\u00b1\3\2\2")
        buf.write("\2\6\u00b8\3\2\2\2\b\u00c0\3\2\2\2\n\u00c3\3\2\2\2\f\u00ec")
        buf.write("\3\2\2\2\16\u0106\3\2\2\2\20\u0108\3\2\2\2\22\u0119\3")
        buf.write("\2\2\2\24\u011b\3\2\2\2\26\u0123\3\2\2\2\30\u0126\3\2")
        buf.write("\2\2\32\u0144\3\2\2\2\34\u0149\3\2\2\2\36\u0155\3\2\2")
        buf.write("\2 \u0176\3\2\2\2\"\u017a\3\2\2\2$\u018b\3\2\2\2&\u0193")
        buf.write("\3\2\2\2(\u019b\3\2\2\2*\u01a0\3\2\2\2,\u01a8\3\2\2\2")
        buf.write(".\u01b0\3\2\2\2\60\u01b2\3\2\2\2\62\u01ba\3\2\2\2\64\u01c0")
        buf.write("\3\2\2\2\66\u01c3\3\2\2\28\u01d3\3\2\2\2:\u01d5\3\2\2")
        buf.write("\2<\u01db\3\2\2\2>\u01e5\3\2\2\2@\u01e8\3\2\2\2B\u01f1")
        buf.write("\3\2\2\2D\u01f7\3\2\2\2F\u0205\3\2\2\2H\u020d\3\2\2\2")
        buf.write("J\u0211\3\2\2\2L\u0214\3\2\2\2N\u0218\3\2\2\2P\u0222\3")
        buf.write("\2\2\2R\u0238\3\2\2\2T\u0250\3\2\2\2V\u0254\3\2\2\2X\u027d")
        buf.write("\3\2\2\2Z\u02a6\3\2\2\2\\\u02b4\3\2\2\2^\u02c2\3\2\2\2")
        buf.write("`\u02ca\3\2\2\2b\u02cf\3\2\2\2d\u02dd\3\2\2\2f\u02fb\3")
        buf.write("\2\2\2h\u0319\3\2\2\2j\u0332\3\2\2\2l\u0334\3\2\2\2n\u033d")
        buf.write("\3\2\2\2p\u0345\3\2\2\2r\u034e\3\2\2\2t\u0352\3\2\2\2")
        buf.write("v\u0358\3\2\2\2x\u035b\3\2\2\2z\u0366\3\2\2\2|\u0368\3")
        buf.write("\2\2\2~\u0371\3\2\2\2\u0080\u0373\3\2\2\2\u0082\u0397")
        buf.write("\3\2\2\2\u0084\u039a\3\2\2\2\u0086\u03a5\3\2\2\2\u0088")
        buf.write("\u03b5\3\2\2\2\u008a\u03c3\3\2\2\2\u008c\u03c5\3\2\2\2")
        buf.write("\u008e\u03ca\3\2\2\2\u0090\u03d7\3\2\2\2\u0092\u03da\3")
        buf.write("\2\2\2\u0094\u03e5\3\2\2\2\u0096\u03ed\3\2\2\2\u0098\u03fa")
        buf.write("\3\2\2\2\u009a\u03fc\3\2\2\2\u009c\u0408\3\2\2\2\u009e")
        buf.write("\u040a\3\2\2\2\u00a0\u00a2\5\4\3\2\u00a1\u00a0\3\2\2\2")
        buf.write("\u00a2\u00a5\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a3\u00a4\3")
        buf.write("\2\2\2\u00a4\u00ae\3\2\2\2\u00a5\u00a3\3\2\2\2\u00a6\u00a8")
        buf.write("\7\3\2\2\u00a7\u00a6\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8")
        buf.write("\u00a9\3\2\2\2\u00a9\u00aa\5\6\4\2\u00aa\u00ab\7\4\2\2")
        buf.write("\u00ab\u00ad\3\2\2\2\u00ac\u00a7\3\2\2\2\u00ad\u00b0\3")
        buf.write("\2\2\2\u00ae\u00ac\3\2\2\2\u00ae\u00af\3\2\2\2\u00af\3")
        buf.write("\3\2\2\2\u00b0\u00ae\3\2\2\2\u00b1\u00b3\7\5\2\2\u00b2")
        buf.write("\u00b4\5\u0084C\2\u00b3\u00b2\3\2\2\2\u00b3\u00b4\3\2")
        buf.write("\2\2\u00b4\u00b5\3\2\2\2\u00b5\u00b6\7\4\2\2\u00b6\5\3")
        buf.write("\2\2\2\u00b7\u00b9\7\6\2\2\u00b8\u00b7\3\2\2\2\u00b8\u00b9")
        buf.write("\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00bb\5\n\6\2\u00bb")
        buf.write("\u00bc\5\b\5\2\u00bc\7\3\2\2\2\u00bd\u00c1\5\f\7\2\u00be")
        buf.write("\u00c1\5\16\b\2\u00bf\u00c1\5\20\t\2\u00c0\u00bd\3\2\2")
        buf.write("\2\u00c0\u00be\3\2\2\2\u00c0\u00bf\3\2\2\2\u00c1\t\3\2")
        buf.write("\2\2\u00c2\u00c4\7\7\2\2\u00c3\u00c2\3\2\2\2\u00c3\u00c4")
        buf.write("\3\2\2\2\u00c4\u00da\3\2\2\2\u00c5\u00db\7\b\2\2\u00c6")
        buf.write("\u00db\7\t\2\2\u00c7\u00c9\7\n\2\2\u00c8\u00c7\3\2\2\2")
        buf.write("\u00c8\u00c9\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca\u00db\7")
        buf.write("\13\2\2\u00cb\u00db\7\f\2\2\u00cc\u00ce\7\r\2\2\u00cd")
        buf.write("\u00cc\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00cf\3\2\2\2")
        buf.write("\u00cf\u00db\7\16\2\2\u00d0\u00db\7\17\2\2\u00d1\u00db")
        buf.write("\7\20\2\2\u00d2\u00d4\t\2\2\2\u00d3\u00d2\3\2\2\2\u00d3")
        buf.write("\u00d4\3\2\2\2\u00d4\u00d6\3\2\2\2\u00d5\u00d7\7\n\2\2")
        buf.write("\u00d6\u00d5\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d8\3")
        buf.write("\2\2\2\u00d8\u00db\7\23\2\2\u00d9\u00db\7\n\2\2\u00da")
        buf.write("\u00c5\3\2\2\2\u00da\u00c6\3\2\2\2\u00da\u00c8\3\2\2\2")
        buf.write("\u00da\u00cb\3\2\2\2\u00da\u00cd\3\2\2\2\u00da\u00d0\3")
        buf.write("\2\2\2\u00da\u00d1\3\2\2\2\u00da\u00d3\3\2\2\2\u00da\u00d9")
        buf.write("\3\2\2\2\u00db\13\3\2\2\2\u00dc\u00dd\7[\2\2\u00dd\u00de")
        buf.write("\5\u009cO\2\u00de\u00df\5\30\r\2\u00df\u00e0\7\24\2\2")
        buf.write("\u00e0\u00e1\7[\2\2\u00e1\u00ed\3\2\2\2\u00e2\u00e3\7")
        buf.write("\25\2\2\u00e3\u00e5\7[\2\2\u00e4\u00e6\5:\36\2\u00e5\u00e4")
        buf.write("\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7")
        buf.write("\u00e8\5\u009cO\2\u00e8\u00e9\5\30\r\2\u00e9\u00ea\7\24")
        buf.write("\2\2\u00ea\u00eb\7[\2\2\u00eb\u00ed\3\2\2\2\u00ec\u00dc")
        buf.write("\3\2\2\2\u00ec\u00e2\3\2\2\2\u00ed\r\3\2\2\2\u00ee\u00ef")
        buf.write("\7[\2\2\u00ef\u00f0\7\26\2\2\u00f0\u00f1\5\22\n\2\u00f1")
        buf.write("\u00f3\5\u0084C\2\u00f2\u00f4\5\u0096L\2\u00f3\u00f2\3")
        buf.write("\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f6\3\2\2\2\u00f5\u00f7")
        buf.write("\5:\36\2\u00f6\u00f5\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7")
        buf.write("\u00f8\3\2\2\2\u00f8\u00f9\5\u009aN\2\u00f9\u0107\3\2")
        buf.write("\2\2\u00fa\u00fb\7[\2\2\u00fb\u00fc\7\26\2\2\u00fc\u00fd")
        buf.write("\7\27\2\2\u00fd\u0102\7\30\2\2\u00fe\u0100\5\24\13\2\u00ff")
        buf.write("\u00fe\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0103\3\2\2\2")
        buf.write("\u0101\u0103\7\31\2\2\u0102\u00ff\3\2\2\2\u0102\u0101")
        buf.write("\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0105\7\32\2\2\u0105")
        buf.write("\u0107\5\u009aN\2\u0106\u00ee\3\2\2\2\u0106\u00fa\3\2")
        buf.write("\2\2\u0107\17\3\2\2\2\u0108\u0109\7[\2\2\u0109\u010a\7")
        buf.write("\26\2\2\u010a\u010b\7\33\2\2\u010b\u010c\7\30\2\2\u010c")
        buf.write("\u010d\5\u0084C\2\u010d\u010e\7\34\2\2\u010e\u0113\7[")
        buf.write("\2\2\u010f\u0110\7\34\2\2\u0110\u0112\7[\2\2\u0111\u010f")
        buf.write("\3\2\2\2\u0112\u0115\3\2\2\2\u0113\u0111\3\2\2\2\u0113")
        buf.write("\u0114\3\2\2\2\u0114\u0116\3\2\2\2\u0115\u0113\3\2\2\2")
        buf.write("\u0116\u0117\7\32\2\2\u0117\u0118\5\u009aN\2\u0118\21")
        buf.write("\3\2\2\2\u0119\u011a\5,\27\2\u011a\23\3\2\2\2\u011b\u0120")
        buf.write("\5\26\f\2\u011c\u011d\7\34\2\2\u011d\u011f\5\26\f\2\u011e")
        buf.write("\u011c\3\2\2\2\u011f\u0122\3\2\2\2\u0120\u011e\3\2\2\2")
        buf.write("\u0120\u0121\3\2\2\2\u0121\25\3\2\2\2\u0122\u0120\3\2")
        buf.write("\2\2\u0123\u0124\7[\2\2\u0124\u0125\5\u009aN\2\u0125\27")
        buf.write("\3\2\2\2\u0126\u012f\5\36\20\2\u0127\u0128\7\35\2\2\u0128")
        buf.write("\u012e\5\36\20\2\u0129\u012a\7\36\2\2\u012a\u012e\5\36")
        buf.write("\20\2\u012b\u012e\5N(\2\u012c\u012e\5P)\2\u012d\u0127")
        buf.write("\3\2\2\2\u012d\u0129\3\2\2\2\u012d\u012b\3\2\2\2\u012d")
        buf.write("\u012c\3\2\2\2\u012e\u0131\3\2\2\2\u012f\u012d\3\2\2\2")
        buf.write("\u012f\u0130\3\2\2\2\u0130\u013d\3\2\2\2\u0131\u012f\3")
        buf.write("\2\2\2\u0132\u0134\7\37\2\2\u0133\u0135\5\32\16\2\u0134")
        buf.write("\u0133\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0137\3\2\2\2")
        buf.write("\u0136\u0138\5\34\17\2\u0137\u0136\3\2\2\2\u0137\u0138")
        buf.write("\3\2\2\2\u0138\u013a\3\2\2\2\u0139\u013b\5\u009eP\2\u013a")
        buf.write("\u0139\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013c\3\2\2\2")
        buf.write("\u013c\u013e\7\4\2\2\u013d\u0132\3\2\2\2\u013d\u013e\3")
        buf.write("\2\2\2\u013e\u0142\3\2\2\2\u013f\u0140\5\u009eP\2\u0140")
        buf.write("\u0141\7\4\2\2\u0141\u0143\3\2\2\2\u0142\u013f\3\2\2\2")
        buf.write("\u0142\u0143\3\2\2\2\u0143\31\3\2\2\2\u0144\u0145\7\\")
        buf.write("\2\2\u0145\33\3\2\2\2\u0146\u0147\5\u0086D\2\u0147\u0148")
        buf.write("\7\26\2\2\u0148\u014a\3\2\2\2\u0149\u0146\3\2\2\2\u0149")
        buf.write("\u014a\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014c\7[\2\2")
        buf.write("\u014c\u014e\7\30\2\2\u014d\u014f\5\u0094K\2\u014e\u014d")
        buf.write("\3\2\2\2\u014e\u014f\3\2\2\2\u014f\u0150\3\2\2\2\u0150")
        buf.write("\u0151\7\32\2\2\u0151\35\3\2\2\2\u0152\u0154\5 \21\2\u0153")
        buf.write("\u0152\3\2\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3\2\2\2")
        buf.write("\u0155\u0156\3\2\2\2\u0156\37\3\2\2\2\u0157\u0155\3\2")
        buf.write("\2\2\u0158\u0177\5\"\22\2\u0159\u0177\5&\24\2\u015a\u015c")
        buf.write("\7 \2\2\u015b\u015a\3\2\2\2\u015b\u015c\3\2\2\2\u015c")
        buf.write("\u015e\3\2\2\2\u015d\u015f\7\3\2\2\u015e\u015d\3\2\2\2")
        buf.write("\u015e\u015f\3\2\2\2\u015f\u0161\3\2\2\2\u0160\u0162\7")
        buf.write("!\2\2\u0161\u0160\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0164")
        buf.write("\3\2\2\2\u0163\u0165\7\"\2\2\u0164\u0163\3\2\2\2\u0164")
        buf.write("\u0165\3\2\2\2\u0165\u0174\3\2\2\2\u0166\u0169\5\6\4\2")
        buf.write("\u0167\u0169\5*\26\2\u0168\u0166\3\2\2\2\u0168\u0167\3")
        buf.write("\2\2\2\u0169\u0175\3\2\2\2\u016a\u016d\7#\2\2\u016b\u016e")
        buf.write("\5\6\4\2\u016c\u016e\5*\26\2\u016d\u016b\3\2\2\2\u016d")
        buf.write("\u016c\3\2\2\2\u016e\u0172\3\2\2\2\u016f\u0170\5(\25\2")
        buf.write("\u0170\u0171\5\u009aN\2\u0171\u0173\3\2\2\2\u0172\u016f")
        buf.write("\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0175\3\2\2\2\u0174")
        buf.write("\u0168\3\2\2\2\u0174\u016a\3\2\2\2\u0175\u0177\3\2\2\2")
        buf.write("\u0176\u0158\3\2\2\2\u0176\u0159\3\2\2\2\u0176\u015b\3")
        buf.write("\2\2\2\u0177\u0178\3\2\2\2\u0178\u0179\7\4\2\2\u0179!")
        buf.write("\3\2\2\2\u017a\u0187\7$\2\2\u017b\u017c\7[\2\2\u017c\u017d")
        buf.write("\7\26\2\2\u017d\u0188\5\u0084C\2\u017e\u017f\5\u0084C")
        buf.write("\2\u017f\u0180\7%\2\2\u0180\u0188\3\2\2\2\u0181\u0182")
        buf.write("\5\u0084C\2\u0182\u0183\7&\2\2\u0183\u0184\5$\23\2\u0184")
        buf.write("\u0185\7\'\2\2\u0185\u0188\3\2\2\2\u0186\u0188\5\u0084")
        buf.write("C\2\u0187\u017b\3\2\2\2\u0187\u017e\3\2\2\2\u0187\u0181")
        buf.write("\3\2\2\2\u0187\u0186\3\2\2\2\u0188\u0189\3\2\2\2\u0189")
        buf.write("\u018a\5\u009aN\2\u018a#\3\2\2\2\u018b\u0190\7[\2\2\u018c")
        buf.write("\u018d\7\34\2\2\u018d\u018f\7[\2\2\u018e\u018c\3\2\2\2")
        buf.write("\u018f\u0192\3\2\2\2\u0190\u018e\3\2\2\2\u0190\u0191\3")
        buf.write("\2\2\2\u0191%\3\2\2\2\u0192\u0190\3\2\2\2\u0193\u0194")
        buf.write("\7\25\2\2\u0194\u0196\5\u0084C\2\u0195\u0197\5:\36\2\u0196")
        buf.write("\u0195\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0199\3\2\2\2")
        buf.write("\u0198\u019a\5\u009eP\2\u0199\u0198\3\2\2\2\u0199\u019a")
        buf.write("\3\2\2\2\u019a\'\3\2\2\2\u019b\u019c\7(\2\2\u019c\u019e")
        buf.write("\5\u0084C\2\u019d\u019f\5:\36\2\u019e\u019d\3\2\2\2\u019e")
        buf.write("\u019f\3\2\2\2\u019f)\3\2\2\2\u01a0\u01a1\5,\27\2\u01a1")
        buf.write("\u01a3\5.\30\2\u01a2\u01a4\5\u0096L\2\u01a3\u01a2\3\2")
        buf.write("\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a6")
        buf.write("\5\60\31\2\u01a6+\3\2\2\2\u01a7\u01a9\t\3\2\2\u01a8\u01a7")
        buf.write("\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01ab\3\2\2\2\u01aa")
        buf.write("\u01ac\t\4\2\2\u01ab\u01aa\3\2\2\2\u01ab\u01ac\3\2\2\2")
        buf.write("\u01ac\u01ae\3\2\2\2\u01ad\u01af\t\5\2\2\u01ae\u01ad\3")
        buf.write("\2\2\2\u01ae\u01af\3\2\2\2\u01af-\3\2\2\2\u01b0\u01b1")
        buf.write("\5\u0084C\2\u01b1/\3\2\2\2\u01b2\u01b7\5\62\32\2\u01b3")
        buf.write("\u01b4\7\34\2\2\u01b4\u01b6\5\62\32\2\u01b5\u01b3\3\2")
        buf.write("\2\2\u01b6\u01b9\3\2\2\2\u01b7\u01b5\3\2\2\2\u01b7\u01b8")
        buf.write("\3\2\2\2\u01b8\61\3\2\2\2\u01b9\u01b7\3\2\2\2\u01ba\u01bc")
        buf.write("\5\66\34\2\u01bb\u01bd\5\64\33\2\u01bc\u01bb\3\2\2\2\u01bc")
        buf.write("\u01bd\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01bf\5\u009a")
        buf.write("N\2\u01bf\63\3\2\2\2\u01c0\u01c1\7\60\2\2\u01c1\u01c2")
        buf.write("\5j\66\2\u01c2\65\3\2\2\2\u01c3\u01c5\7[\2\2\u01c4\u01c6")
        buf.write("\5\u0096L\2\u01c5\u01c4\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6")
        buf.write("\u01c8\3\2\2\2\u01c7\u01c9\58\35\2\u01c8\u01c7\3\2\2\2")
        buf.write("\u01c8\u01c9\3\2\2\2\u01c9\67\3\2\2\2\u01ca\u01cd\5:\36")
        buf.write("\2\u01cb\u01cc\7\26\2\2\u01cc\u01ce\5j\66\2\u01cd\u01cb")
        buf.write("\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01d4\3\2\2\2\u01cf")
        buf.write("\u01d0\7\26\2\2\u01d0\u01d4\5j\66\2\u01d1\u01d2\7\61\2")
        buf.write("\2\u01d2\u01d4\5j\66\2\u01d3\u01ca\3\2\2\2\u01d3\u01cf")
        buf.write("\3\2\2\2\u01d3\u01d1\3\2\2\2\u01d49\3\2\2\2\u01d5\u01d7")
        buf.write("\7\30\2\2\u01d6\u01d8\5<\37\2\u01d7\u01d6\3\2\2\2\u01d7")
        buf.write("\u01d8\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01da\7\32\2")
        buf.write("\2\u01da;\3\2\2\2\u01db\u01e0\5> \2\u01dc\u01dd\7\34\2")
        buf.write("\2\u01dd\u01df\5> \2\u01de\u01dc\3\2\2\2\u01df\u01e2\3")
        buf.write("\2\2\2\u01e0\u01de\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1=")
        buf.write("\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e3\u01e6\5@!\2\u01e4\u01e6")
        buf.write("\5D#\2\u01e5\u01e3\3\2\2\2\u01e5\u01e4\3\2\2\2\u01e6?")
        buf.write("\3\2\2\2\u01e7\u01e9\7\62\2\2\u01e8\u01e7\3\2\2\2\u01e8")
        buf.write("\u01e9\3\2\2\2\u01e9\u01eb\3\2\2\2\u01ea\u01ec\7\3\2\2")
        buf.write("\u01eb\u01ea\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ef\3")
        buf.write("\2\2\2\u01ed\u01f0\5B\"\2\u01ee\u01f0\5F$\2\u01ef\u01ed")
        buf.write("\3\2\2\2\u01ef\u01ee\3\2\2\2\u01f0A\3\2\2\2\u01f1\u01f3")
        buf.write("\5\u0084C\2\u01f2\u01f4\58\35\2\u01f3\u01f2\3\2\2\2\u01f3")
        buf.write("\u01f4\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f6\5\u009c")
        buf.write("O\2\u01f6C\3\2\2\2\u01f7\u01f9\7 \2\2\u01f8\u01fa\7\62")
        buf.write("\2\2\u01f9\u01f8\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fc")
        buf.write("\3\2\2\2\u01fb\u01fd\7\3\2\2\u01fc\u01fb\3\2\2\2\u01fc")
        buf.write("\u01fd\3\2\2\2\u01fd\u0203\3\2\2\2\u01fe\u0201\5L\'\2")
        buf.write("\u01ff\u0201\5H%\2\u0200\u01fe\3\2\2\2\u0200\u01ff\3\2")
        buf.write("\2\2\u0201\u0204\3\2\2\2\u0202\u0204\5F$\2\u0203\u0200")
        buf.write("\3\2\2\2\u0203\u0202\3\2\2\2\u0204E\3\2\2\2\u0205\u0208")
        buf.write("\7#\2\2\u0206\u0209\5L\'\2\u0207\u0209\5H%\2\u0208\u0206")
        buf.write("\3\2\2\2\u0208\u0207\3\2\2\2\u0209\u020b\3\2\2\2\u020a")
        buf.write("\u020c\5(\25\2\u020b\u020a\3\2\2\2\u020b\u020c\3\2\2\2")
        buf.write("\u020cG\3\2\2\2\u020d\u020e\5,\27\2\u020e\u020f\5.\30")
        buf.write("\2\u020f\u0210\5J&\2\u0210I\3\2\2\2\u0211\u0212\5\66\34")
        buf.write("\2\u0212\u0213\5\u009aN\2\u0213K\3\2\2\2\u0214\u0215\5")
        buf.write("\n\6\2\u0215\u0216\5\16\b\2\u0216M\3\2\2\2\u0217\u0219")
        buf.write("\7\63\2\2\u0218\u0217\3\2\2\2\u0218\u0219\3\2\2\2\u0219")
        buf.write("\u021a\3\2\2\2\u021a\u021e\7\64\2\2\u021b\u021d\5R*\2")
        buf.write("\u021c\u021b\3\2\2\2\u021d\u0220\3\2\2\2\u021e\u021c\3")
        buf.write("\2\2\2\u021e\u021f\3\2\2\2\u021fO\3\2\2\2\u0220\u021e")
        buf.write("\3\2\2\2\u0221\u0223\7\63\2\2\u0222\u0221\3\2\2\2\u0222")
        buf.write("\u0223\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u022a\7\65\2")
        buf.write("\2\u0225\u0226\5T+\2\u0226\u0227\7\4\2\2\u0227\u0229\3")
        buf.write("\2\2\2\u0228\u0225\3\2\2\2\u0229\u022c\3\2\2\2\u022a\u0228")
        buf.write("\3\2\2\2\u022a\u022b\3\2\2\2\u022bQ\3\2\2\2\u022c\u022a")
        buf.write("\3\2\2\2\u022d\u022e\5l\67\2\u022e\u022f\7\26\2\2\u022f")
        buf.write("\u0230\5j\66\2\u0230\u0239\3\2\2\2\u0231\u0239\5V,\2\u0232")
        buf.write("\u0239\5Z.\2\u0233\u0239\5h\65\2\u0234\u0239\5d\63\2\u0235")
        buf.write("\u0236\5\u0084C\2\u0236\u0237\5\u0088E\2\u0237\u0239\3")
        buf.write("\2\2\2\u0238\u022d\3\2\2\2\u0238\u0231\3\2\2\2\u0238\u0232")
        buf.write("\3\2\2\2\u0238\u0233\3\2\2\2\u0238\u0234\3\2\2\2\u0238")
        buf.write("\u0235\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u023b\5\u009a")
        buf.write("N\2\u023b\u023c\7\4\2\2\u023cS\3\2\2\2\u023d\u0241\5\u0086")
        buf.write("D\2\u023e\u023f\7\61\2\2\u023f\u0242\5j\66\2\u0240\u0242")
        buf.write("\5\u0088E\2\u0241\u023e\3\2\2\2\u0241\u0240\3\2\2\2\u0242")
        buf.write("\u0251\3\2\2\2\u0243\u0244\7\30\2\2\u0244\u0245\5\u0092")
        buf.write("J\2\u0245\u0246\7\32\2\2\u0246\u0247\7\61\2\2\u0247\u0248")
        buf.write("\5\u0086D\2\u0248\u0249\5\u0088E\2\u0249\u0251\3\2\2\2")
        buf.write("\u024a\u0251\7\66\2\2\u024b\u0251\7\67\2\2\u024c\u0251")
        buf.write("\5X-\2\u024d\u0251\5\\/\2\u024e\u0251\5b\62\2\u024f\u0251")
        buf.write("\5f\64\2\u0250\u023d\3\2\2\2\u0250\u0243\3\2\2\2\u0250")
        buf.write("\u024a\3\2\2\2\u0250\u024b\3\2\2\2\u0250\u024c\3\2\2\2")
        buf.write("\u0250\u024d\3\2\2\2\u0250\u024e\3\2\2\2\u0250\u024f\3")
        buf.write("\2\2\2\u0251\u0252\3\2\2\2\u0252\u0253\5\u009aN\2\u0253")
        buf.write("U\3\2\2\2\u0254\u0255\7\60\2\2\u0255\u0256\5j\66\2\u0256")
        buf.write("\u025c\78\2\2\u0257\u0258\5R*\2\u0258\u0259\7\4\2\2\u0259")
        buf.write("\u025b\3\2\2\2\u025a\u0257\3\2\2\2\u025b\u025e\3\2\2\2")
        buf.write("\u025c\u025a\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u026c\3")
        buf.write("\2\2\2\u025e\u025c\3\2\2\2\u025f\u0260\79\2\2\u0260\u0261")
        buf.write("\5j\66\2\u0261\u0267\78\2\2\u0262\u0263\5R*\2\u0263\u0264")
        buf.write("\7\4\2\2\u0264\u0266\3\2\2\2\u0265\u0262\3\2\2\2\u0266")
        buf.write("\u0269\3\2\2\2\u0267\u0265\3\2\2\2\u0267\u0268\3\2\2\2")
        buf.write("\u0268\u026b\3\2\2\2\u0269\u0267\3\2\2\2\u026a\u025f\3")
        buf.write("\2\2\2\u026b\u026e\3\2\2\2\u026c\u026a\3\2\2\2\u026c\u026d")
        buf.write("\3\2\2\2\u026d\u0278\3\2\2\2\u026e\u026c\3\2\2\2\u026f")
        buf.write("\u0275\7:\2\2\u0270\u0271\5R*\2\u0271\u0272\7\4\2\2\u0272")
        buf.write("\u0274\3\2\2\2\u0273\u0270\3\2\2\2\u0274\u0277\3\2\2\2")
        buf.write("\u0275\u0273\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0279\3")
        buf.write("\2\2\2\u0277\u0275\3\2\2\2\u0278\u026f\3\2\2\2\u0278\u0279")
        buf.write("\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u027b\7\24\2\2\u027b")
        buf.write("\u027c\7\60\2\2\u027cW\3\2\2\2\u027d\u027e\7\60\2\2\u027e")
        buf.write("\u027f\5j\66\2\u027f\u0285\78\2\2\u0280\u0281\5T+\2\u0281")
        buf.write("\u0282\7\4\2\2\u0282\u0284\3\2\2\2\u0283\u0280\3\2\2\2")
        buf.write("\u0284\u0287\3\2\2\2\u0285\u0283\3\2\2\2\u0285\u0286\3")
        buf.write("\2\2\2\u0286\u0295\3\2\2\2\u0287\u0285\3\2\2\2\u0288\u0289")
        buf.write("\79\2\2\u0289\u028a\5j\66\2\u028a\u0290\78\2\2\u028b\u028c")
        buf.write("\5T+\2\u028c\u028d\7\4\2\2\u028d\u028f\3\2\2\2\u028e\u028b")
        buf.write("\3\2\2\2\u028f\u0292\3\2\2\2\u0290\u028e\3\2\2\2\u0290")
        buf.write("\u0291\3\2\2\2\u0291\u0294\3\2\2\2\u0292\u0290\3\2\2\2")
        buf.write("\u0293\u0288\3\2\2\2\u0294\u0297\3\2\2\2\u0295\u0293\3")
        buf.write("\2\2\2\u0295\u0296\3\2\2\2\u0296\u02a1\3\2\2\2\u0297\u0295")
        buf.write("\3\2\2\2\u0298\u029e\7:\2\2\u0299\u029a\5T+\2\u029a\u029b")
        buf.write("\7\4\2\2\u029b\u029d\3\2\2\2\u029c\u0299\3\2\2\2\u029d")
        buf.write("\u02a0\3\2\2\2\u029e\u029c\3\2\2\2\u029e\u029f\3\2\2\2")
        buf.write("\u029f\u02a2\3\2\2\2\u02a0\u029e\3\2\2\2\u02a1\u0298\3")
        buf.write("\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a4")
        buf.write("\7\24\2\2\u02a4\u02a5\7\60\2\2\u02a5Y\3\2\2\2\u02a6\u02a7")
        buf.write("\7;\2\2\u02a7\u02a8\5^\60\2\u02a8\u02ae\7<\2\2\u02a9\u02aa")
        buf.write("\5R*\2\u02aa\u02ab\7\4\2\2\u02ab\u02ad\3\2\2\2\u02ac\u02a9")
        buf.write("\3\2\2\2\u02ad\u02b0\3\2\2\2\u02ae\u02ac\3\2\2\2\u02ae")
        buf.write("\u02af\3\2\2\2\u02af\u02b1\3\2\2\2\u02b0\u02ae\3\2\2\2")
        buf.write("\u02b1\u02b2\7\24\2\2\u02b2\u02b3\7;\2\2\u02b3[\3\2\2")
        buf.write("\2\u02b4\u02b5\7;\2\2\u02b5\u02b6\5^\60\2\u02b6\u02bc")
        buf.write("\7<\2\2\u02b7\u02b8\5T+\2\u02b8\u02b9\7\4\2\2\u02b9\u02bb")
        buf.write("\3\2\2\2\u02ba\u02b7\3\2\2\2\u02bb\u02be\3\2\2\2\u02bc")
        buf.write("\u02ba\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02bf\3\2\2\2")
        buf.write("\u02be\u02bc\3\2\2\2\u02bf\u02c0\7\24\2\2\u02c0\u02c1")
        buf.write("\7;\2\2\u02c1]\3\2\2\2\u02c2\u02c7\5`\61\2\u02c3\u02c4")
        buf.write("\7\34\2\2\u02c4\u02c6\5`\61\2\u02c5\u02c3\3\2\2\2\u02c6")
        buf.write("\u02c9\3\2\2\2\u02c7\u02c5\3\2\2\2\u02c7\u02c8\3\2\2\2")
        buf.write("\u02c8_\3\2\2\2\u02c9\u02c7\3\2\2\2\u02ca\u02cd\7[\2\2")
        buf.write("\u02cb\u02cc\7=\2\2\u02cc\u02ce\5j\66\2\u02cd\u02cb\3")
        buf.write("\2\2\2\u02cd\u02ce\3\2\2\2\u02cea\3\2\2\2\u02cf\u02d0")
        buf.write("\7>\2\2\u02d0\u02d1\5j\66\2\u02d1\u02d7\7<\2\2\u02d2\u02d3")
        buf.write("\5T+\2\u02d3\u02d4\7\4\2\2\u02d4\u02d6\3\2\2\2\u02d5\u02d2")
        buf.write("\3\2\2\2\u02d6\u02d9\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d7")
        buf.write("\u02d8\3\2\2\2\u02d8\u02da\3\2\2\2\u02d9\u02d7\3\2\2\2")
        buf.write("\u02da\u02db\7\24\2\2\u02db\u02dc\7>\2\2\u02dcc\3\2\2")
        buf.write("\2\u02dd\u02de\7?\2\2\u02de\u02df\5j\66\2\u02df\u02e5")
        buf.write("\78\2\2\u02e0\u02e1\5R*\2\u02e1\u02e2\7\4\2\2\u02e2\u02e4")
        buf.write("\3\2\2\2\u02e3\u02e0\3\2\2\2\u02e4\u02e7\3\2\2\2\u02e5")
        buf.write("\u02e3\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02f5\3\2\2\2")
        buf.write("\u02e7\u02e5\3\2\2\2\u02e8\u02e9\7@\2\2\u02e9\u02ea\5")
        buf.write("j\66\2\u02ea\u02f0\78\2\2\u02eb\u02ec\5R*\2\u02ec\u02ed")
        buf.write("\7\4\2\2\u02ed\u02ef\3\2\2\2\u02ee\u02eb\3\2\2\2\u02ef")
        buf.write("\u02f2\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f0\u02f1\3\2\2\2")
        buf.write("\u02f1\u02f4\3\2\2\2\u02f2\u02f0\3\2\2\2\u02f3\u02e8\3")
        buf.write("\2\2\2\u02f4\u02f7\3\2\2\2\u02f5\u02f3\3\2\2\2\u02f5\u02f6")
        buf.write("\3\2\2\2\u02f6\u02f8\3\2\2\2\u02f7\u02f5\3\2\2\2\u02f8")
        buf.write("\u02f9\7\24\2\2\u02f9\u02fa\7?\2\2\u02fae\3\2\2\2\u02fb")
        buf.write("\u02fc\7?\2\2\u02fc\u02fd\5j\66\2\u02fd\u0303\78\2\2\u02fe")
        buf.write("\u02ff\5T+\2\u02ff\u0300\7\4\2\2\u0300\u0302\3\2\2\2\u0301")
        buf.write("\u02fe\3\2\2\2\u0302\u0305\3\2\2\2\u0303\u0301\3\2\2\2")
        buf.write("\u0303\u0304\3\2\2\2\u0304\u0313\3\2\2\2\u0305\u0303\3")
        buf.write("\2\2\2\u0306\u0307\7@\2\2\u0307\u0308\5j\66\2\u0308\u030e")
        buf.write("\78\2\2\u0309\u030a\5T+\2\u030a\u030b\7\4\2\2\u030b\u030d")
        buf.write("\3\2\2\2\u030c\u0309\3\2\2\2\u030d\u0310\3\2\2\2\u030e")
        buf.write("\u030c\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0312\3\2\2\2")
        buf.write("\u0310\u030e\3\2\2\2\u0311\u0306\3\2\2\2\u0312\u0315\3")
        buf.write("\2\2\2\u0313\u0311\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0316")
        buf.write("\3\2\2\2\u0315\u0313\3\2\2\2\u0316\u0317\7\24\2\2\u0317")
        buf.write("\u0318\7?\2\2\u0318g\3\2\2\2\u0319\u031a\7A\2\2\u031a")
        buf.write("\u031b\7\30\2\2\u031b\u031c\5\u0086D\2\u031c\u031d\7\34")
        buf.write("\2\2\u031d\u031e\5\u0086D\2\u031e\u031f\7\32\2\2\u031f")
        buf.write("i\3\2\2\2\u0320\u0333\5l\67\2\u0321\u0322\7\60\2\2\u0322")
        buf.write("\u0323\5j\66\2\u0323\u0324\78\2\2\u0324\u032c\5j\66\2")
        buf.write("\u0325\u0326\79\2\2\u0326\u0327\5j\66\2\u0327\u0328\7")
        buf.write("8\2\2\u0328\u0329\5j\66\2\u0329\u032b\3\2\2\2\u032a\u0325")
        buf.write("\3\2\2\2\u032b\u032e\3\2\2\2\u032c\u032a\3\2\2\2\u032c")
        buf.write("\u032d\3\2\2\2\u032d\u032f\3\2\2\2\u032e\u032c\3\2\2\2")
        buf.write("\u032f\u0330\7:\2\2\u0330\u0331\5j\66\2\u0331\u0333\3")
        buf.write("\2\2\2\u0332\u0320\3\2\2\2\u0332\u0321\3\2\2\2\u0333k")
        buf.write("\3\2\2\2\u0334\u033b\5n8\2\u0335\u0336\7\31\2\2\u0336")
        buf.write("\u0339\5n8\2\u0337\u0338\7\31\2\2\u0338\u033a\5n8\2\u0339")
        buf.write("\u0337\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u033c\3\2\2\2")
        buf.write("\u033b\u0335\3\2\2\2\u033b\u033c\3\2\2\2\u033cm\3\2\2")
        buf.write("\2\u033d\u0342\5p9\2\u033e\u033f\7B\2\2\u033f\u0341\5")
        buf.write("p9\2\u0340\u033e\3\2\2\2\u0341\u0344\3\2\2\2\u0342\u0340")
        buf.write("\3\2\2\2\u0342\u0343\3\2\2\2\u0343o\3\2\2\2\u0344\u0342")
        buf.write("\3\2\2\2\u0345\u034a\5r:\2\u0346\u0347\7C\2\2\u0347\u0349")
        buf.write("\5r:\2\u0348\u0346\3\2\2\2\u0349\u034c\3\2\2\2\u034a\u0348")
        buf.write("\3\2\2\2\u034a\u034b\3\2\2\2\u034bq\3\2\2\2\u034c\u034a")
        buf.write("\3\2\2\2\u034d\u034f\7D\2\2\u034e\u034d\3\2\2\2\u034e")
        buf.write("\u034f\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0351\5t;\2\u0351")
        buf.write("s\3\2\2\2\u0352\u0356\5x=\2\u0353\u0354\5v<\2\u0354\u0355")
        buf.write("\5x=\2\u0355\u0357\3\2\2\2\u0356\u0353\3\2\2\2\u0356\u0357")
        buf.write("\3\2\2\2\u0357u\3\2\2\2\u0358\u0359\t\6\2\2\u0359w\3\2")
        buf.write("\2\2\u035a\u035c\5z>\2\u035b\u035a\3\2\2\2\u035b\u035c")
        buf.write("\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u0363\5|?\2\u035e\u035f")
        buf.write("\5z>\2\u035f\u0360\5|?\2\u0360\u0362\3\2\2\2\u0361\u035e")
        buf.write("\3\2\2\2\u0362\u0365\3\2\2\2\u0363\u0361\3\2\2\2\u0363")
        buf.write("\u0364\3\2\2\2\u0364y\3\2\2\2\u0365\u0363\3\2\2\2\u0366")
        buf.write("\u0367\t\7\2\2\u0367{\3\2\2\2\u0368\u036e\5\u0080A\2\u0369")
        buf.write("\u036a\5~@\2\u036a\u036b\5\u0080A\2\u036b\u036d\3\2\2")
        buf.write("\2\u036c\u0369\3\2\2\2\u036d\u0370\3\2\2\2\u036e\u036c")
        buf.write("\3\2\2\2\u036e\u036f\3\2\2\2\u036f}\3\2\2\2\u0370\u036e")
        buf.write("\3\2\2\2\u0371\u0372\t\b\2\2\u0372\177\3\2\2\2\u0373\u0376")
        buf.write("\5\u0082B\2\u0374\u0375\t\t\2\2\u0375\u0377\5\u0082B\2")
        buf.write("\u0376\u0374\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u0081\3")
        buf.write("\2\2\2\u0378\u0398\7]\2\2\u0379\u0398\7\\\2\2\u037a\u0398")
        buf.write("\7T\2\2\u037b\u0398\7U\2\2\u037c\u0380\5\u0084C\2\u037d")
        buf.write("\u0380\7\33\2\2\u037e\u0380\7\63\2\2\u037f\u037c\3\2\2")
        buf.write("\2\u037f\u037d\3\2\2\2\u037f\u037e\3\2\2\2\u0380\u0381")
        buf.write("\3\2\2\2\u0381\u0398\5\u0088E\2\u0382\u0398\5\u0086D\2")
        buf.write("\u0383\u0384\7\30\2\2\u0384\u0385\5\u0092J\2\u0385\u0386")
        buf.write("\7\32\2\2\u0386\u0398\3\2\2\2\u0387\u0388\7V\2\2\u0388")
        buf.write("\u038d\5\u0094K\2\u0389\u038a\7\4\2\2\u038a\u038c\5\u0094")
        buf.write("K\2\u038b\u0389\3\2\2\2\u038c\u038f\3\2\2\2\u038d\u038b")
        buf.write("\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u0390\3\2\2\2\u038f")
        buf.write("\u038d\3\2\2\2\u0390\u0391\7W\2\2\u0391\u0398\3\2\2\2")
        buf.write("\u0392\u0393\7X\2\2\u0393\u0394\5\u008aF\2\u0394\u0395")
        buf.write("\7\'\2\2\u0395\u0398\3\2\2\2\u0396\u0398\7\24\2\2\u0397")
        buf.write("\u0378\3\2\2\2\u0397\u0379\3\2\2\2\u0397\u037a\3\2\2\2")
        buf.write("\u0397\u037b\3\2\2\2\u0397\u037f\3\2\2\2\u0397\u0382\3")
        buf.write("\2\2\2\u0397\u0383\3\2\2\2\u0397\u0387\3\2\2\2\u0397\u0392")
        buf.write("\3\2\2\2\u0397\u0396\3\2\2\2\u0398\u0083\3\2\2\2\u0399")
        buf.write("\u039b\7Y\2\2\u039a\u0399\3\2\2\2\u039a\u039b\3\2\2\2")
        buf.write("\u039b\u039c\3\2\2\2\u039c\u03a1\7[\2\2\u039d\u039e\7")
        buf.write("Y\2\2\u039e\u03a0\7[\2\2\u039f\u039d\3\2\2\2\u03a0\u03a3")
        buf.write("\3\2\2\2\u03a1\u039f\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2")
        buf.write("\u0085\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a4\u03a6\7Y\2\2")
        buf.write("\u03a5\u03a4\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a7\3")
        buf.write("\2\2\2\u03a7\u03a9\7[\2\2\u03a8\u03aa\5\u0096L\2\u03a9")
        buf.write("\u03a8\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03b2\3\2\2\2")
        buf.write("\u03ab\u03ac\7Y\2\2\u03ac\u03ae\7[\2\2\u03ad\u03af\5\u0096")
        buf.write("L\2\u03ae\u03ad\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b1")
        buf.write("\3\2\2\2\u03b0\u03ab\3\2\2\2\u03b1\u03b4\3\2\2\2\u03b2")
        buf.write("\u03b0\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u0087\3\2\2\2")
        buf.write("\u03b4\u03b2\3\2\2\2\u03b5\u03b7\7\30\2\2\u03b6\u03b8")
        buf.write("\5\u008aF\2\u03b7\u03b6\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8")
        buf.write("\u03b9\3\2\2\2\u03b9\u03ba\7\32\2\2\u03ba\u0089\3\2\2")
        buf.write("\2\u03bb\u03c0\5\u0090I\2\u03bc\u03bd\7\34\2\2\u03bd\u03c1")
        buf.write("\5\u008aF\2\u03be\u03bf\7;\2\2\u03bf\u03c1\5^\60\2\u03c0")
        buf.write("\u03bc\3\2\2\2\u03c0\u03be\3\2\2\2\u03c0\u03c1\3\2\2\2")
        buf.write("\u03c1\u03c4\3\2\2\2\u03c2\u03c4\5\u008cG\2\u03c3\u03bb")
        buf.write("\3\2\2\2\u03c3\u03c2\3\2\2\2\u03c4\u008b\3\2\2\2\u03c5")
        buf.write("\u03c8\5\u008eH\2\u03c6\u03c7\7\34\2\2\u03c7\u03c9\5\u008c")
        buf.write("G\2\u03c8\u03c6\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u008d")
        buf.write("\3\2\2\2\u03ca\u03cb\7[\2\2\u03cb\u03cc\7\26\2\2\u03cc")
        buf.write("\u03cd\5\u0090I\2\u03cd\u008f\3\2\2\2\u03ce\u03cf\7\23")
        buf.write("\2\2\u03cf\u03d0\5\u0084C\2\u03d0\u03d2\7\30\2\2\u03d1")
        buf.write("\u03d3\5\u008cG\2\u03d2\u03d1\3\2\2\2\u03d2\u03d3\3\2")
        buf.write("\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d5\7\32\2\2\u03d5\u03d8")
        buf.write("\3\2\2\2\u03d6\u03d8\5j\66\2\u03d7\u03ce\3\2\2\2\u03d7")
        buf.write("\u03d6\3\2\2\2\u03d8\u0091\3\2\2\2\u03d9\u03db\5j\66\2")
        buf.write("\u03da\u03d9\3\2\2\2\u03da\u03db\3\2\2\2\u03db\u03e2\3")
        buf.write("\2\2\2\u03dc\u03de\7\34\2\2\u03dd\u03df\5j\66\2\u03de")
        buf.write("\u03dd\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e1\3\2\2\2")
        buf.write("\u03e0\u03dc\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e0\3")
        buf.write("\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u0093\3\2\2\2\u03e4\u03e2")
        buf.write("\3\2\2\2\u03e5\u03ea\5j\66\2\u03e6\u03e7\7\34\2\2\u03e7")
        buf.write("\u03e9\5j\66\2\u03e8\u03e6\3\2\2\2\u03e9\u03ec\3\2\2\2")
        buf.write("\u03ea\u03e8\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u0095\3")
        buf.write("\2\2\2\u03ec\u03ea\3\2\2\2\u03ed\u03ee\7V\2\2\u03ee\u03f3")
        buf.write("\5\u0098M\2\u03ef\u03f0\7\34\2\2\u03f0\u03f2\5\u0098M")
        buf.write("\2\u03f1\u03ef\3\2\2\2\u03f2\u03f5\3\2\2\2\u03f3\u03f1")
        buf.write("\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f6\3\2\2\2\u03f5")
        buf.write("\u03f3\3\2\2\2\u03f6\u03f7\7W\2\2\u03f7\u0097\3\2\2\2")
        buf.write("\u03f8\u03fb\7\31\2\2\u03f9\u03fb\5j\66\2\u03fa\u03f8")
        buf.write("\3\2\2\2\u03fa\u03f9\3\2\2\2\u03fb\u0099\3\2\2\2\u03fc")
        buf.write("\u03fe\5\u009cO\2\u03fd\u03ff\5\u009eP\2\u03fe\u03fd\3")
        buf.write("\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u009b\3\2\2\2\u0400\u0405")
        buf.write("\7\\\2\2\u0401\u0402\7K\2\2\u0402\u0404\7\\\2\2\u0403")
        buf.write("\u0401\3\2\2\2\u0404\u0407\3\2\2\2\u0405\u0403\3\2\2\2")
        buf.write("\u0405\u0406\3\2\2\2\u0406\u0409\3\2\2\2\u0407\u0405\3")
        buf.write("\2\2\2\u0408\u0400\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u009d")
        buf.write("\3\2\2\2\u040a\u040b\7Z\2\2\u040b\u040c\5:\36\2\u040c")
        buf.write("\u009f\3\2\2\2\u0086\u00a3\u00a7\u00ae\u00b3\u00b8\u00c0")
        buf.write("\u00c3\u00c8\u00cd\u00d3\u00d6\u00da\u00e5\u00ec\u00f3")
        buf.write("\u00f6\u00ff\u0102\u0106\u0113\u0120\u012d\u012f\u0134")
        buf.write("\u0137\u013a\u013d\u0142\u0149\u014e\u0155\u015b\u015e")
        buf.write("\u0161\u0164\u0168\u016d\u0172\u0174\u0176\u0187\u0190")
        buf.write("\u0196\u0199\u019e\u01a3\u01a8\u01ab\u01ae\u01b7\u01bc")
        buf.write("\u01c5\u01c8\u01cd\u01d3\u01d7\u01e0\u01e5\u01e8\u01eb")
        buf.write("\u01ef\u01f3\u01f9\u01fc\u0200\u0203\u0208\u020b\u0218")
        buf.write("\u021e\u0222\u022a\u0238\u0241\u0250\u025c\u0267\u026c")
        buf.write("\u0275\u0278\u0285\u0290\u0295\u029e\u02a1\u02ae\u02bc")
        buf.write("\u02c7\u02cd\u02d7\u02e5\u02f0\u02f5\u0303\u030e\u0313")
        buf.write("\u032c\u0332\u0339\u033b\u0342\u034a\u034e\u0356\u035b")
        buf.write("\u0363\u036e\u0376\u037f\u038d\u0397\u039a\u03a1\u03a5")
        buf.write("\u03a9\u03ae\u03b2\u03b7\u03c0\u03c3\u03c8\u03d2\u03d7")
        buf.write("\u03da\u03de\u03e2\u03ea\u03f3\u03fa\u03fe\u0405\u0408")
        return buf.getvalue()


class modelicaParser ( Parser ):

    grammarFileName = "modelica.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'final'", "';'", "'within'", "'encapsulated'", 
                     "'partial'", "'class'", "'model'", "'operator'", "'record'", 
                     "'block'", "'expandable'", "'connector'", "'type'", 
                     "'package'", "'pure'", "'impure'", "'function'", "'end'", 
                     "'extends'", "'='", "'enumeration'", "'('", "':'", 
                     "')'", "'der'", "','", "'public'", "'protected'", "'external'", 
                     "'redeclare'", "'inner'", "'outer'", "'replaceable'", 
                     "'import'", "'.*'", "'.{'", "'}'", "'constrainedby'", 
                     "'flow'", "'stream'", "'discrete'", "'parameter'", 
                     "'constant'", "'input'", "'output'", "'if'", "':='", 
                     "'each'", "'initial'", "'equation'", "'algorithm'", 
                     "'break'", "'return'", "'then'", "'elseif'", "'else'", 
                     "'for'", "'loop'", "'in'", "'while'", "'when'", "'elsewhen'", 
                     "'connect'", "'or'", "'and'", "'not'", "'<'", "'<='", 
                     "'>'", "'>='", "'=='", "'<>'", "'+'", "'-'", "'.+'", 
                     "'.-'", "'*'", "'/'", "'./'", "'^'", "'.^'", "'false'", 
                     "'true'", "'['", "']'", "'{'", "'.'", "'annotation'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "IDENT", "STRING", "UNSIGNED_NUMBER", 
                      "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_stored_definition = 0
    RULE_within_statement = 1
    RULE_class_definition = 2
    RULE_class_specifier = 3
    RULE_class_prefixes = 4
    RULE_long_class_specifier = 5
    RULE_short_class_specifier = 6
    RULE_der_class_specifier = 7
    RULE_base_prefix = 8
    RULE_enum_list = 9
    RULE_enumeration_literal = 10
    RULE_composition = 11
    RULE_language_specification = 12
    RULE_external_function_call = 13
    RULE_element_list = 14
    RULE_element = 15
    RULE_import_clause = 16
    RULE_import_list = 17
    RULE_extends_clause = 18
    RULE_constraining_clause = 19
    RULE_component_clause = 20
    RULE_type_prefix = 21
    RULE_type_specifier = 22
    RULE_component_list = 23
    RULE_component_declaration = 24
    RULE_condition_attribute = 25
    RULE_declaration = 26
    RULE_modification = 27
    RULE_class_modification = 28
    RULE_argument_list = 29
    RULE_argument = 30
    RULE_element_modification_or_replaceable = 31
    RULE_element_modification = 32
    RULE_element_redeclaration = 33
    RULE_element_replaceable = 34
    RULE_component_clause1 = 35
    RULE_component_declaration1 = 36
    RULE_short_class_definition = 37
    RULE_equation_section = 38
    RULE_algorithm_section = 39
    RULE_equation = 40
    RULE_statement = 41
    RULE_if_equation = 42
    RULE_if_statement = 43
    RULE_for_equation = 44
    RULE_for_statement = 45
    RULE_for_indices = 46
    RULE_for_index = 47
    RULE_while_statement = 48
    RULE_when_equation = 49
    RULE_when_statement = 50
    RULE_connect_clause = 51
    RULE_expression = 52
    RULE_simple_expression = 53
    RULE_logical_expression = 54
    RULE_logical_term = 55
    RULE_logical_factor = 56
    RULE_relation = 57
    RULE_rel_op = 58
    RULE_arithmetic_expression = 59
    RULE_add_op = 60
    RULE_term = 61
    RULE_mul_op = 62
    RULE_factor = 63
    RULE_primary = 64
    RULE_name = 65
    RULE_component_reference = 66
    RULE_function_call_args = 67
    RULE_function_arguments = 68
    RULE_named_arguments = 69
    RULE_named_argument = 70
    RULE_function_argument = 71
    RULE_output_expression_list = 72
    RULE_expression_list = 73
    RULE_array_subscripts = 74
    RULE_subscript = 75
    RULE_comment = 76
    RULE_string_comment = 77
    RULE_annotation = 78

    ruleNames =  [ "stored_definition", "within_statement", "class_definition", 
                   "class_specifier", "class_prefixes", "long_class_specifier", 
                   "short_class_specifier", "der_class_specifier", "base_prefix", 
                   "enum_list", "enumeration_literal", "composition", "language_specification", 
                   "external_function_call", "element_list", "element", 
                   "import_clause", "import_list", "extends_clause", "constraining_clause", 
                   "component_clause", "type_prefix", "type_specifier", 
                   "component_list", "component_declaration", "condition_attribute", 
                   "declaration", "modification", "class_modification", 
                   "argument_list", "argument", "element_modification_or_replaceable", 
                   "element_modification", "element_redeclaration", "element_replaceable", 
                   "component_clause1", "component_declaration1", "short_class_definition", 
                   "equation_section", "algorithm_section", "equation", 
                   "statement", "if_equation", "if_statement", "for_equation", 
                   "for_statement", "for_indices", "for_index", "while_statement", 
                   "when_equation", "when_statement", "connect_clause", 
                   "expression", "simple_expression", "logical_expression", 
                   "logical_term", "logical_factor", "relation", "rel_op", 
                   "arithmetic_expression", "add_op", "term", "mul_op", 
                   "factor", "primary", "name", "component_reference", "function_call_args", 
                   "function_arguments", "named_arguments", "named_argument", 
                   "function_argument", "output_expression_list", "expression_list", 
                   "array_subscripts", "subscript", "comment", "string_comment", 
                   "annotation" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    IDENT=89
    STRING=90
    UNSIGNED_NUMBER=91
    WS=92
    COMMENT=93
    LINE_COMMENT=94

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Stored_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def within_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Within_statementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Within_statementContext,i)


        def class_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Class_definitionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Class_definitionContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_stored_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStored_definition" ):
                listener.enterStored_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStored_definition" ):
                listener.exitStored_definition(self)




    def stored_definition(self):

        localctx = modelicaParser.Stored_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_stored_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__2:
                self.state = 158
                self.within_statement()
                self.state = 163
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__0) | (1 << modelicaParser.T__3) | (1 << modelicaParser.T__4) | (1 << modelicaParser.T__5) | (1 << modelicaParser.T__6) | (1 << modelicaParser.T__7) | (1 << modelicaParser.T__8) | (1 << modelicaParser.T__9) | (1 << modelicaParser.T__10) | (1 << modelicaParser.T__11) | (1 << modelicaParser.T__12) | (1 << modelicaParser.T__13) | (1 << modelicaParser.T__14) | (1 << modelicaParser.T__15) | (1 << modelicaParser.T__16))) != 0):
                self.state = 165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__0:
                    self.state = 164
                    self.match(modelicaParser.T__0)


                self.state = 167
                self.class_definition()
                self.state = 168
                self.match(modelicaParser.T__1)
                self.state = 174
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Within_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_within_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_statement" ):
                listener.enterWithin_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_statement" ):
                listener.exitWithin_statement(self)




    def within_statement(self):

        localctx = modelicaParser.Within_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_within_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 175
            self.match(modelicaParser.T__2)
            self.state = 177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 176
                self.name()


            self.state = 179
            self.match(modelicaParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_prefixes(self):
            return self.getTypedRuleContext(modelicaParser.Class_prefixesContext,0)


        def class_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Class_specifierContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_definition" ):
                listener.enterClass_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_definition" ):
                listener.exitClass_definition(self)




    def class_definition(self):

        localctx = modelicaParser.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__3:
                self.state = 181
                self.match(modelicaParser.T__3)


            self.state = 184
            self.class_prefixes()
            self.state = 185
            self.class_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def long_class_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Long_class_specifierContext,0)


        def short_class_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Short_class_specifierContext,0)


        def der_class_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Der_class_specifierContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_class_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_specifier" ):
                listener.enterClass_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_specifier" ):
                listener.exitClass_specifier(self)




    def class_specifier(self):

        localctx = modelicaParser.Class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_class_specifier)
        try:
            self.state = 190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 187
                self.long_class_specifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 188
                self.short_class_specifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 189
                self.der_class_specifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_prefixesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return modelicaParser.RULE_class_prefixes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_prefixes" ):
                listener.enterClass_prefixes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_prefixes" ):
                listener.exitClass_prefixes(self)




    def class_prefixes(self):

        localctx = modelicaParser.Class_prefixesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_class_prefixes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__4:
                self.state = 192
                self.match(modelicaParser.T__4)


            self.state = 216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 195
                self.match(modelicaParser.T__5)
                pass

            elif la_ == 2:
                self.state = 196
                self.match(modelicaParser.T__6)
                pass

            elif la_ == 3:
                self.state = 198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__7:
                    self.state = 197
                    self.match(modelicaParser.T__7)


                self.state = 200
                self.match(modelicaParser.T__8)
                pass

            elif la_ == 4:
                self.state = 201
                self.match(modelicaParser.T__9)
                pass

            elif la_ == 5:
                self.state = 203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__10:
                    self.state = 202
                    self.match(modelicaParser.T__10)


                self.state = 205
                self.match(modelicaParser.T__11)
                pass

            elif la_ == 6:
                self.state = 206
                self.match(modelicaParser.T__12)
                pass

            elif la_ == 7:
                self.state = 207
                self.match(modelicaParser.T__13)
                pass

            elif la_ == 8:
                self.state = 209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__14 or _la==modelicaParser.T__15:
                    self.state = 208
                    _la = self._input.LA(1)
                    if not(_la==modelicaParser.T__14 or _la==modelicaParser.T__15):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__7:
                    self.state = 211
                    self.match(modelicaParser.T__7)


                self.state = 214
                self.match(modelicaParser.T__16)
                pass

            elif la_ == 9:
                self.state = 215
                self.match(modelicaParser.T__7)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Long_class_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def string_comment(self):
            return self.getTypedRuleContext(modelicaParser.String_commentContext,0)


        def composition(self):
            return self.getTypedRuleContext(modelicaParser.CompositionContext,0)


        def class_modification(self):
            return self.getTypedRuleContext(modelicaParser.Class_modificationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_long_class_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLong_class_specifier" ):
                listener.enterLong_class_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLong_class_specifier" ):
                listener.exitLong_class_specifier(self)




    def long_class_specifier(self):

        localctx = modelicaParser.Long_class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_long_class_specifier)
        self._la = 0 # Token type
        try:
            self.state = 234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 218
                self.match(modelicaParser.IDENT)
                self.state = 219
                self.string_comment()
                self.state = 220
                self.composition()
                self.state = 221
                self.match(modelicaParser.T__17)
                self.state = 222
                self.match(modelicaParser.IDENT)
                pass
            elif token in [modelicaParser.T__18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 224
                self.match(modelicaParser.T__18)
                self.state = 225
                self.match(modelicaParser.IDENT)
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__21:
                    self.state = 226
                    self.class_modification()


                self.state = 229
                self.string_comment()
                self.state = 230
                self.composition()
                self.state = 231
                self.match(modelicaParser.T__17)
                self.state = 232
                self.match(modelicaParser.IDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Short_class_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def base_prefix(self):
            return self.getTypedRuleContext(modelicaParser.Base_prefixContext,0)


        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def array_subscripts(self):
            return self.getTypedRuleContext(modelicaParser.Array_subscriptsContext,0)


        def class_modification(self):
            return self.getTypedRuleContext(modelicaParser.Class_modificationContext,0)


        def enum_list(self):
            return self.getTypedRuleContext(modelicaParser.Enum_listContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_short_class_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShort_class_specifier" ):
                listener.enterShort_class_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShort_class_specifier" ):
                listener.exitShort_class_specifier(self)




    def short_class_specifier(self):

        localctx = modelicaParser.Short_class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_short_class_specifier)
        self._la = 0 # Token type
        try:
            self.state = 260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 236
                self.match(modelicaParser.IDENT)
                self.state = 237
                self.match(modelicaParser.T__19)
                self.state = 238
                self.base_prefix()
                self.state = 239
                self.name()
                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__83:
                    self.state = 240
                    self.array_subscripts()


                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__21:
                    self.state = 243
                    self.class_modification()


                self.state = 246
                self.comment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 248
                self.match(modelicaParser.IDENT)
                self.state = 249
                self.match(modelicaParser.T__19)
                self.state = 250
                self.match(modelicaParser.T__20)
                self.state = 251
                self.match(modelicaParser.T__21)
                self.state = 256
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__23, modelicaParser.IDENT]:
                    self.state = 253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==modelicaParser.IDENT:
                        self.state = 252
                        self.enum_list()


                    pass
                elif token in [modelicaParser.T__22]:
                    self.state = 255
                    self.match(modelicaParser.T__22)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 258
                self.match(modelicaParser.T__23)
                self.state = 259
                self.comment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Der_class_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_der_class_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDer_class_specifier" ):
                listener.enterDer_class_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDer_class_specifier" ):
                listener.exitDer_class_specifier(self)




    def der_class_specifier(self):

        localctx = modelicaParser.Der_class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_der_class_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(modelicaParser.IDENT)
            self.state = 263
            self.match(modelicaParser.T__19)
            self.state = 264
            self.match(modelicaParser.T__24)
            self.state = 265
            self.match(modelicaParser.T__21)
            self.state = 266
            self.name()
            self.state = 267
            self.match(modelicaParser.T__25)
            self.state = 268
            self.match(modelicaParser.IDENT)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 269
                self.match(modelicaParser.T__25)
                self.state = 270
                self.match(modelicaParser.IDENT)
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 276
            self.match(modelicaParser.T__23)
            self.state = 277
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_prefixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix(self):
            return self.getTypedRuleContext(modelicaParser.Type_prefixContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_base_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_prefix" ):
                listener.enterBase_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_prefix" ):
                listener.exitBase_prefix(self)




    def base_prefix(self):

        localctx = modelicaParser.Base_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_base_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.type_prefix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeration_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Enumeration_literalContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Enumeration_literalContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_enum_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_list" ):
                listener.enterEnum_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_list" ):
                listener.exitEnum_list(self)




    def enum_list(self):

        localctx = modelicaParser.Enum_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_enum_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.enumeration_literal()
            self.state = 286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 282
                self.match(modelicaParser.T__25)
                self.state = 283
                self.enumeration_literal()
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enumeration_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_enumeration_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeration_literal" ):
                listener.enterEnumeration_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeration_literal" ):
                listener.exitEnumeration_literal(self)




    def enumeration_literal(self):

        localctx = modelicaParser.Enumeration_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_enumeration_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.match(modelicaParser.IDENT)
            self.state = 290
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Element_listContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Element_listContext,i)


        def equation_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Equation_sectionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Equation_sectionContext,i)


        def algorithm_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Algorithm_sectionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Algorithm_sectionContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(modelicaParser.AnnotationContext,i)


        def language_specification(self):
            return self.getTypedRuleContext(modelicaParser.Language_specificationContext,0)


        def external_function_call(self):
            return self.getTypedRuleContext(modelicaParser.External_function_callContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_composition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposition" ):
                listener.enterComposition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposition" ):
                listener.exitComposition(self)




    def composition(self):

        localctx = modelicaParser.CompositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_composition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.element_list()
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__26) | (1 << modelicaParser.T__27) | (1 << modelicaParser.T__48) | (1 << modelicaParser.T__49) | (1 << modelicaParser.T__50))) != 0):
                self.state = 299
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 293
                    self.match(modelicaParser.T__26)
                    self.state = 294
                    self.element_list()
                    pass

                elif la_ == 2:
                    self.state = 295
                    self.match(modelicaParser.T__27)
                    self.state = 296
                    self.element_list()
                    pass

                elif la_ == 3:
                    self.state = 297
                    self.equation_section()
                    pass

                elif la_ == 4:
                    self.state = 298
                    self.algorithm_section()
                    pass


                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__28:
                self.state = 304
                self.match(modelicaParser.T__28)
                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.STRING:
                    self.state = 305
                    self.language_specification()


                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                    self.state = 308
                    self.external_function_call()


                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__87:
                    self.state = 311
                    self.annotation()


                self.state = 314
                self.match(modelicaParser.T__1)


            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__87:
                self.state = 317
                self.annotation()
                self.state = 318
                self.match(modelicaParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Language_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(modelicaParser.STRING, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_language_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLanguage_specification" ):
                listener.enterLanguage_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLanguage_specification" ):
                listener.exitLanguage_specification(self)




    def language_specification(self):

        localctx = modelicaParser.Language_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_language_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(modelicaParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def component_reference(self):
            return self.getTypedRuleContext(modelicaParser.Component_referenceContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(modelicaParser.Expression_listContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_external_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_call" ):
                listener.enterExternal_function_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_call" ):
                listener.exitExternal_function_call(self)




    def external_function_call(self):

        localctx = modelicaParser.External_function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_external_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 324
                self.component_reference()
                self.state = 325
                self.match(modelicaParser.T__19)


            self.state = 329
            self.match(modelicaParser.IDENT)
            self.state = 330
            self.match(modelicaParser.T__21)
            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__17) | (1 << modelicaParser.T__21) | (1 << modelicaParser.T__24) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__48))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (modelicaParser.T__65 - 66)) | (1 << (modelicaParser.T__72 - 66)) | (1 << (modelicaParser.T__73 - 66)) | (1 << (modelicaParser.T__74 - 66)) | (1 << (modelicaParser.T__75 - 66)) | (1 << (modelicaParser.T__81 - 66)) | (1 << (modelicaParser.T__82 - 66)) | (1 << (modelicaParser.T__83 - 66)) | (1 << (modelicaParser.T__85 - 66)) | (1 << (modelicaParser.T__86 - 66)) | (1 << (modelicaParser.IDENT - 66)) | (1 << (modelicaParser.STRING - 66)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 66)))) != 0):
                self.state = 331
                self.expression_list()


            self.state = 334
            self.match(modelicaParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ElementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ElementContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_list" ):
                listener.enterElement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_list" ):
                listener.exitElement_list(self)




    def element_list(self):

        localctx = modelicaParser.Element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__0) | (1 << modelicaParser.T__3) | (1 << modelicaParser.T__4) | (1 << modelicaParser.T__5) | (1 << modelicaParser.T__6) | (1 << modelicaParser.T__7) | (1 << modelicaParser.T__8) | (1 << modelicaParser.T__9) | (1 << modelicaParser.T__10) | (1 << modelicaParser.T__11) | (1 << modelicaParser.T__12) | (1 << modelicaParser.T__13) | (1 << modelicaParser.T__14) | (1 << modelicaParser.T__15) | (1 << modelicaParser.T__16) | (1 << modelicaParser.T__18) | (1 << modelicaParser.T__29) | (1 << modelicaParser.T__30) | (1 << modelicaParser.T__31) | (1 << modelicaParser.T__32) | (1 << modelicaParser.T__33) | (1 << modelicaParser.T__38) | (1 << modelicaParser.T__39) | (1 << modelicaParser.T__40) | (1 << modelicaParser.T__41) | (1 << modelicaParser.T__42) | (1 << modelicaParser.T__43) | (1 << modelicaParser.T__44))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 336
                self.element()
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_clause(self):
            return self.getTypedRuleContext(modelicaParser.Import_clauseContext,0)


        def extends_clause(self):
            return self.getTypedRuleContext(modelicaParser.Extends_clauseContext,0)


        def class_definition(self):
            return self.getTypedRuleContext(modelicaParser.Class_definitionContext,0)


        def component_clause(self):
            return self.getTypedRuleContext(modelicaParser.Component_clauseContext,0)


        def constraining_clause(self):
            return self.getTypedRuleContext(modelicaParser.Constraining_clauseContext,0)


        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)




    def element(self):

        localctx = modelicaParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__33]:
                self.state = 342
                self.import_clause()
                pass
            elif token in [modelicaParser.T__18]:
                self.state = 343
                self.extends_clause()
                pass
            elif token in [modelicaParser.T__0, modelicaParser.T__3, modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16, modelicaParser.T__29, modelicaParser.T__30, modelicaParser.T__31, modelicaParser.T__32, modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__29:
                    self.state = 344
                    self.match(modelicaParser.T__29)


                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__0:
                    self.state = 347
                    self.match(modelicaParser.T__0)


                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__30:
                    self.state = 350
                    self.match(modelicaParser.T__30)


                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__31:
                    self.state = 353
                    self.match(modelicaParser.T__31)


                self.state = 370
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__3, modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16, modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                    self.state = 358
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [modelicaParser.T__3, modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16]:
                        self.state = 356
                        self.class_definition()
                        pass
                    elif token in [modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                        self.state = 357
                        self.component_clause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [modelicaParser.T__32]:
                    self.state = 360
                    self.match(modelicaParser.T__32)
                    self.state = 363
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [modelicaParser.T__3, modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16]:
                        self.state = 361
                        self.class_definition()
                        pass
                    elif token in [modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                        self.state = 362
                        self.component_clause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 368
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==modelicaParser.T__37:
                        self.state = 365
                        self.constraining_clause()
                        self.state = 366
                        self.comment()


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 374
            self.match(modelicaParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def import_list(self):
            return self.getTypedRuleContext(modelicaParser.Import_listContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_import_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_clause" ):
                listener.enterImport_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_clause" ):
                listener.exitImport_clause(self)




    def import_clause(self):

        localctx = modelicaParser.Import_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_import_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(modelicaParser.T__33)
            self.state = 389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 377
                self.match(modelicaParser.IDENT)
                self.state = 378
                self.match(modelicaParser.T__19)
                self.state = 379
                self.name()
                pass

            elif la_ == 2:
                self.state = 380
                self.name()
                self.state = 381
                self.match(modelicaParser.T__34)
                pass

            elif la_ == 3:
                self.state = 383
                self.name()
                self.state = 384
                self.match(modelicaParser.T__35)
                self.state = 385
                self.import_list()
                self.state = 386
                self.match(modelicaParser.T__36)
                pass

            elif la_ == 4:
                self.state = 388
                self.name()
                pass


            self.state = 391
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_import_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_list" ):
                listener.enterImport_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_list" ):
                listener.exitImport_list(self)




    def import_list(self):

        localctx = modelicaParser.Import_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_import_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.match(modelicaParser.IDENT)
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 394
                self.match(modelicaParser.T__25)
                self.state = 395
                self.match(modelicaParser.IDENT)
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extends_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def class_modification(self):
            return self.getTypedRuleContext(modelicaParser.Class_modificationContext,0)


        def annotation(self):
            return self.getTypedRuleContext(modelicaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_extends_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtends_clause" ):
                listener.enterExtends_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtends_clause" ):
                listener.exitExtends_clause(self)




    def extends_clause(self):

        localctx = modelicaParser.Extends_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_extends_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(modelicaParser.T__18)
            self.state = 402
            self.name()
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__21:
                self.state = 403
                self.class_modification()


            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__87:
                self.state = 406
                self.annotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraining_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def class_modification(self):
            return self.getTypedRuleContext(modelicaParser.Class_modificationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_constraining_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraining_clause" ):
                listener.enterConstraining_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraining_clause" ):
                listener.exitConstraining_clause(self)




    def constraining_clause(self):

        localctx = modelicaParser.Constraining_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_constraining_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(modelicaParser.T__37)
            self.state = 410
            self.name()
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__21:
                self.state = 411
                self.class_modification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix(self):
            return self.getTypedRuleContext(modelicaParser.Type_prefixContext,0)


        def type_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Type_specifierContext,0)


        def component_list(self):
            return self.getTypedRuleContext(modelicaParser.Component_listContext,0)


        def array_subscripts(self):
            return self.getTypedRuleContext(modelicaParser.Array_subscriptsContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_component_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_clause" ):
                listener.enterComponent_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_clause" ):
                listener.exitComponent_clause(self)




    def component_clause(self):

        localctx = modelicaParser.Component_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_component_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.type_prefix()
            self.state = 415
            self.type_specifier()
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__83:
                self.state = 416
                self.array_subscripts()


            self.state = 419
            self.component_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_prefixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return modelicaParser.RULE_type_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_prefix" ):
                listener.enterType_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_prefix" ):
                listener.exitType_prefix(self)




    def type_prefix(self):

        localctx = modelicaParser.Type_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_type_prefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__38 or _la==modelicaParser.T__39:
                self.state = 421
                _la = self._input.LA(1)
                if not(_la==modelicaParser.T__38 or _la==modelicaParser.T__39):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__40) | (1 << modelicaParser.T__41) | (1 << modelicaParser.T__42))) != 0):
                self.state = 424
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__40) | (1 << modelicaParser.T__41) | (1 << modelicaParser.T__42))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__43 or _la==modelicaParser.T__44:
                self.state = 427
                _la = self._input.LA(1)
                if not(_la==modelicaParser.T__43 or _la==modelicaParser.T__44):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_type_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_specifier" ):
                listener.enterType_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_specifier" ):
                listener.exitType_specifier(self)




    def type_specifier(self):

        localctx = modelicaParser.Type_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_type_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Component_declarationContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Component_declarationContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_component_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_list" ):
                listener.enterComponent_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_list" ):
                listener.exitComponent_list(self)




    def component_list(self):

        localctx = modelicaParser.Component_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_component_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.component_declaration()
            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 433
                self.match(modelicaParser.T__25)
                self.state = 434
                self.component_declaration()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(modelicaParser.DeclarationContext,0)


        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def condition_attribute(self):
            return self.getTypedRuleContext(modelicaParser.Condition_attributeContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_component_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_declaration" ):
                listener.enterComponent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_declaration" ):
                listener.exitComponent_declaration(self)




    def component_declaration(self):

        localctx = modelicaParser.Component_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_component_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.declaration()
            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__45:
                self.state = 441
                self.condition_attribute()


            self.state = 444
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_condition_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_attribute" ):
                listener.enterCondition_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_attribute" ):
                listener.exitCondition_attribute(self)




    def condition_attribute(self):

        localctx = modelicaParser.Condition_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_condition_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(modelicaParser.T__45)
            self.state = 447
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def array_subscripts(self):
            return self.getTypedRuleContext(modelicaParser.Array_subscriptsContext,0)


        def modification(self):
            return self.getTypedRuleContext(modelicaParser.ModificationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = modelicaParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(modelicaParser.IDENT)
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__83:
                self.state = 450
                self.array_subscripts()


            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__19) | (1 << modelicaParser.T__21) | (1 << modelicaParser.T__46))) != 0):
                self.state = 453
                self.modification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_modification(self):
            return self.getTypedRuleContext(modelicaParser.Class_modificationContext,0)


        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModification" ):
                listener.enterModification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModification" ):
                listener.exitModification(self)




    def modification(self):

        localctx = modelicaParser.ModificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_modification)
        self._la = 0 # Token type
        try:
            self.state = 465
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 456
                self.class_modification()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__19:
                    self.state = 457
                    self.match(modelicaParser.T__19)
                    self.state = 458
                    self.expression()


                pass
            elif token in [modelicaParser.T__19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 461
                self.match(modelicaParser.T__19)
                self.state = 462
                self.expression()
                pass
            elif token in [modelicaParser.T__46]:
                self.enterOuterAlt(localctx, 3)
                self.state = 463
                self.match(modelicaParser.T__46)
                self.state = 464
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_modificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_list(self):
            return self.getTypedRuleContext(modelicaParser.Argument_listContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_class_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_modification" ):
                listener.enterClass_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_modification" ):
                listener.exitClass_modification(self)




    def class_modification(self):

        localctx = modelicaParser.Class_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_class_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(modelicaParser.T__21)
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__0) | (1 << modelicaParser.T__29) | (1 << modelicaParser.T__32) | (1 << modelicaParser.T__47))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 468
                self.argument_list()


            self.state = 471
            self.match(modelicaParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ArgumentContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = modelicaParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.argument()
            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 474
                self.match(modelicaParser.T__25)
                self.state = 475
                self.argument()
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_modification_or_replaceable(self):
            return self.getTypedRuleContext(modelicaParser.Element_modification_or_replaceableContext,0)


        def element_redeclaration(self):
            return self.getTypedRuleContext(modelicaParser.Element_redeclarationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = modelicaParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_argument)
        try:
            self.state = 483
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__0, modelicaParser.T__32, modelicaParser.T__47, modelicaParser.T__86, modelicaParser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 481
                self.element_modification_or_replaceable()
                pass
            elif token in [modelicaParser.T__29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 482
                self.element_redeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_modification_or_replaceableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_modification(self):
            return self.getTypedRuleContext(modelicaParser.Element_modificationContext,0)


        def element_replaceable(self):
            return self.getTypedRuleContext(modelicaParser.Element_replaceableContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_element_modification_or_replaceable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_modification_or_replaceable" ):
                listener.enterElement_modification_or_replaceable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_modification_or_replaceable" ):
                listener.exitElement_modification_or_replaceable(self)




    def element_modification_or_replaceable(self):

        localctx = modelicaParser.Element_modification_or_replaceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_element_modification_or_replaceable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__47:
                self.state = 485
                self.match(modelicaParser.T__47)


            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__0:
                self.state = 488
                self.match(modelicaParser.T__0)


            self.state = 493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__86, modelicaParser.IDENT]:
                self.state = 491
                self.element_modification()
                pass
            elif token in [modelicaParser.T__32]:
                self.state = 492
                self.element_replaceable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_modificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def string_comment(self):
            return self.getTypedRuleContext(modelicaParser.String_commentContext,0)


        def modification(self):
            return self.getTypedRuleContext(modelicaParser.ModificationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_element_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_modification" ):
                listener.enterElement_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_modification" ):
                listener.exitElement_modification(self)




    def element_modification(self):

        localctx = modelicaParser.Element_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_element_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.name()
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__19) | (1 << modelicaParser.T__21) | (1 << modelicaParser.T__46))) != 0):
                self.state = 496
                self.modification()


            self.state = 499
            self.string_comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_redeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_replaceable(self):
            return self.getTypedRuleContext(modelicaParser.Element_replaceableContext,0)


        def short_class_definition(self):
            return self.getTypedRuleContext(modelicaParser.Short_class_definitionContext,0)


        def component_clause1(self):
            return self.getTypedRuleContext(modelicaParser.Component_clause1Context,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_element_redeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_redeclaration" ):
                listener.enterElement_redeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_redeclaration" ):
                listener.exitElement_redeclaration(self)




    def element_redeclaration(self):

        localctx = modelicaParser.Element_redeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_element_redeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(modelicaParser.T__29)
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__47:
                self.state = 502
                self.match(modelicaParser.T__47)


            self.state = 506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__0:
                self.state = 505
                self.match(modelicaParser.T__0)


            self.state = 513
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16, modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                self.state = 510
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16]:
                    self.state = 508
                    self.short_class_definition()
                    pass
                elif token in [modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                    self.state = 509
                    self.component_clause1()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [modelicaParser.T__32]:
                self.state = 512
                self.element_replaceable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_replaceableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def short_class_definition(self):
            return self.getTypedRuleContext(modelicaParser.Short_class_definitionContext,0)


        def component_clause1(self):
            return self.getTypedRuleContext(modelicaParser.Component_clause1Context,0)


        def constraining_clause(self):
            return self.getTypedRuleContext(modelicaParser.Constraining_clauseContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_element_replaceable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_replaceable" ):
                listener.enterElement_replaceable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_replaceable" ):
                listener.exitElement_replaceable(self)




    def element_replaceable(self):

        localctx = modelicaParser.Element_replaceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_element_replaceable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(modelicaParser.T__32)
            self.state = 518
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16]:
                self.state = 516
                self.short_class_definition()
                pass
            elif token in [modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                self.state = 517
                self.component_clause1()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__37:
                self.state = 520
                self.constraining_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_clause1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix(self):
            return self.getTypedRuleContext(modelicaParser.Type_prefixContext,0)


        def type_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Type_specifierContext,0)


        def component_declaration1(self):
            return self.getTypedRuleContext(modelicaParser.Component_declaration1Context,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_component_clause1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_clause1" ):
                listener.enterComponent_clause1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_clause1" ):
                listener.exitComponent_clause1(self)




    def component_clause1(self):

        localctx = modelicaParser.Component_clause1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_component_clause1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.type_prefix()
            self.state = 524
            self.type_specifier()
            self.state = 525
            self.component_declaration1()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_declaration1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(modelicaParser.DeclarationContext,0)


        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_component_declaration1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_declaration1" ):
                listener.enterComponent_declaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_declaration1" ):
                listener.exitComponent_declaration1(self)




    def component_declaration1(self):

        localctx = modelicaParser.Component_declaration1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_component_declaration1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.declaration()
            self.state = 528
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Short_class_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_prefixes(self):
            return self.getTypedRuleContext(modelicaParser.Class_prefixesContext,0)


        def short_class_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Short_class_specifierContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_short_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShort_class_definition" ):
                listener.enterShort_class_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShort_class_definition" ):
                listener.exitShort_class_definition(self)




    def short_class_definition(self):

        localctx = modelicaParser.Short_class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_short_class_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.class_prefixes()
            self.state = 531
            self.short_class_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equation_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(modelicaParser.EquationContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_equation_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation_section" ):
                listener.enterEquation_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation_section" ):
                listener.exitEquation_section(self)




    def equation_section(self):

        localctx = modelicaParser.Equation_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_equation_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__48:
                self.state = 533
                self.match(modelicaParser.T__48)


            self.state = 536
            self.match(modelicaParser.T__49)
            self.state = 540
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 537
                    self.equation() 
                self.state = 542
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Algorithm_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_algorithm_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlgorithm_section" ):
                listener.enterAlgorithm_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlgorithm_section" ):
                listener.exitAlgorithm_section(self)




    def algorithm_section(self):

        localctx = modelicaParser.Algorithm_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_algorithm_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__48:
                self.state = 543
                self.match(modelicaParser.T__48)


            self.state = 546
            self.match(modelicaParser.T__50)
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 547
                self.statement()
                self.state = 548
                self.match(modelicaParser.T__1)
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EquationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def simple_expression(self):
            return self.getTypedRuleContext(modelicaParser.Simple_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def if_equation(self):
            return self.getTypedRuleContext(modelicaParser.If_equationContext,0)


        def for_equation(self):
            return self.getTypedRuleContext(modelicaParser.For_equationContext,0)


        def connect_clause(self):
            return self.getTypedRuleContext(modelicaParser.Connect_clauseContext,0)


        def when_equation(self):
            return self.getTypedRuleContext(modelicaParser.When_equationContext,0)


        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def function_call_args(self):
            return self.getTypedRuleContext(modelicaParser.Function_call_argsContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation" ):
                listener.enterEquation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation" ):
                listener.exitEquation(self)




    def equation(self):

        localctx = modelicaParser.EquationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 555
                self.simple_expression()
                self.state = 556
                self.match(modelicaParser.T__19)
                self.state = 557
                self.expression()
                pass

            elif la_ == 2:
                self.state = 559
                self.if_equation()
                pass

            elif la_ == 3:
                self.state = 560
                self.for_equation()
                pass

            elif la_ == 4:
                self.state = 561
                self.connect_clause()
                pass

            elif la_ == 5:
                self.state = 562
                self.when_equation()
                pass

            elif la_ == 6:
                self.state = 563
                self.name()
                self.state = 564
                self.function_call_args()
                pass


            self.state = 568
            self.comment()
            self.state = 569
            self.match(modelicaParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def component_reference(self):
            return self.getTypedRuleContext(modelicaParser.Component_referenceContext,0)


        def output_expression_list(self):
            return self.getTypedRuleContext(modelicaParser.Output_expression_listContext,0)


        def function_call_args(self):
            return self.getTypedRuleContext(modelicaParser.Function_call_argsContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(modelicaParser.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(modelicaParser.For_statementContext,0)


        def while_statement(self):
            return self.getTypedRuleContext(modelicaParser.While_statementContext,0)


        def when_statement(self):
            return self.getTypedRuleContext(modelicaParser.When_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = modelicaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__86, modelicaParser.IDENT]:
                self.state = 571
                self.component_reference()
                self.state = 575
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__46]:
                    self.state = 572
                    self.match(modelicaParser.T__46)
                    self.state = 573
                    self.expression()
                    pass
                elif token in [modelicaParser.T__21]:
                    self.state = 574
                    self.function_call_args()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [modelicaParser.T__21]:
                self.state = 577
                self.match(modelicaParser.T__21)
                self.state = 578
                self.output_expression_list()
                self.state = 579
                self.match(modelicaParser.T__23)
                self.state = 580
                self.match(modelicaParser.T__46)
                self.state = 581
                self.component_reference()
                self.state = 582
                self.function_call_args()
                pass
            elif token in [modelicaParser.T__51]:
                self.state = 584
                self.match(modelicaParser.T__51)
                pass
            elif token in [modelicaParser.T__52]:
                self.state = 585
                self.match(modelicaParser.T__52)
                pass
            elif token in [modelicaParser.T__45]:
                self.state = 586
                self.if_statement()
                pass
            elif token in [modelicaParser.T__56]:
                self.state = 587
                self.for_statement()
                pass
            elif token in [modelicaParser.T__59]:
                self.state = 588
                self.while_statement()
                pass
            elif token in [modelicaParser.T__60]:
                self.state = 589
                self.when_statement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 592
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_equationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(modelicaParser.EquationContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_if_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_equation" ):
                listener.enterIf_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_equation" ):
                listener.exitIf_equation(self)




    def if_equation(self):

        localctx = modelicaParser.If_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_if_equation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(modelicaParser.T__45)
            self.state = 595
            self.expression()
            self.state = 596
            self.match(modelicaParser.T__53)
            self.state = 602
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 597
                    self.equation()
                    self.state = 598
                    self.match(modelicaParser.T__1) 
                self.state = 604
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__54:
                self.state = 605
                self.match(modelicaParser.T__54)
                self.state = 606
                self.expression()
                self.state = 607
                self.match(modelicaParser.T__53)
                self.state = 613
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 608
                        self.equation()
                        self.state = 609
                        self.match(modelicaParser.T__1) 
                    self.state = 615
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__55:
                self.state = 621
                self.match(modelicaParser.T__55)
                self.state = 627
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 622
                        self.equation()
                        self.state = 623
                        self.match(modelicaParser.T__1) 
                    self.state = 629
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,78,self._ctx)



            self.state = 632
            self.match(modelicaParser.T__17)
            self.state = 633
            self.match(modelicaParser.T__45)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = modelicaParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.match(modelicaParser.T__45)
            self.state = 636
            self.expression()
            self.state = 637
            self.match(modelicaParser.T__53)
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 638
                self.statement()
                self.state = 639
                self.match(modelicaParser.T__1)
                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__54:
                self.state = 646
                self.match(modelicaParser.T__54)
                self.state = 647
                self.expression()
                self.state = 648
                self.match(modelicaParser.T__53)
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                    self.state = 649
                    self.statement()
                    self.state = 650
                    self.match(modelicaParser.T__1)
                    self.state = 656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__55:
                self.state = 662
                self.match(modelicaParser.T__55)
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                    self.state = 663
                    self.statement()
                    self.state = 664
                    self.match(modelicaParser.T__1)
                    self.state = 670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 673
            self.match(modelicaParser.T__17)
            self.state = 674
            self.match(modelicaParser.T__45)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_equationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_indices(self):
            return self.getTypedRuleContext(modelicaParser.For_indicesContext,0)


        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(modelicaParser.EquationContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_for_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_equation" ):
                listener.enterFor_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_equation" ):
                listener.exitFor_equation(self)




    def for_equation(self):

        localctx = modelicaParser.For_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_for_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(modelicaParser.T__56)
            self.state = 677
            self.for_indices()
            self.state = 678
            self.match(modelicaParser.T__57)
            self.state = 684
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 679
                    self.equation()
                    self.state = 680
                    self.match(modelicaParser.T__1) 
                self.state = 686
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

            self.state = 687
            self.match(modelicaParser.T__17)
            self.state = 688
            self.match(modelicaParser.T__56)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_indices(self):
            return self.getTypedRuleContext(modelicaParser.For_indicesContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_statement" ):
                listener.enterFor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_statement" ):
                listener.exitFor_statement(self)




    def for_statement(self):

        localctx = modelicaParser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(modelicaParser.T__56)
            self.state = 691
            self.for_indices()
            self.state = 692
            self.match(modelicaParser.T__57)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 693
                self.statement()
                self.state = 694
                self.match(modelicaParser.T__1)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 701
            self.match(modelicaParser.T__17)
            self.state = 702
            self.match(modelicaParser.T__56)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_indicesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.For_indexContext)
            else:
                return self.getTypedRuleContext(modelicaParser.For_indexContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_for_indices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_indices" ):
                listener.enterFor_indices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_indices" ):
                listener.exitFor_indices(self)




    def for_indices(self):

        localctx = modelicaParser.For_indicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_for_indices)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.for_index()
            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 705
                self.match(modelicaParser.T__25)
                self.state = 706
                self.for_index()
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_for_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_index" ):
                listener.enterFor_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_index" ):
                listener.exitFor_index(self)




    def for_index(self):

        localctx = modelicaParser.For_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_for_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(modelicaParser.IDENT)
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__58:
                self.state = 713
                self.match(modelicaParser.T__58)
                self.state = 714
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = modelicaParser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_while_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(modelicaParser.T__59)
            self.state = 718
            self.expression()
            self.state = 719
            self.match(modelicaParser.T__57)
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 720
                self.statement()
                self.state = 721
                self.match(modelicaParser.T__1)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 728
            self.match(modelicaParser.T__17)
            self.state = 729
            self.match(modelicaParser.T__59)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_equationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(modelicaParser.EquationContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_when_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_equation" ):
                listener.enterWhen_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_equation" ):
                listener.exitWhen_equation(self)




    def when_equation(self):

        localctx = modelicaParser.When_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_when_equation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(modelicaParser.T__60)
            self.state = 732
            self.expression()
            self.state = 733
            self.match(modelicaParser.T__53)
            self.state = 739
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 734
                    self.equation()
                    self.state = 735
                    self.match(modelicaParser.T__1) 
                self.state = 741
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__61:
                self.state = 742
                self.match(modelicaParser.T__61)
                self.state = 743
                self.expression()
                self.state = 744
                self.match(modelicaParser.T__53)
                self.state = 750
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 745
                        self.equation()
                        self.state = 746
                        self.match(modelicaParser.T__1) 
                    self.state = 752
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 758
            self.match(modelicaParser.T__17)
            self.state = 759
            self.match(modelicaParser.T__60)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_when_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_statement" ):
                listener.enterWhen_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_statement" ):
                listener.exitWhen_statement(self)




    def when_statement(self):

        localctx = modelicaParser.When_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_when_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(modelicaParser.T__60)
            self.state = 762
            self.expression()
            self.state = 763
            self.match(modelicaParser.T__53)
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 764
                self.statement()
                self.state = 765
                self.match(modelicaParser.T__1)
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__61:
                self.state = 772
                self.match(modelicaParser.T__61)
                self.state = 773
                self.expression()
                self.state = 774
                self.match(modelicaParser.T__53)
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                    self.state = 775
                    self.statement()
                    self.state = 776
                    self.match(modelicaParser.T__1)
                    self.state = 782
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 788
            self.match(modelicaParser.T__17)
            self.state = 789
            self.match(modelicaParser.T__60)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Connect_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Component_referenceContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Component_referenceContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_connect_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnect_clause" ):
                listener.enterConnect_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnect_clause" ):
                listener.exitConnect_clause(self)




    def connect_clause(self):

        localctx = modelicaParser.Connect_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_connect_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(modelicaParser.T__62)
            self.state = 792
            self.match(modelicaParser.T__21)
            self.state = 793
            self.component_reference()
            self.state = 794
            self.match(modelicaParser.T__25)
            self.state = 795
            self.component_reference()
            self.state = 796
            self.match(modelicaParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expression(self):
            return self.getTypedRuleContext(modelicaParser.Simple_expressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = modelicaParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.state = 816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__17, modelicaParser.T__21, modelicaParser.T__24, modelicaParser.T__48, modelicaParser.T__65, modelicaParser.T__72, modelicaParser.T__73, modelicaParser.T__74, modelicaParser.T__75, modelicaParser.T__81, modelicaParser.T__82, modelicaParser.T__83, modelicaParser.T__85, modelicaParser.T__86, modelicaParser.IDENT, modelicaParser.STRING, modelicaParser.UNSIGNED_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 798
                self.simple_expression()
                pass
            elif token in [modelicaParser.T__45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 799
                self.match(modelicaParser.T__45)
                self.state = 800
                self.expression()
                self.state = 801
                self.match(modelicaParser.T__53)
                self.state = 802
                self.expression()
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==modelicaParser.T__54:
                    self.state = 803
                    self.match(modelicaParser.T__54)
                    self.state = 804
                    self.expression()
                    self.state = 805
                    self.match(modelicaParser.T__53)
                    self.state = 806
                    self.expression()
                    self.state = 812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 813
                self.match(modelicaParser.T__55)
                self.state = 814
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Logical_expressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Logical_expressionContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_simple_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_expression" ):
                listener.enterSimple_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_expression" ):
                listener.exitSimple_expression(self)




    def simple_expression(self):

        localctx = modelicaParser.Simple_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_simple_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.logical_expression()
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__22:
                self.state = 819
                self.match(modelicaParser.T__22)
                self.state = 820
                self.logical_expression()
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__22:
                    self.state = 821
                    self.match(modelicaParser.T__22)
                    self.state = 822
                    self.logical_expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Logical_termContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Logical_termContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_logical_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_expression" ):
                listener.enterLogical_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_expression" ):
                listener.exitLogical_expression(self)




    def logical_expression(self):

        localctx = modelicaParser.Logical_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_logical_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.logical_term()
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__63:
                self.state = 828
                self.match(modelicaParser.T__63)
                self.state = 829
                self.logical_term()
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Logical_factorContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Logical_factorContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_logical_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_term" ):
                listener.enterLogical_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_term" ):
                listener.exitLogical_term(self)




    def logical_term(self):

        localctx = modelicaParser.Logical_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_logical_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.logical_factor()
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__64:
                self.state = 836
                self.match(modelicaParser.T__64)
                self.state = 837
                self.logical_factor()
                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self):
            return self.getTypedRuleContext(modelicaParser.RelationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_logical_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_factor" ):
                listener.enterLogical_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_factor" ):
                listener.exitLogical_factor(self)




    def logical_factor(self):

        localctx = modelicaParser.Logical_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_logical_factor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__65:
                self.state = 843
                self.match(modelicaParser.T__65)


            self.state = 846
            self.relation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmetic_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Arithmetic_expressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Arithmetic_expressionContext,i)


        def rel_op(self):
            return self.getTypedRuleContext(modelicaParser.Rel_opContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)




    def relation(self):

        localctx = modelicaParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.arithmetic_expression()
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (modelicaParser.T__66 - 67)) | (1 << (modelicaParser.T__67 - 67)) | (1 << (modelicaParser.T__68 - 67)) | (1 << (modelicaParser.T__69 - 67)) | (1 << (modelicaParser.T__70 - 67)) | (1 << (modelicaParser.T__71 - 67)))) != 0):
                self.state = 849
                self.rel_op()
                self.state = 850
                self.arithmetic_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rel_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return modelicaParser.RULE_rel_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel_op" ):
                listener.enterRel_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel_op" ):
                listener.exitRel_op(self)




    def rel_op(self):

        localctx = modelicaParser.Rel_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_rel_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (modelicaParser.T__66 - 67)) | (1 << (modelicaParser.T__67 - 67)) | (1 << (modelicaParser.T__68 - 67)) | (1 << (modelicaParser.T__69 - 67)) | (1 << (modelicaParser.T__70 - 67)) | (1 << (modelicaParser.T__71 - 67)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmetic_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.TermContext)
            else:
                return self.getTypedRuleContext(modelicaParser.TermContext,i)


        def add_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Add_opContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Add_opContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_arithmetic_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic_expression" ):
                listener.enterArithmetic_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic_expression" ):
                listener.exitArithmetic_expression(self)




    def arithmetic_expression(self):

        localctx = modelicaParser.Arithmetic_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_arithmetic_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (modelicaParser.T__72 - 73)) | (1 << (modelicaParser.T__73 - 73)) | (1 << (modelicaParser.T__74 - 73)) | (1 << (modelicaParser.T__75 - 73)))) != 0):
                self.state = 856
                self.add_op()


            self.state = 859
            self.term()
            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (modelicaParser.T__72 - 73)) | (1 << (modelicaParser.T__73 - 73)) | (1 << (modelicaParser.T__74 - 73)) | (1 << (modelicaParser.T__75 - 73)))) != 0):
                self.state = 860
                self.add_op()
                self.state = 861
                self.term()
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return modelicaParser.RULE_add_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_op" ):
                listener.enterAdd_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_op" ):
                listener.exitAdd_op(self)




    def add_op(self):

        localctx = modelicaParser.Add_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_add_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (modelicaParser.T__72 - 73)) | (1 << (modelicaParser.T__73 - 73)) | (1 << (modelicaParser.T__74 - 73)) | (1 << (modelicaParser.T__75 - 73)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.FactorContext)
            else:
                return self.getTypedRuleContext(modelicaParser.FactorContext,i)


        def mul_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Mul_opContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Mul_opContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = modelicaParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.factor()
            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (modelicaParser.T__34 - 35)) | (1 << (modelicaParser.T__76 - 35)) | (1 << (modelicaParser.T__77 - 35)) | (1 << (modelicaParser.T__78 - 35)))) != 0):
                self.state = 871
                self.mul_op()
                self.state = 872
                self.factor()
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mul_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return modelicaParser.RULE_mul_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMul_op" ):
                listener.enterMul_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMul_op" ):
                listener.exitMul_op(self)




    def mul_op(self):

        localctx = modelicaParser.Mul_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_mul_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            _la = self._input.LA(1)
            if not(((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (modelicaParser.T__34 - 35)) | (1 << (modelicaParser.T__76 - 35)) | (1 << (modelicaParser.T__77 - 35)) | (1 << (modelicaParser.T__78 - 35)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.PrimaryContext)
            else:
                return self.getTypedRuleContext(modelicaParser.PrimaryContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = modelicaParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.primary()
            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__79 or _la==modelicaParser.T__80:
                self.state = 882
                _la = self._input.LA(1)
                if not(_la==modelicaParser.T__79 or _la==modelicaParser.T__80):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 883
                self.primary()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_NUMBER(self):
            return self.getToken(modelicaParser.UNSIGNED_NUMBER, 0)

        def STRING(self):
            return self.getToken(modelicaParser.STRING, 0)

        def function_call_args(self):
            return self.getTypedRuleContext(modelicaParser.Function_call_argsContext,0)


        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def component_reference(self):
            return self.getTypedRuleContext(modelicaParser.Component_referenceContext,0)


        def output_expression_list(self):
            return self.getTypedRuleContext(modelicaParser.Output_expression_listContext,0)


        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Expression_listContext,i)


        def function_arguments(self):
            return self.getTypedRuleContext(modelicaParser.Function_argumentsContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = modelicaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 886
                self.match(modelicaParser.UNSIGNED_NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 887
                self.match(modelicaParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 888
                self.match(modelicaParser.T__81)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 889
                self.match(modelicaParser.T__82)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 893
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__86, modelicaParser.IDENT]:
                    self.state = 890
                    self.name()
                    pass
                elif token in [modelicaParser.T__24]:
                    self.state = 891
                    self.match(modelicaParser.T__24)
                    pass
                elif token in [modelicaParser.T__48]:
                    self.state = 892
                    self.match(modelicaParser.T__48)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 895
                self.function_call_args()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 896
                self.component_reference()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 897
                self.match(modelicaParser.T__21)
                self.state = 898
                self.output_expression_list()
                self.state = 899
                self.match(modelicaParser.T__23)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 901
                self.match(modelicaParser.T__83)
                self.state = 902
                self.expression_list()
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==modelicaParser.T__1:
                    self.state = 903
                    self.match(modelicaParser.T__1)
                    self.state = 904
                    self.expression_list()
                    self.state = 909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 910
                self.match(modelicaParser.T__84)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 912
                self.match(modelicaParser.T__85)
                self.state = 913
                self.function_arguments()
                self.state = 914
                self.match(modelicaParser.T__36)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 916
                self.match(modelicaParser.T__17)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = modelicaParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__86:
                self.state = 919
                self.match(modelicaParser.T__86)


            self.state = 922
            self.match(modelicaParser.IDENT)
            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__86:
                self.state = 923
                self.match(modelicaParser.T__86)
                self.state = 924
                self.match(modelicaParser.IDENT)
                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def array_subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Array_subscriptsContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Array_subscriptsContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_component_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_reference" ):
                listener.enterComponent_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_reference" ):
                listener.exitComponent_reference(self)




    def component_reference(self):

        localctx = modelicaParser.Component_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_component_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__86:
                self.state = 930
                self.match(modelicaParser.T__86)


            self.state = 933
            self.match(modelicaParser.IDENT)
            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__83:
                self.state = 934
                self.array_subscripts()


            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__86:
                self.state = 937
                self.match(modelicaParser.T__86)
                self.state = 938
                self.match(modelicaParser.IDENT)
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__83:
                    self.state = 939
                    self.array_subscripts()


                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_argsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_arguments(self):
            return self.getTypedRuleContext(modelicaParser.Function_argumentsContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_function_call_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_args" ):
                listener.enterFunction_call_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_args" ):
                listener.exitFunction_call_args(self)




    def function_call_args(self):

        localctx = modelicaParser.Function_call_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_function_call_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.match(modelicaParser.T__21)
            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__16) | (1 << modelicaParser.T__17) | (1 << modelicaParser.T__21) | (1 << modelicaParser.T__24) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__48))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (modelicaParser.T__65 - 66)) | (1 << (modelicaParser.T__72 - 66)) | (1 << (modelicaParser.T__73 - 66)) | (1 << (modelicaParser.T__74 - 66)) | (1 << (modelicaParser.T__75 - 66)) | (1 << (modelicaParser.T__81 - 66)) | (1 << (modelicaParser.T__82 - 66)) | (1 << (modelicaParser.T__83 - 66)) | (1 << (modelicaParser.T__85 - 66)) | (1 << (modelicaParser.T__86 - 66)) | (1 << (modelicaParser.IDENT - 66)) | (1 << (modelicaParser.STRING - 66)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 66)))) != 0):
                self.state = 948
                self.function_arguments()


            self.state = 951
            self.match(modelicaParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_argument(self):
            return self.getTypedRuleContext(modelicaParser.Function_argumentContext,0)


        def function_arguments(self):
            return self.getTypedRuleContext(modelicaParser.Function_argumentsContext,0)


        def for_indices(self):
            return self.getTypedRuleContext(modelicaParser.For_indicesContext,0)


        def named_arguments(self):
            return self.getTypedRuleContext(modelicaParser.Named_argumentsContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_function_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_arguments" ):
                listener.enterFunction_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_arguments" ):
                listener.exitFunction_arguments(self)




    def function_arguments(self):

        localctx = modelicaParser.Function_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_function_arguments)
        try:
            self.state = 961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 953
                self.function_argument()
                self.state = 958
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__25]:
                    self.state = 954
                    self.match(modelicaParser.T__25)
                    self.state = 955
                    self.function_arguments()
                    pass
                elif token in [modelicaParser.T__56]:
                    self.state = 956
                    self.match(modelicaParser.T__56)
                    self.state = 957
                    self.for_indices()
                    pass
                elif token in [modelicaParser.T__23, modelicaParser.T__36]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 960
                self.named_arguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_argument(self):
            return self.getTypedRuleContext(modelicaParser.Named_argumentContext,0)


        def named_arguments(self):
            return self.getTypedRuleContext(modelicaParser.Named_argumentsContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_named_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_arguments" ):
                listener.enterNamed_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_arguments" ):
                listener.exitNamed_arguments(self)




    def named_arguments(self):

        localctx = modelicaParser.Named_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_named_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.named_argument()
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__25:
                self.state = 964
                self.match(modelicaParser.T__25)
                self.state = 965
                self.named_arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def function_argument(self):
            return self.getTypedRuleContext(modelicaParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_named_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_argument" ):
                listener.enterNamed_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_argument" ):
                listener.exitNamed_argument(self)




    def named_argument(self):

        localctx = modelicaParser.Named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_named_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(modelicaParser.IDENT)
            self.state = 969
            self.match(modelicaParser.T__19)
            self.state = 970
            self.function_argument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def named_arguments(self):
            return self.getTypedRuleContext(modelicaParser.Named_argumentsContext,0)


        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_function_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument" ):
                listener.enterFunction_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument" ):
                listener.exitFunction_argument(self)




    def function_argument(self):

        localctx = modelicaParser.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_function_argument)
        self._la = 0 # Token type
        try:
            self.state = 981
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 972
                self.match(modelicaParser.T__16)
                self.state = 973
                self.name()
                self.state = 974
                self.match(modelicaParser.T__21)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.IDENT:
                    self.state = 975
                    self.named_arguments()


                self.state = 978
                self.match(modelicaParser.T__23)
                pass
            elif token in [modelicaParser.T__17, modelicaParser.T__21, modelicaParser.T__24, modelicaParser.T__45, modelicaParser.T__48, modelicaParser.T__65, modelicaParser.T__72, modelicaParser.T__73, modelicaParser.T__74, modelicaParser.T__75, modelicaParser.T__81, modelicaParser.T__82, modelicaParser.T__83, modelicaParser.T__85, modelicaParser.T__86, modelicaParser.IDENT, modelicaParser.STRING, modelicaParser.UNSIGNED_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 980
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_output_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_expression_list" ):
                listener.enterOutput_expression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_expression_list" ):
                listener.exitOutput_expression_list(self)




    def output_expression_list(self):

        localctx = modelicaParser.Output_expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_output_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__17) | (1 << modelicaParser.T__21) | (1 << modelicaParser.T__24) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__48))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (modelicaParser.T__65 - 66)) | (1 << (modelicaParser.T__72 - 66)) | (1 << (modelicaParser.T__73 - 66)) | (1 << (modelicaParser.T__74 - 66)) | (1 << (modelicaParser.T__75 - 66)) | (1 << (modelicaParser.T__81 - 66)) | (1 << (modelicaParser.T__82 - 66)) | (1 << (modelicaParser.T__83 - 66)) | (1 << (modelicaParser.T__85 - 66)) | (1 << (modelicaParser.T__86 - 66)) | (1 << (modelicaParser.IDENT - 66)) | (1 << (modelicaParser.STRING - 66)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 66)))) != 0):
                self.state = 983
                self.expression()


            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 986
                self.match(modelicaParser.T__25)
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__17) | (1 << modelicaParser.T__21) | (1 << modelicaParser.T__24) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__48))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (modelicaParser.T__65 - 66)) | (1 << (modelicaParser.T__72 - 66)) | (1 << (modelicaParser.T__73 - 66)) | (1 << (modelicaParser.T__74 - 66)) | (1 << (modelicaParser.T__75 - 66)) | (1 << (modelicaParser.T__81 - 66)) | (1 << (modelicaParser.T__82 - 66)) | (1 << (modelicaParser.T__83 - 66)) | (1 << (modelicaParser.T__85 - 66)) | (1 << (modelicaParser.T__86 - 66)) | (1 << (modelicaParser.IDENT - 66)) | (1 << (modelicaParser.STRING - 66)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 66)))) != 0):
                    self.state = 987
                    self.expression()


                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = modelicaParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.expression()
            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 996
                self.match(modelicaParser.T__25)
                self.state = 997
                self.expression()
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_subscriptsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(modelicaParser.SubscriptContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_array_subscripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_subscripts" ):
                listener.enterArray_subscripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_subscripts" ):
                listener.exitArray_subscripts(self)




    def array_subscripts(self):

        localctx = modelicaParser.Array_subscriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_array_subscripts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.match(modelicaParser.T__83)
            self.state = 1004
            self.subscript()
            self.state = 1009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 1005
                self.match(modelicaParser.T__25)
                self.state = 1006
                self.subscript()
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1012
            self.match(modelicaParser.T__84)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)




    def subscript(self):

        localctx = modelicaParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_subscript)
        try:
            self.state = 1016
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1014
                self.match(modelicaParser.T__22)
                pass
            elif token in [modelicaParser.T__17, modelicaParser.T__21, modelicaParser.T__24, modelicaParser.T__45, modelicaParser.T__48, modelicaParser.T__65, modelicaParser.T__72, modelicaParser.T__73, modelicaParser.T__74, modelicaParser.T__75, modelicaParser.T__81, modelicaParser.T__82, modelicaParser.T__83, modelicaParser.T__85, modelicaParser.T__86, modelicaParser.IDENT, modelicaParser.STRING, modelicaParser.UNSIGNED_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_comment(self):
            return self.getTypedRuleContext(modelicaParser.String_commentContext,0)


        def annotation(self):
            return self.getTypedRuleContext(modelicaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)




    def comment(self):

        localctx = modelicaParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.string_comment()
            self.state = 1020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__87:
                self.state = 1019
                self.annotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_commentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(modelicaParser.STRING)
            else:
                return self.getToken(modelicaParser.STRING, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_string_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_comment" ):
                listener.enterString_comment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_comment" ):
                listener.exitString_comment(self)




    def string_comment(self):

        localctx = modelicaParser.String_commentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_string_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.STRING:
                self.state = 1022
                self.match(modelicaParser.STRING)
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==modelicaParser.T__72:
                    self.state = 1023
                    self.match(modelicaParser.T__72)
                    self.state = 1024
                    self.match(modelicaParser.STRING)
                    self.state = 1029
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_modification(self):
            return self.getTypedRuleContext(modelicaParser.Class_modificationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = modelicaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(modelicaParser.T__87)
            self.state = 1033
            self.class_modification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





