# Generated from /var/antlrResult/modelica.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3`")
        buf.write("\u040b\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\3\2\3\2\5\2\u00a1\n\2\3\2\7\2\u00a4\n\2")
        buf.write("\f\2\16\2\u00a7\13\2\3\2\5\2\u00aa\n\2\3\2\3\2\3\2\7\2")
        buf.write("\u00af\n\2\f\2\16\2\u00b2\13\2\3\3\5\3\u00b5\n\3\3\3\3")
        buf.write("\3\3\3\3\4\3\4\3\4\5\4\u00bd\n\4\3\5\5\5\u00c0\n\5\3\5")
        buf.write("\3\5\3\5\5\5\u00c5\n\5\3\5\3\5\3\5\5\5\u00ca\n\5\3\5\3")
        buf.write("\5\3\5\3\5\5\5\u00d0\n\5\3\5\5\5\u00d3\n\5\3\5\3\5\5\5")
        buf.write("\u00d7\n\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u00e2")
        buf.write("\n\6\3\6\3\6\3\6\3\6\3\6\5\6\u00e9\n\6\3\7\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u00f0\n\7\3\7\5\7\u00f3\n\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\5\7\u00fc\n\7\3\7\5\7\u00ff\n\7\3\7\3\7\5\7")
        buf.write("\u0103\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u010e")
        buf.write("\n\b\f\b\16\b\u0111\13\b\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3")
        buf.write("\n\7\n\u011b\n\n\f\n\16\n\u011e\13\n\3\13\3\13\3\13\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u012a\n\f\f\f\16\f\u012d")
        buf.write("\13\f\3\f\3\f\5\f\u0131\n\f\3\f\5\f\u0134\n\f\3\f\5\f")
        buf.write("\u0137\n\f\3\f\5\f\u013a\n\f\3\f\3\f\3\f\5\f\u013f\n\f")
        buf.write("\3\r\3\r\3\16\3\16\3\16\5\16\u0146\n\16\3\16\3\16\3\16")
        buf.write("\5\16\u014b\n\16\3\16\3\16\3\17\3\17\3\17\7\17\u0152\n")
        buf.write("\17\f\17\16\17\u0155\13\17\3\20\3\20\3\20\5\20\u015a\n")
        buf.write("\20\3\20\5\20\u015d\n\20\3\20\5\20\u0160\n\20\3\20\5\20")
        buf.write("\u0163\n\20\3\20\3\20\5\20\u0167\n\20\3\20\3\20\3\20\5")
        buf.write("\20\u016c\n\20\3\20\3\20\3\20\5\20\u0171\n\20\5\20\u0173")
        buf.write("\n\20\5\20\u0175\n\20\3\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0184\n\21\3\21")
        buf.write("\3\21\3\22\3\22\3\22\7\22\u018b\n\22\f\22\16\22\u018e")
        buf.write("\13\22\3\23\3\23\3\23\5\23\u0193\n\23\3\23\5\23\u0196")
        buf.write("\n\23\3\24\3\24\3\24\5\24\u019b\n\24\3\25\3\25\3\25\5")
        buf.write("\25\u01a0\n\25\3\25\3\25\3\26\5\26\u01a5\n\26\3\26\5\26")
        buf.write("\u01a8\n\26\3\26\5\26\u01ab\n\26\3\27\3\27\3\30\3\30\3")
        buf.write("\30\7\30\u01b2\n\30\f\30\16\30\u01b5\13\30\3\31\3\31\5")
        buf.write("\31\u01b9\n\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\5\33")
        buf.write("\u01c2\n\33\3\33\5\33\u01c5\n\33\3\34\3\34\3\34\5\34\u01ca")
        buf.write("\n\34\3\34\3\34\3\34\3\34\5\34\u01d0\n\34\3\35\3\35\5")
        buf.write("\35\u01d4\n\35\3\35\3\35\3\36\3\36\3\36\7\36\u01db\n\36")
        buf.write("\f\36\16\36\u01de\13\36\3\37\3\37\5\37\u01e2\n\37\3 \5")
        buf.write(" \u01e5\n \3 \5 \u01e8\n \3 \3 \5 \u01ec\n \3!\3!\5!\u01f0")
        buf.write("\n!\3!\3!\3\"\3\"\5\"\u01f6\n\"\3\"\5\"\u01f9\n\"\3\"")
        buf.write("\3\"\5\"\u01fd\n\"\3\"\5\"\u0200\n\"\3#\3#\3#\5#\u0205")
        buf.write("\n#\3#\5#\u0208\n#\3$\3$\3$\3$\3%\3%\3%\3&\3&\3&\3\'\5")
        buf.write("\'\u0215\n\'\3\'\3\'\3\'\3\'\7\'\u021b\n\'\f\'\16\'\u021e")
        buf.write("\13\'\3(\5(\u0221\n(\3(\3(\3(\3(\7(\u0227\n(\f(\16(\u022a")
        buf.write("\13(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u0237\n)\3)\3")
        buf.write(")\3*\3*\3*\3*\5*\u023f\n*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\5*\u024e\n*\3*\3*\3+\3+\3+\3+\3+\3+\7+\u0258")
        buf.write("\n+\f+\16+\u025b\13+\3+\3+\3+\3+\3+\3+\7+\u0263\n+\f+")
        buf.write("\16+\u0266\13+\7+\u0268\n+\f+\16+\u026b\13+\3+\3+\3+\3")
        buf.write("+\7+\u0271\n+\f+\16+\u0274\13+\5+\u0276\n+\3+\3+\3+\3")
        buf.write(",\3,\3,\3,\3,\3,\7,\u0281\n,\f,\16,\u0284\13,\3,\3,\3")
        buf.write(",\3,\3,\3,\7,\u028c\n,\f,\16,\u028f\13,\7,\u0291\n,\f")
        buf.write(",\16,\u0294\13,\3,\3,\3,\3,\7,\u029a\n,\f,\16,\u029d\13")
        buf.write(",\5,\u029f\n,\3,\3,\3,\3-\3-\3-\3-\3-\3-\7-\u02aa\n-\f")
        buf.write("-\16-\u02ad\13-\3-\3-\3-\3.\3.\3.\3.\3.\3.\7.\u02b8\n")
        buf.write(".\f.\16.\u02bb\13.\3.\3.\3.\3/\3/\3/\7/\u02c3\n/\f/\16")
        buf.write("/\u02c6\13/\3\60\3\60\3\60\5\60\u02cb\n\60\3\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\7\61\u02d3\n\61\f\61\16\61\u02d6\13")
        buf.write("\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62\7\62")
        buf.write("\u02e1\n\62\f\62\16\62\u02e4\13\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\7\62\u02ec\n\62\f\62\16\62\u02ef\13\62\7\62")
        buf.write("\u02f1\n\62\f\62\16\62\u02f4\13\62\3\62\3\62\3\62\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\7\63\u02ff\n\63\f\63\16\63\u0302")
        buf.write("\13\63\3\63\3\63\3\63\3\63\3\63\3\63\7\63\u030a\n\63\f")
        buf.write("\63\16\63\u030d\13\63\7\63\u030f\n\63\f\63\16\63\u0312")
        buf.write("\13\63\3\63\3\63\3\63\3\64\3\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\7\65\u0328\n\65\f\65\16\65\u032b\13\65\3\65\3\65\3\65")
        buf.write("\5\65\u0330\n\65\3\66\3\66\3\66\3\66\3\66\5\66\u0337\n")
        buf.write("\66\5\66\u0339\n\66\3\67\3\67\3\67\7\67\u033e\n\67\f\67")
        buf.write("\16\67\u0341\13\67\38\38\38\78\u0346\n8\f8\168\u0349\13")
        buf.write("8\39\59\u034c\n9\39\39\3:\3:\3:\3:\5:\u0354\n:\3;\3;\3")
        buf.write("<\5<\u0359\n<\3<\3<\3<\3<\7<\u035f\n<\f<\16<\u0362\13")
        buf.write("<\3=\3=\3>\3>\3>\3>\7>\u036a\n>\f>\16>\u036d\13>\3?\3")
        buf.write("?\3@\3@\3@\5@\u0374\n@\3A\3A\3A\3A\3A\3A\3A\5A\u037d\n")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\7A\u0389\nA\fA\16A\u038c")
        buf.write("\13A\3A\3A\3A\3A\3A\3A\3A\5A\u0395\nA\3B\5B\u0398\nB\3")
        buf.write("B\3B\3B\7B\u039d\nB\fB\16B\u03a0\13B\3C\5C\u03a3\nC\3")
        buf.write("C\3C\5C\u03a7\nC\3C\3C\3C\5C\u03ac\nC\7C\u03ae\nC\fC\16")
        buf.write("C\u03b1\13C\3D\3D\5D\u03b5\nD\3D\3D\3E\3E\3E\3E\3E\5E")
        buf.write("\u03be\nE\3E\5E\u03c1\nE\3F\3F\3F\5F\u03c6\nF\3G\3G\3")
        buf.write("G\3G\3H\3H\3H\3H\5H\u03d0\nH\3H\3H\3H\5H\u03d5\nH\3I\5")
        buf.write("I\u03d8\nI\3I\3I\5I\u03dc\nI\7I\u03de\nI\fI\16I\u03e1")
        buf.write("\13I\3J\3J\3J\7J\u03e6\nJ\fJ\16J\u03e9\13J\3K\3K\3K\3")
        buf.write("K\7K\u03ef\nK\fK\16K\u03f2\13K\3K\3K\3L\3L\5L\u03f8\n")
        buf.write("L\3M\3M\5M\u03fc\nM\3N\3N\3N\7N\u0401\nN\fN\16N\u0404")
        buf.write("\13N\5N\u0406\nN\3O\3O\3O\3O\2\2P\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\2\n\3\2\21\22\3\2)*\3\2+-\3\2./\3\2EJ\3\2KN\4\2")
        buf.write("%%OQ\3\2RS\2\u0462\2\u00a5\3\2\2\2\4\u00b4\3\2\2\2\6\u00bc")
        buf.write("\3\2\2\2\b\u00bf\3\2\2\2\n\u00e8\3\2\2\2\f\u0102\3\2\2")
        buf.write("\2\16\u0104\3\2\2\2\20\u0115\3\2\2\2\22\u0117\3\2\2\2")
        buf.write("\24\u011f\3\2\2\2\26\u0122\3\2\2\2\30\u0140\3\2\2\2\32")
        buf.write("\u0145\3\2\2\2\34\u0153\3\2\2\2\36\u0174\3\2\2\2 \u0176")
        buf.write("\3\2\2\2\"\u0187\3\2\2\2$\u018f\3\2\2\2&\u0197\3\2\2\2")
        buf.write("(\u019c\3\2\2\2*\u01a4\3\2\2\2,\u01ac\3\2\2\2.\u01ae\3")
        buf.write("\2\2\2\60\u01b6\3\2\2\2\62\u01bc\3\2\2\2\64\u01bf\3\2")
        buf.write("\2\2\66\u01cf\3\2\2\28\u01d1\3\2\2\2:\u01d7\3\2\2\2<\u01e1")
        buf.write("\3\2\2\2>\u01e4\3\2\2\2@\u01ed\3\2\2\2B\u01f3\3\2\2\2")
        buf.write("D\u0201\3\2\2\2F\u0209\3\2\2\2H\u020d\3\2\2\2J\u0210\3")
        buf.write("\2\2\2L\u0214\3\2\2\2N\u0220\3\2\2\2P\u0236\3\2\2\2R\u024d")
        buf.write("\3\2\2\2T\u0251\3\2\2\2V\u027a\3\2\2\2X\u02a3\3\2\2\2")
        buf.write("Z\u02b1\3\2\2\2\\\u02bf\3\2\2\2^\u02c7\3\2\2\2`\u02cc")
        buf.write("\3\2\2\2b\u02da\3\2\2\2d\u02f8\3\2\2\2f\u0316\3\2\2\2")
        buf.write("h\u032f\3\2\2\2j\u0331\3\2\2\2l\u033a\3\2\2\2n\u0342\3")
        buf.write("\2\2\2p\u034b\3\2\2\2r\u034f\3\2\2\2t\u0355\3\2\2\2v\u0358")
        buf.write("\3\2\2\2x\u0363\3\2\2\2z\u0365\3\2\2\2|\u036e\3\2\2\2")
        buf.write("~\u0370\3\2\2\2\u0080\u0394\3\2\2\2\u0082\u0397\3\2\2")
        buf.write("\2\u0084\u03a2\3\2\2\2\u0086\u03b2\3\2\2\2\u0088\u03c0")
        buf.write("\3\2\2\2\u008a\u03c2\3\2\2\2\u008c\u03c7\3\2\2\2\u008e")
        buf.write("\u03d4\3\2\2\2\u0090\u03d7\3\2\2\2\u0092\u03e2\3\2\2\2")
        buf.write("\u0094\u03ea\3\2\2\2\u0096\u03f7\3\2\2\2\u0098\u03f9\3")
        buf.write("\2\2\2\u009a\u0405\3\2\2\2\u009c\u0407\3\2\2\2\u009e\u00a0")
        buf.write("\7\3\2\2\u009f\u00a1\5\u0082B\2\u00a0\u009f\3\2\2\2\u00a0")
        buf.write("\u00a1\3\2\2\2\u00a1\u00a2\3\2\2\2\u00a2\u00a4\7\4\2\2")
        buf.write("\u00a3\u009e\3\2\2\2\u00a4\u00a7\3\2\2\2\u00a5\u00a3\3")
        buf.write("\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00b0\3\2\2\2\u00a7\u00a5")
        buf.write("\3\2\2\2\u00a8\u00aa\7\5\2\2\u00a9\u00a8\3\2\2\2\u00a9")
        buf.write("\u00aa\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab\u00ac\5\4\3\2")
        buf.write("\u00ac\u00ad\7\4\2\2\u00ad\u00af\3\2\2\2\u00ae\u00a9\3")
        buf.write("\2\2\2\u00af\u00b2\3\2\2\2\u00b0\u00ae\3\2\2\2\u00b0\u00b1")
        buf.write("\3\2\2\2\u00b1\3\3\2\2\2\u00b2\u00b0\3\2\2\2\u00b3\u00b5")
        buf.write("\7\6\2\2\u00b4\u00b3\3\2\2\2\u00b4\u00b5\3\2\2\2\u00b5")
        buf.write("\u00b6\3\2\2\2\u00b6\u00b7\5\b\5\2\u00b7\u00b8\5\6\4\2")
        buf.write("\u00b8\5\3\2\2\2\u00b9\u00bd\5\n\6\2\u00ba\u00bd\5\f\7")
        buf.write("\2\u00bb\u00bd\5\16\b\2\u00bc\u00b9\3\2\2\2\u00bc\u00ba")
        buf.write("\3\2\2\2\u00bc\u00bb\3\2\2\2\u00bd\7\3\2\2\2\u00be\u00c0")
        buf.write("\7\7\2\2\u00bf\u00be\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0")
        buf.write("\u00d6\3\2\2\2\u00c1\u00d7\7\b\2\2\u00c2\u00d7\7\t\2\2")
        buf.write("\u00c3\u00c5\7\n\2\2\u00c4\u00c3\3\2\2\2\u00c4\u00c5\3")
        buf.write("\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00d7\7\13\2\2\u00c7")
        buf.write("\u00d7\7\f\2\2\u00c8\u00ca\7\r\2\2\u00c9\u00c8\3\2\2\2")
        buf.write("\u00c9\u00ca\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00d7\7")
        buf.write("\16\2\2\u00cc\u00d7\7\17\2\2\u00cd\u00d7\7\20\2\2\u00ce")
        buf.write("\u00d0\t\2\2\2\u00cf\u00ce\3\2\2\2\u00cf\u00d0\3\2\2\2")
        buf.write("\u00d0\u00d2\3\2\2\2\u00d1\u00d3\7\n\2\2\u00d2\u00d1\3")
        buf.write("\2\2\2\u00d2\u00d3\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00d7")
        buf.write("\7\23\2\2\u00d5\u00d7\7\n\2\2\u00d6\u00c1\3\2\2\2\u00d6")
        buf.write("\u00c2\3\2\2\2\u00d6\u00c4\3\2\2\2\u00d6\u00c7\3\2\2\2")
        buf.write("\u00d6\u00c9\3\2\2\2\u00d6\u00cc\3\2\2\2\u00d6\u00cd\3")
        buf.write("\2\2\2\u00d6\u00cf\3\2\2\2\u00d6\u00d5\3\2\2\2\u00d7\t")
        buf.write("\3\2\2\2\u00d8\u00d9\7[\2\2\u00d9\u00da\5\u009aN\2\u00da")
        buf.write("\u00db\5\26\f\2\u00db\u00dc\7\24\2\2\u00dc\u00dd\7[\2")
        buf.write("\2\u00dd\u00e9\3\2\2\2\u00de\u00df\7\25\2\2\u00df\u00e1")
        buf.write("\7[\2\2\u00e0\u00e2\58\35\2\u00e1\u00e0\3\2\2\2\u00e1")
        buf.write("\u00e2\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e4\5\u009a")
        buf.write("N\2\u00e4\u00e5\5\26\f\2\u00e5\u00e6\7\24\2\2\u00e6\u00e7")
        buf.write("\7[\2\2\u00e7\u00e9\3\2\2\2\u00e8\u00d8\3\2\2\2\u00e8")
        buf.write("\u00de\3\2\2\2\u00e9\13\3\2\2\2\u00ea\u00eb\7[\2\2\u00eb")
        buf.write("\u00ec\7\26\2\2\u00ec\u00ed\5\20\t\2\u00ed\u00ef\5\u0082")
        buf.write("B\2\u00ee\u00f0\5\u0094K\2\u00ef\u00ee\3\2\2\2\u00ef\u00f0")
        buf.write("\3\2\2\2\u00f0\u00f2\3\2\2\2\u00f1\u00f3\58\35\2\u00f2")
        buf.write("\u00f1\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00f4\3\2\2\2")
        buf.write("\u00f4\u00f5\5\u0098M\2\u00f5\u0103\3\2\2\2\u00f6\u00f7")
        buf.write("\7[\2\2\u00f7\u00f8\7\26\2\2\u00f8\u00f9\7\27\2\2\u00f9")
        buf.write("\u00fe\7\30\2\2\u00fa\u00fc\5\22\n\2\u00fb\u00fa\3\2\2")
        buf.write("\2\u00fb\u00fc\3\2\2\2\u00fc\u00ff\3\2\2\2\u00fd\u00ff")
        buf.write("\7\31\2\2\u00fe\u00fb\3\2\2\2\u00fe\u00fd\3\2\2\2\u00ff")
        buf.write("\u0100\3\2\2\2\u0100\u0101\7\32\2\2\u0101\u0103\5\u0098")
        buf.write("M\2\u0102\u00ea\3\2\2\2\u0102\u00f6\3\2\2\2\u0103\r\3")
        buf.write("\2\2\2\u0104\u0105\7[\2\2\u0105\u0106\7\26\2\2\u0106\u0107")
        buf.write("\7\33\2\2\u0107\u0108\7\30\2\2\u0108\u0109\5\u0082B\2")
        buf.write("\u0109\u010a\7\34\2\2\u010a\u010f\7[\2\2\u010b\u010c\7")
        buf.write("\34\2\2\u010c\u010e\7[\2\2\u010d\u010b\3\2\2\2\u010e\u0111")
        buf.write("\3\2\2\2\u010f\u010d\3\2\2\2\u010f\u0110\3\2\2\2\u0110")
        buf.write("\u0112\3\2\2\2\u0111\u010f\3\2\2\2\u0112\u0113\7\32\2")
        buf.write("\2\u0113\u0114\5\u0098M\2\u0114\17\3\2\2\2\u0115\u0116")
        buf.write("\5*\26\2\u0116\21\3\2\2\2\u0117\u011c\5\24\13\2\u0118")
        buf.write("\u0119\7\34\2\2\u0119\u011b\5\24\13\2\u011a\u0118\3\2")
        buf.write("\2\2\u011b\u011e\3\2\2\2\u011c\u011a\3\2\2\2\u011c\u011d")
        buf.write("\3\2\2\2\u011d\23\3\2\2\2\u011e\u011c\3\2\2\2\u011f\u0120")
        buf.write("\7[\2\2\u0120\u0121\5\u0098M\2\u0121\25\3\2\2\2\u0122")
        buf.write("\u012b\5\34\17\2\u0123\u0124\7\35\2\2\u0124\u012a\5\34")
        buf.write("\17\2\u0125\u0126\7\36\2\2\u0126\u012a\5\34\17\2\u0127")
        buf.write("\u012a\5L\'\2\u0128\u012a\5N(\2\u0129\u0123\3\2\2\2\u0129")
        buf.write("\u0125\3\2\2\2\u0129\u0127\3\2\2\2\u0129\u0128\3\2\2\2")
        buf.write("\u012a\u012d\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3")
        buf.write("\2\2\2\u012c\u0139\3\2\2\2\u012d\u012b\3\2\2\2\u012e\u0130")
        buf.write("\7\37\2\2\u012f\u0131\5\30\r\2\u0130\u012f\3\2\2\2\u0130")
        buf.write("\u0131\3\2\2\2\u0131\u0133\3\2\2\2\u0132\u0134\5\32\16")
        buf.write("\2\u0133\u0132\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0136")
        buf.write("\3\2\2\2\u0135\u0137\5\u009cO\2\u0136\u0135\3\2\2\2\u0136")
        buf.write("\u0137\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u013a\7\4\2\2")
        buf.write("\u0139\u012e\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013e\3")
        buf.write("\2\2\2\u013b\u013c\5\u009cO\2\u013c\u013d\7\4\2\2\u013d")
        buf.write("\u013f\3\2\2\2\u013e\u013b\3\2\2\2\u013e\u013f\3\2\2\2")
        buf.write("\u013f\27\3\2\2\2\u0140\u0141\7\\\2\2\u0141\31\3\2\2\2")
        buf.write("\u0142\u0143\5\u0084C\2\u0143\u0144\7\26\2\2\u0144\u0146")
        buf.write("\3\2\2\2\u0145\u0142\3\2\2\2\u0145\u0146\3\2\2\2\u0146")
        buf.write("\u0147\3\2\2\2\u0147\u0148\7[\2\2\u0148\u014a\7\30\2\2")
        buf.write("\u0149\u014b\5\u0092J\2\u014a\u0149\3\2\2\2\u014a\u014b")
        buf.write("\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014d\7\32\2\2\u014d")
        buf.write("\33\3\2\2\2\u014e\u014f\5\36\20\2\u014f\u0150\7\4\2\2")
        buf.write("\u0150\u0152\3\2\2\2\u0151\u014e\3\2\2\2\u0152\u0155\3")
        buf.write("\2\2\2\u0153\u0151\3\2\2\2\u0153\u0154\3\2\2\2\u0154\35")
        buf.write("\3\2\2\2\u0155\u0153\3\2\2\2\u0156\u0175\5 \21\2\u0157")
        buf.write("\u0175\5$\23\2\u0158\u015a\7 \2\2\u0159\u0158\3\2\2\2")
        buf.write("\u0159\u015a\3\2\2\2\u015a\u015c\3\2\2\2\u015b\u015d\7")
        buf.write("\5\2\2\u015c\u015b\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015f")
        buf.write("\3\2\2\2\u015e\u0160\7!\2\2\u015f\u015e\3\2\2\2\u015f")
        buf.write("\u0160\3\2\2\2\u0160\u0162\3\2\2\2\u0161\u0163\7\"\2\2")
        buf.write("\u0162\u0161\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0172\3")
        buf.write("\2\2\2\u0164\u0167\5\4\3\2\u0165\u0167\5(\25\2\u0166\u0164")
        buf.write("\3\2\2\2\u0166\u0165\3\2\2\2\u0167\u0173\3\2\2\2\u0168")
        buf.write("\u016b\7#\2\2\u0169\u016c\5\4\3\2\u016a\u016c\5(\25\2")
        buf.write("\u016b\u0169\3\2\2\2\u016b\u016a\3\2\2\2\u016c\u0170\3")
        buf.write("\2\2\2\u016d\u016e\5&\24\2\u016e\u016f\5\u0098M\2\u016f")
        buf.write("\u0171\3\2\2\2\u0170\u016d\3\2\2\2\u0170\u0171\3\2\2\2")
        buf.write("\u0171\u0173\3\2\2\2\u0172\u0166\3\2\2\2\u0172\u0168\3")
        buf.write("\2\2\2\u0173\u0175\3\2\2\2\u0174\u0156\3\2\2\2\u0174\u0157")
        buf.write("\3\2\2\2\u0174\u0159\3\2\2\2\u0175\37\3\2\2\2\u0176\u0183")
        buf.write("\7$\2\2\u0177\u0178\7[\2\2\u0178\u0179\7\26\2\2\u0179")
        buf.write("\u0184\5\u0082B\2\u017a\u017b\5\u0082B\2\u017b\u017c\7")
        buf.write("%\2\2\u017c\u0184\3\2\2\2\u017d\u017e\5\u0082B\2\u017e")
        buf.write("\u017f\7&\2\2\u017f\u0180\5\"\22\2\u0180\u0181\7\'\2\2")
        buf.write("\u0181\u0184\3\2\2\2\u0182\u0184\5\u0082B\2\u0183\u0177")
        buf.write("\3\2\2\2\u0183\u017a\3\2\2\2\u0183\u017d\3\2\2\2\u0183")
        buf.write("\u0182\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u0186\5\u0098")
        buf.write("M\2\u0186!\3\2\2\2\u0187\u018c\7[\2\2\u0188\u0189\7\34")
        buf.write("\2\2\u0189\u018b\7[\2\2\u018a\u0188\3\2\2\2\u018b\u018e")
        buf.write("\3\2\2\2\u018c\u018a\3\2\2\2\u018c\u018d\3\2\2\2\u018d")
        buf.write("#\3\2\2\2\u018e\u018c\3\2\2\2\u018f\u0190\7\25\2\2\u0190")
        buf.write("\u0192\5\u0082B\2\u0191\u0193\58\35\2\u0192\u0191\3\2")
        buf.write("\2\2\u0192\u0193\3\2\2\2\u0193\u0195\3\2\2\2\u0194\u0196")
        buf.write("\5\u009cO\2\u0195\u0194\3\2\2\2\u0195\u0196\3\2\2\2\u0196")
        buf.write("%\3\2\2\2\u0197\u0198\7(\2\2\u0198\u019a\5\u0082B\2\u0199")
        buf.write("\u019b\58\35\2\u019a\u0199\3\2\2\2\u019a\u019b\3\2\2\2")
        buf.write("\u019b\'\3\2\2\2\u019c\u019d\5*\26\2\u019d\u019f\5,\27")
        buf.write("\2\u019e\u01a0\5\u0094K\2\u019f\u019e\3\2\2\2\u019f\u01a0")
        buf.write("\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a2\5.\30\2\u01a2")
        buf.write(")\3\2\2\2\u01a3\u01a5\t\3\2\2\u01a4\u01a3\3\2\2\2\u01a4")
        buf.write("\u01a5\3\2\2\2\u01a5\u01a7\3\2\2\2\u01a6\u01a8\t\4\2\2")
        buf.write("\u01a7\u01a6\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01aa\3")
        buf.write("\2\2\2\u01a9\u01ab\t\5\2\2\u01aa\u01a9\3\2\2\2\u01aa\u01ab")
        buf.write("\3\2\2\2\u01ab+\3\2\2\2\u01ac\u01ad\5\u0082B\2\u01ad-")
        buf.write("\3\2\2\2\u01ae\u01b3\5\60\31\2\u01af\u01b0\7\34\2\2\u01b0")
        buf.write("\u01b2\5\60\31\2\u01b1\u01af\3\2\2\2\u01b2\u01b5\3\2\2")
        buf.write("\2\u01b3\u01b1\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4/\3\2")
        buf.write("\2\2\u01b5\u01b3\3\2\2\2\u01b6\u01b8\5\64\33\2\u01b7\u01b9")
        buf.write("\5\62\32\2\u01b8\u01b7\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9")
        buf.write("\u01ba\3\2\2\2\u01ba\u01bb\5\u0098M\2\u01bb\61\3\2\2\2")
        buf.write("\u01bc\u01bd\7\60\2\2\u01bd\u01be\5h\65\2\u01be\63\3\2")
        buf.write("\2\2\u01bf\u01c1\7[\2\2\u01c0\u01c2\5\u0094K\2\u01c1\u01c0")
        buf.write("\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c4\3\2\2\2\u01c3")
        buf.write("\u01c5\5\66\34\2\u01c4\u01c3\3\2\2\2\u01c4\u01c5\3\2\2")
        buf.write("\2\u01c5\65\3\2\2\2\u01c6\u01c9\58\35\2\u01c7\u01c8\7")
        buf.write("\26\2\2\u01c8\u01ca\5h\65\2\u01c9\u01c7\3\2\2\2\u01c9")
        buf.write("\u01ca\3\2\2\2\u01ca\u01d0\3\2\2\2\u01cb\u01cc\7\26\2")
        buf.write("\2\u01cc\u01d0\5h\65\2\u01cd\u01ce\7\61\2\2\u01ce\u01d0")
        buf.write("\5h\65\2\u01cf\u01c6\3\2\2\2\u01cf\u01cb\3\2\2\2\u01cf")
        buf.write("\u01cd\3\2\2\2\u01d0\67\3\2\2\2\u01d1\u01d3\7\30\2\2\u01d2")
        buf.write("\u01d4\5:\36\2\u01d3\u01d2\3\2\2\2\u01d3\u01d4\3\2\2\2")
        buf.write("\u01d4\u01d5\3\2\2\2\u01d5\u01d6\7\32\2\2\u01d69\3\2\2")
        buf.write("\2\u01d7\u01dc\5<\37\2\u01d8\u01d9\7\34\2\2\u01d9\u01db")
        buf.write("\5<\37\2\u01da\u01d8\3\2\2\2\u01db\u01de\3\2\2\2\u01dc")
        buf.write("\u01da\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd;\3\2\2\2\u01de")
        buf.write("\u01dc\3\2\2\2\u01df\u01e2\5> \2\u01e0\u01e2\5B\"\2\u01e1")
        buf.write("\u01df\3\2\2\2\u01e1\u01e0\3\2\2\2\u01e2=\3\2\2\2\u01e3")
        buf.write("\u01e5\7\62\2\2\u01e4\u01e3\3\2\2\2\u01e4\u01e5\3\2\2")
        buf.write("\2\u01e5\u01e7\3\2\2\2\u01e6\u01e8\7\5\2\2\u01e7\u01e6")
        buf.write("\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01eb\3\2\2\2\u01e9")
        buf.write("\u01ec\5@!\2\u01ea\u01ec\5D#\2\u01eb\u01e9\3\2\2\2\u01eb")
        buf.write("\u01ea\3\2\2\2\u01ec?\3\2\2\2\u01ed\u01ef\5\u0082B\2\u01ee")
        buf.write("\u01f0\5\66\34\2\u01ef\u01ee\3\2\2\2\u01ef\u01f0\3\2\2")
        buf.write("\2\u01f0\u01f1\3\2\2\2\u01f1\u01f2\5\u009aN\2\u01f2A\3")
        buf.write("\2\2\2\u01f3\u01f5\7 \2\2\u01f4\u01f6\7\62\2\2\u01f5\u01f4")
        buf.write("\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f8\3\2\2\2\u01f7")
        buf.write("\u01f9\7\5\2\2\u01f8\u01f7\3\2\2\2\u01f8\u01f9\3\2\2\2")
        buf.write("\u01f9\u01ff\3\2\2\2\u01fa\u01fd\5J&\2\u01fb\u01fd\5F")
        buf.write("$\2\u01fc\u01fa\3\2\2\2\u01fc\u01fb\3\2\2\2\u01fd\u0200")
        buf.write("\3\2\2\2\u01fe\u0200\5D#\2\u01ff\u01fc\3\2\2\2\u01ff\u01fe")
        buf.write("\3\2\2\2\u0200C\3\2\2\2\u0201\u0204\7#\2\2\u0202\u0205")
        buf.write("\5J&\2\u0203\u0205\5F$\2\u0204\u0202\3\2\2\2\u0204\u0203")
        buf.write("\3\2\2\2\u0205\u0207\3\2\2\2\u0206\u0208\5&\24\2\u0207")
        buf.write("\u0206\3\2\2\2\u0207\u0208\3\2\2\2\u0208E\3\2\2\2\u0209")
        buf.write("\u020a\5*\26\2\u020a\u020b\5,\27\2\u020b\u020c\5H%\2\u020c")
        buf.write("G\3\2\2\2\u020d\u020e\5\64\33\2\u020e\u020f\5\u0098M\2")
        buf.write("\u020fI\3\2\2\2\u0210\u0211\5\b\5\2\u0211\u0212\5\f\7")
        buf.write("\2\u0212K\3\2\2\2\u0213\u0215\7\63\2\2\u0214\u0213\3\2")
        buf.write("\2\2\u0214\u0215\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u021c")
        buf.write("\7\64\2\2\u0217\u0218\5P)\2\u0218\u0219\7\4\2\2\u0219")
        buf.write("\u021b\3\2\2\2\u021a\u0217\3\2\2\2\u021b\u021e\3\2\2\2")
        buf.write("\u021c\u021a\3\2\2\2\u021c\u021d\3\2\2\2\u021dM\3\2\2")
        buf.write("\2\u021e\u021c\3\2\2\2\u021f\u0221\7\63\2\2\u0220\u021f")
        buf.write("\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0222\3\2\2\2\u0222")
        buf.write("\u0228\7\65\2\2\u0223\u0224\5R*\2\u0224\u0225\7\4\2\2")
        buf.write("\u0225\u0227\3\2\2\2\u0226\u0223\3\2\2\2\u0227\u022a\3")
        buf.write("\2\2\2\u0228\u0226\3\2\2\2\u0228\u0229\3\2\2\2\u0229O")
        buf.write("\3\2\2\2\u022a\u0228\3\2\2\2\u022b\u022c\5j\66\2\u022c")
        buf.write("\u022d\7\26\2\2\u022d\u022e\5h\65\2\u022e\u0237\3\2\2")
        buf.write("\2\u022f\u0237\5T+\2\u0230\u0237\5X-\2\u0231\u0237\5f")
        buf.write("\64\2\u0232\u0237\5b\62\2\u0233\u0234\5\u0082B\2\u0234")
        buf.write("\u0235\5\u0086D\2\u0235\u0237\3\2\2\2\u0236\u022b\3\2")
        buf.write("\2\2\u0236\u022f\3\2\2\2\u0236\u0230\3\2\2\2\u0236\u0231")
        buf.write("\3\2\2\2\u0236\u0232\3\2\2\2\u0236\u0233\3\2\2\2\u0237")
        buf.write("\u0238\3\2\2\2\u0238\u0239\5\u0098M\2\u0239Q\3\2\2\2\u023a")
        buf.write("\u023e\5\u0084C\2\u023b\u023c\7\61\2\2\u023c\u023f\5h")
        buf.write("\65\2\u023d\u023f\5\u0086D\2\u023e\u023b\3\2\2\2\u023e")
        buf.write("\u023d\3\2\2\2\u023f\u024e\3\2\2\2\u0240\u0241\7\30\2")
        buf.write("\2\u0241\u0242\5\u0090I\2\u0242\u0243\7\32\2\2\u0243\u0244")
        buf.write("\7\61\2\2\u0244\u0245\5\u0084C\2\u0245\u0246\5\u0086D")
        buf.write("\2\u0246\u024e\3\2\2\2\u0247\u024e\7\66\2\2\u0248\u024e")
        buf.write("\7\67\2\2\u0249\u024e\5V,\2\u024a\u024e\5Z.\2\u024b\u024e")
        buf.write("\5`\61\2\u024c\u024e\5d\63\2\u024d\u023a\3\2\2\2\u024d")
        buf.write("\u0240\3\2\2\2\u024d\u0247\3\2\2\2\u024d\u0248\3\2\2\2")
        buf.write("\u024d\u0249\3\2\2\2\u024d\u024a\3\2\2\2\u024d\u024b\3")
        buf.write("\2\2\2\u024d\u024c\3\2\2\2\u024e\u024f\3\2\2\2\u024f\u0250")
        buf.write("\5\u0098M\2\u0250S\3\2\2\2\u0251\u0252\7\60\2\2\u0252")
        buf.write("\u0253\5h\65\2\u0253\u0259\78\2\2\u0254\u0255\5P)\2\u0255")
        buf.write("\u0256\7\4\2\2\u0256\u0258\3\2\2\2\u0257\u0254\3\2\2\2")
        buf.write("\u0258\u025b\3\2\2\2\u0259\u0257\3\2\2\2\u0259\u025a\3")
        buf.write("\2\2\2\u025a\u0269\3\2\2\2\u025b\u0259\3\2\2\2\u025c\u025d")
        buf.write("\79\2\2\u025d\u025e\5h\65\2\u025e\u0264\78\2\2\u025f\u0260")
        buf.write("\5P)\2\u0260\u0261\7\4\2\2\u0261\u0263\3\2\2\2\u0262\u025f")
        buf.write("\3\2\2\2\u0263\u0266\3\2\2\2\u0264\u0262\3\2\2\2\u0264")
        buf.write("\u0265\3\2\2\2\u0265\u0268\3\2\2\2\u0266\u0264\3\2\2\2")
        buf.write("\u0267\u025c\3\2\2\2\u0268\u026b\3\2\2\2\u0269\u0267\3")
        buf.write("\2\2\2\u0269\u026a\3\2\2\2\u026a\u0275\3\2\2\2\u026b\u0269")
        buf.write("\3\2\2\2\u026c\u0272\7:\2\2\u026d\u026e\5P)\2\u026e\u026f")
        buf.write("\7\4\2\2\u026f\u0271\3\2\2\2\u0270\u026d\3\2\2\2\u0271")
        buf.write("\u0274\3\2\2\2\u0272\u0270\3\2\2\2\u0272\u0273\3\2\2\2")
        buf.write("\u0273\u0276\3\2\2\2\u0274\u0272\3\2\2\2\u0275\u026c\3")
        buf.write("\2\2\2\u0275\u0276\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0278")
        buf.write("\7\24\2\2\u0278\u0279\7\60\2\2\u0279U\3\2\2\2\u027a\u027b")
        buf.write("\7\60\2\2\u027b\u027c\5h\65\2\u027c\u0282\78\2\2\u027d")
        buf.write("\u027e\5R*\2\u027e\u027f\7\4\2\2\u027f\u0281\3\2\2\2\u0280")
        buf.write("\u027d\3\2\2\2\u0281\u0284\3\2\2\2\u0282\u0280\3\2\2\2")
        buf.write("\u0282\u0283\3\2\2\2\u0283\u0292\3\2\2\2\u0284\u0282\3")
        buf.write("\2\2\2\u0285\u0286\79\2\2\u0286\u0287\5h\65\2\u0287\u028d")
        buf.write("\78\2\2\u0288\u0289\5R*\2\u0289\u028a\7\4\2\2\u028a\u028c")
        buf.write("\3\2\2\2\u028b\u0288\3\2\2\2\u028c\u028f\3\2\2\2\u028d")
        buf.write("\u028b\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u0291\3\2\2\2")
        buf.write("\u028f\u028d\3\2\2\2\u0290\u0285\3\2\2\2\u0291\u0294\3")
        buf.write("\2\2\2\u0292\u0290\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u029e")
        buf.write("\3\2\2\2\u0294\u0292\3\2\2\2\u0295\u029b\7:\2\2\u0296")
        buf.write("\u0297\5R*\2\u0297\u0298\7\4\2\2\u0298\u029a\3\2\2\2\u0299")
        buf.write("\u0296\3\2\2\2\u029a\u029d\3\2\2\2\u029b\u0299\3\2\2\2")
        buf.write("\u029b\u029c\3\2\2\2\u029c\u029f\3\2\2\2\u029d\u029b\3")
        buf.write("\2\2\2\u029e\u0295\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a0")
        buf.write("\3\2\2\2\u02a0\u02a1\7\24\2\2\u02a1\u02a2\7\60\2\2\u02a2")
        buf.write("W\3\2\2\2\u02a3\u02a4\7;\2\2\u02a4\u02a5\5\\/\2\u02a5")
        buf.write("\u02ab\7<\2\2\u02a6\u02a7\5P)\2\u02a7\u02a8\7\4\2\2\u02a8")
        buf.write("\u02aa\3\2\2\2\u02a9\u02a6\3\2\2\2\u02aa\u02ad\3\2\2\2")
        buf.write("\u02ab\u02a9\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ae\3")
        buf.write("\2\2\2\u02ad\u02ab\3\2\2\2\u02ae\u02af\7\24\2\2\u02af")
        buf.write("\u02b0\7;\2\2\u02b0Y\3\2\2\2\u02b1\u02b2\7;\2\2\u02b2")
        buf.write("\u02b3\5\\/\2\u02b3\u02b9\7<\2\2\u02b4\u02b5\5R*\2\u02b5")
        buf.write("\u02b6\7\4\2\2\u02b6\u02b8\3\2\2\2\u02b7\u02b4\3\2\2\2")
        buf.write("\u02b8\u02bb\3\2\2\2\u02b9\u02b7\3\2\2\2\u02b9\u02ba\3")
        buf.write("\2\2\2\u02ba\u02bc\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bc\u02bd")
        buf.write("\7\24\2\2\u02bd\u02be\7;\2\2\u02be[\3\2\2\2\u02bf\u02c4")
        buf.write("\5^\60\2\u02c0\u02c1\7\34\2\2\u02c1\u02c3\5^\60\2\u02c2")
        buf.write("\u02c0\3\2\2\2\u02c3\u02c6\3\2\2\2\u02c4\u02c2\3\2\2\2")
        buf.write("\u02c4\u02c5\3\2\2\2\u02c5]\3\2\2\2\u02c6\u02c4\3\2\2")
        buf.write("\2\u02c7\u02ca\7[\2\2\u02c8\u02c9\7=\2\2\u02c9\u02cb\5")
        buf.write("h\65\2\u02ca\u02c8\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb_")
        buf.write("\3\2\2\2\u02cc\u02cd\7>\2\2\u02cd\u02ce\5h\65\2\u02ce")
        buf.write("\u02d4\7<\2\2\u02cf\u02d0\5R*\2\u02d0\u02d1\7\4\2\2\u02d1")
        buf.write("\u02d3\3\2\2\2\u02d2\u02cf\3\2\2\2\u02d3\u02d6\3\2\2\2")
        buf.write("\u02d4\u02d2\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d7\3")
        buf.write("\2\2\2\u02d6\u02d4\3\2\2\2\u02d7\u02d8\7\24\2\2\u02d8")
        buf.write("\u02d9\7>\2\2\u02d9a\3\2\2\2\u02da\u02db\7?\2\2\u02db")
        buf.write("\u02dc\5h\65\2\u02dc\u02e2\78\2\2\u02dd\u02de\5P)\2\u02de")
        buf.write("\u02df\7\4\2\2\u02df\u02e1\3\2\2\2\u02e0\u02dd\3\2\2\2")
        buf.write("\u02e1\u02e4\3\2\2\2\u02e2\u02e0\3\2\2\2\u02e2\u02e3\3")
        buf.write("\2\2\2\u02e3\u02f2\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e5\u02e6")
        buf.write("\7@\2\2\u02e6\u02e7\5h\65\2\u02e7\u02ed\78\2\2\u02e8\u02e9")
        buf.write("\5P)\2\u02e9\u02ea\7\4\2\2\u02ea\u02ec\3\2\2\2\u02eb\u02e8")
        buf.write("\3\2\2\2\u02ec\u02ef\3\2\2\2\u02ed\u02eb\3\2\2\2\u02ed")
        buf.write("\u02ee\3\2\2\2\u02ee\u02f1\3\2\2\2\u02ef\u02ed\3\2\2\2")
        buf.write("\u02f0\u02e5\3\2\2\2\u02f1\u02f4\3\2\2\2\u02f2\u02f0\3")
        buf.write("\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f5\3\2\2\2\u02f4\u02f2")
        buf.write("\3\2\2\2\u02f5\u02f6\7\24\2\2\u02f6\u02f7\7?\2\2\u02f7")
        buf.write("c\3\2\2\2\u02f8\u02f9\7?\2\2\u02f9\u02fa\5h\65\2\u02fa")
        buf.write("\u0300\78\2\2\u02fb\u02fc\5R*\2\u02fc\u02fd\7\4\2\2\u02fd")
        buf.write("\u02ff\3\2\2\2\u02fe\u02fb\3\2\2\2\u02ff\u0302\3\2\2\2")
        buf.write("\u0300\u02fe\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u0310\3")
        buf.write("\2\2\2\u0302\u0300\3\2\2\2\u0303\u0304\7@\2\2\u0304\u0305")
        buf.write("\5h\65\2\u0305\u030b\78\2\2\u0306\u0307\5R*\2\u0307\u0308")
        buf.write("\7\4\2\2\u0308\u030a\3\2\2\2\u0309\u0306\3\2\2\2\u030a")
        buf.write("\u030d\3\2\2\2\u030b\u0309\3\2\2\2\u030b\u030c\3\2\2\2")
        buf.write("\u030c\u030f\3\2\2\2\u030d\u030b\3\2\2\2\u030e\u0303\3")
        buf.write("\2\2\2\u030f\u0312\3\2\2\2\u0310\u030e\3\2\2\2\u0310\u0311")
        buf.write("\3\2\2\2\u0311\u0313\3\2\2\2\u0312\u0310\3\2\2\2\u0313")
        buf.write("\u0314\7\24\2\2\u0314\u0315\7?\2\2\u0315e\3\2\2\2\u0316")
        buf.write("\u0317\7A\2\2\u0317\u0318\7\30\2\2\u0318\u0319\5\u0084")
        buf.write("C\2\u0319\u031a\7\34\2\2\u031a\u031b\5\u0084C\2\u031b")
        buf.write("\u031c\7\32\2\2\u031cg\3\2\2\2\u031d\u0330\5j\66\2\u031e")
        buf.write("\u031f\7\60\2\2\u031f\u0320\5h\65\2\u0320\u0321\78\2\2")
        buf.write("\u0321\u0329\5h\65\2\u0322\u0323\79\2\2\u0323\u0324\5")
        buf.write("h\65\2\u0324\u0325\78\2\2\u0325\u0326\5h\65\2\u0326\u0328")
        buf.write("\3\2\2\2\u0327\u0322\3\2\2\2\u0328\u032b\3\2\2\2\u0329")
        buf.write("\u0327\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032c\3\2\2\2")
        buf.write("\u032b\u0329\3\2\2\2\u032c\u032d\7:\2\2\u032d\u032e\5")
        buf.write("h\65\2\u032e\u0330\3\2\2\2\u032f\u031d\3\2\2\2\u032f\u031e")
        buf.write("\3\2\2\2\u0330i\3\2\2\2\u0331\u0338\5l\67\2\u0332\u0333")
        buf.write("\7\31\2\2\u0333\u0336\5l\67\2\u0334\u0335\7\31\2\2\u0335")
        buf.write("\u0337\5l\67\2\u0336\u0334\3\2\2\2\u0336\u0337\3\2\2\2")
        buf.write("\u0337\u0339\3\2\2\2\u0338\u0332\3\2\2\2\u0338\u0339\3")
        buf.write("\2\2\2\u0339k\3\2\2\2\u033a\u033f\5n8\2\u033b\u033c\7")
        buf.write("B\2\2\u033c\u033e\5n8\2\u033d\u033b\3\2\2\2\u033e\u0341")
        buf.write("\3\2\2\2\u033f\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340")
        buf.write("m\3\2\2\2\u0341\u033f\3\2\2\2\u0342\u0347\5p9\2\u0343")
        buf.write("\u0344\7C\2\2\u0344\u0346\5p9\2\u0345\u0343\3\2\2\2\u0346")
        buf.write("\u0349\3\2\2\2\u0347\u0345\3\2\2\2\u0347\u0348\3\2\2\2")
        buf.write("\u0348o\3\2\2\2\u0349\u0347\3\2\2\2\u034a\u034c\7D\2\2")
        buf.write("\u034b\u034a\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034d\3")
        buf.write("\2\2\2\u034d\u034e\5r:\2\u034eq\3\2\2\2\u034f\u0353\5")
        buf.write("v<\2\u0350\u0351\5t;\2\u0351\u0352\5v<\2\u0352\u0354\3")
        buf.write("\2\2\2\u0353\u0350\3\2\2\2\u0353\u0354\3\2\2\2\u0354s")
        buf.write("\3\2\2\2\u0355\u0356\t\6\2\2\u0356u\3\2\2\2\u0357\u0359")
        buf.write("\5x=\2\u0358\u0357\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035a")
        buf.write("\3\2\2\2\u035a\u0360\5z>\2\u035b\u035c\5x=\2\u035c\u035d")
        buf.write("\5z>\2\u035d\u035f\3\2\2\2\u035e\u035b\3\2\2\2\u035f\u0362")
        buf.write("\3\2\2\2\u0360\u035e\3\2\2\2\u0360\u0361\3\2\2\2\u0361")
        buf.write("w\3\2\2\2\u0362\u0360\3\2\2\2\u0363\u0364\t\7\2\2\u0364")
        buf.write("y\3\2\2\2\u0365\u036b\5~@\2\u0366\u0367\5|?\2\u0367\u0368")
        buf.write("\5~@\2\u0368\u036a\3\2\2\2\u0369\u0366\3\2\2\2\u036a\u036d")
        buf.write("\3\2\2\2\u036b\u0369\3\2\2\2\u036b\u036c\3\2\2\2\u036c")
        buf.write("{\3\2\2\2\u036d\u036b\3\2\2\2\u036e\u036f\t\b\2\2\u036f")
        buf.write("}\3\2\2\2\u0370\u0373\5\u0080A\2\u0371\u0372\t\t\2\2\u0372")
        buf.write("\u0374\5\u0080A\2\u0373\u0371\3\2\2\2\u0373\u0374\3\2")
        buf.write("\2\2\u0374\177\3\2\2\2\u0375\u0395\7]\2\2\u0376\u0395")
        buf.write("\7\\\2\2\u0377\u0395\7T\2\2\u0378\u0395\7U\2\2\u0379\u037d")
        buf.write("\5\u0082B\2\u037a\u037d\7\33\2\2\u037b\u037d\7\63\2\2")
        buf.write("\u037c\u0379\3\2\2\2\u037c\u037a\3\2\2\2\u037c\u037b\3")
        buf.write("\2\2\2\u037d\u037e\3\2\2\2\u037e\u0395\5\u0086D\2\u037f")
        buf.write("\u0395\5\u0084C\2\u0380\u0381\7\30\2\2\u0381\u0382\5\u0090")
        buf.write("I\2\u0382\u0383\7\32\2\2\u0383\u0395\3\2\2\2\u0384\u0385")
        buf.write("\7V\2\2\u0385\u038a\5\u0092J\2\u0386\u0387\7\4\2\2\u0387")
        buf.write("\u0389\5\u0092J\2\u0388\u0386\3\2\2\2\u0389\u038c\3\2")
        buf.write("\2\2\u038a\u0388\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038d")
        buf.write("\3\2\2\2\u038c\u038a\3\2\2\2\u038d\u038e\7W\2\2\u038e")
        buf.write("\u0395\3\2\2\2\u038f\u0390\7X\2\2\u0390\u0391\5\u0088")
        buf.write("E\2\u0391\u0392\7\'\2\2\u0392\u0395\3\2\2\2\u0393\u0395")
        buf.write("\7\24\2\2\u0394\u0375\3\2\2\2\u0394\u0376\3\2\2\2\u0394")
        buf.write("\u0377\3\2\2\2\u0394\u0378\3\2\2\2\u0394\u037c\3\2\2\2")
        buf.write("\u0394\u037f\3\2\2\2\u0394\u0380\3\2\2\2\u0394\u0384\3")
        buf.write("\2\2\2\u0394\u038f\3\2\2\2\u0394\u0393\3\2\2\2\u0395\u0081")
        buf.write("\3\2\2\2\u0396\u0398\7Y\2\2\u0397\u0396\3\2\2\2\u0397")
        buf.write("\u0398\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039e\7[\2\2")
        buf.write("\u039a\u039b\7Y\2\2\u039b\u039d\7[\2\2\u039c\u039a\3\2")
        buf.write("\2\2\u039d\u03a0\3\2\2\2\u039e\u039c\3\2\2\2\u039e\u039f")
        buf.write("\3\2\2\2\u039f\u0083\3\2\2\2\u03a0\u039e\3\2\2\2\u03a1")
        buf.write("\u03a3\7Y\2\2\u03a2\u03a1\3\2\2\2\u03a2\u03a3\3\2\2\2")
        buf.write("\u03a3\u03a4\3\2\2\2\u03a4\u03a6\7[\2\2\u03a5\u03a7\5")
        buf.write("\u0094K\2\u03a6\u03a5\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7")
        buf.write("\u03af\3\2\2\2\u03a8\u03a9\7Y\2\2\u03a9\u03ab\7[\2\2\u03aa")
        buf.write("\u03ac\5\u0094K\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac\3\2")
        buf.write("\2\2\u03ac\u03ae\3\2\2\2\u03ad\u03a8\3\2\2\2\u03ae\u03b1")
        buf.write("\3\2\2\2\u03af\u03ad\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0")
        buf.write("\u0085\3\2\2\2\u03b1\u03af\3\2\2\2\u03b2\u03b4\7\30\2")
        buf.write("\2\u03b3\u03b5\5\u0088E\2\u03b4\u03b3\3\2\2\2\u03b4\u03b5")
        buf.write("\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b7\7\32\2\2\u03b7")
        buf.write("\u0087\3\2\2\2\u03b8\u03bd\5\u008eH\2\u03b9\u03ba\7\34")
        buf.write("\2\2\u03ba\u03be\5\u0088E\2\u03bb\u03bc\7;\2\2\u03bc\u03be")
        buf.write("\5\\/\2\u03bd\u03b9\3\2\2\2\u03bd\u03bb\3\2\2\2\u03bd")
        buf.write("\u03be\3\2\2\2\u03be\u03c1\3\2\2\2\u03bf\u03c1\5\u008a")
        buf.write("F\2\u03c0\u03b8\3\2\2\2\u03c0\u03bf\3\2\2\2\u03c1\u0089")
        buf.write("\3\2\2\2\u03c2\u03c5\5\u008cG\2\u03c3\u03c4\7\34\2\2\u03c4")
        buf.write("\u03c6\5\u008aF\2\u03c5\u03c3\3\2\2\2\u03c5\u03c6\3\2")
        buf.write("\2\2\u03c6\u008b\3\2\2\2\u03c7\u03c8\7[\2\2\u03c8\u03c9")
        buf.write("\7\26\2\2\u03c9\u03ca\5\u008eH\2\u03ca\u008d\3\2\2\2\u03cb")
        buf.write("\u03cc\7\23\2\2\u03cc\u03cd\5\u0082B\2\u03cd\u03cf\7\30")
        buf.write("\2\2\u03ce\u03d0\5\u008aF\2\u03cf\u03ce\3\2\2\2\u03cf")
        buf.write("\u03d0\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2\7\32\2")
        buf.write("\2\u03d2\u03d5\3\2\2\2\u03d3\u03d5\5h\65\2\u03d4\u03cb")
        buf.write("\3\2\2\2\u03d4\u03d3\3\2\2\2\u03d5\u008f\3\2\2\2\u03d6")
        buf.write("\u03d8\5h\65\2\u03d7\u03d6\3\2\2\2\u03d7\u03d8\3\2\2\2")
        buf.write("\u03d8\u03df\3\2\2\2\u03d9\u03db\7\34\2\2\u03da\u03dc")
        buf.write("\5h\65\2\u03db\u03da\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc")
        buf.write("\u03de\3\2\2\2\u03dd\u03d9\3\2\2\2\u03de\u03e1\3\2\2\2")
        buf.write("\u03df\u03dd\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u0091\3")
        buf.write("\2\2\2\u03e1\u03df\3\2\2\2\u03e2\u03e7\5h\65\2\u03e3\u03e4")
        buf.write("\7\34\2\2\u03e4\u03e6\5h\65\2\u03e5\u03e3\3\2\2\2\u03e6")
        buf.write("\u03e9\3\2\2\2\u03e7\u03e5\3\2\2\2\u03e7\u03e8\3\2\2\2")
        buf.write("\u03e8\u0093\3\2\2\2\u03e9\u03e7\3\2\2\2\u03ea\u03eb\7")
        buf.write("V\2\2\u03eb\u03f0\5\u0096L\2\u03ec\u03ed\7\34\2\2\u03ed")
        buf.write("\u03ef\5\u0096L\2\u03ee\u03ec\3\2\2\2\u03ef\u03f2\3\2")
        buf.write("\2\2\u03f0\u03ee\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f3")
        buf.write("\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f3\u03f4\7W\2\2\u03f4")
        buf.write("\u0095\3\2\2\2\u03f5\u03f8\7\31\2\2\u03f6\u03f8\5h\65")
        buf.write("\2\u03f7\u03f5\3\2\2\2\u03f7\u03f6\3\2\2\2\u03f8\u0097")
        buf.write("\3\2\2\2\u03f9\u03fb\5\u009aN\2\u03fa\u03fc\5\u009cO\2")
        buf.write("\u03fb\u03fa\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u0099\3")
        buf.write("\2\2\2\u03fd\u0402\7\\\2\2\u03fe\u03ff\7K\2\2\u03ff\u0401")
        buf.write("\7\\\2\2\u0400\u03fe\3\2\2\2\u0401\u0404\3\2\2\2\u0402")
        buf.write("\u0400\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u0406\3\2\2\2")
        buf.write("\u0404\u0402\3\2\2\2\u0405\u03fd\3\2\2\2\u0405\u0406\3")
        buf.write("\2\2\2\u0406\u009b\3\2\2\2\u0407\u0408\7Z\2\2\u0408\u0409")
        buf.write("\58\35\2\u0409\u009d\3\2\2\2\u0086\u00a0\u00a5\u00a9\u00b0")
        buf.write("\u00b4\u00bc\u00bf\u00c4\u00c9\u00cf\u00d2\u00d6\u00e1")
        buf.write("\u00e8\u00ef\u00f2\u00fb\u00fe\u0102\u010f\u011c\u0129")
        buf.write("\u012b\u0130\u0133\u0136\u0139\u013e\u0145\u014a\u0153")
        buf.write("\u0159\u015c\u015f\u0162\u0166\u016b\u0170\u0172\u0174")
        buf.write("\u0183\u018c\u0192\u0195\u019a\u019f\u01a4\u01a7\u01aa")
        buf.write("\u01b3\u01b8\u01c1\u01c4\u01c9\u01cf\u01d3\u01dc\u01e1")
        buf.write("\u01e4\u01e7\u01eb\u01ef\u01f5\u01f8\u01fc\u01ff\u0204")
        buf.write("\u0207\u0214\u021c\u0220\u0228\u0236\u023e\u024d\u0259")
        buf.write("\u0264\u0269\u0272\u0275\u0282\u028d\u0292\u029b\u029e")
        buf.write("\u02ab\u02b9\u02c4\u02ca\u02d4\u02e2\u02ed\u02f2\u0300")
        buf.write("\u030b\u0310\u0329\u032f\u0336\u0338\u033f\u0347\u034b")
        buf.write("\u0353\u0358\u0360\u036b\u0373\u037c\u038a\u0394\u0397")
        buf.write("\u039e\u03a2\u03a6\u03ab\u03af\u03b4\u03bd\u03c0\u03c5")
        buf.write("\u03cf\u03d4\u03d7\u03db\u03df\u03e7\u03f0\u03f7\u03fb")
        buf.write("\u0402\u0405")
        return buf.getvalue()


class modelicaParser (Parser):

    grammarFileName = "modelica.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "'within'", "';'", "'final'", "'encapsulated'",
                    "'partial'", "'class'", "'model'", "'operator'", "'record'",
                    "'block'", "'expandable'", "'connector'", "'type'",
                    "'package'", "'pure'", "'impure'", "'function'", "'end'",
                    "'extends'", "'='", "'enumeration'", "'('", "':'",
                    "')'", "'der'", "','", "'public'", "'protected'", "'external'",
                    "'redeclare'", "'inner'", "'outer'", "'replaceable'",
                    "'import'", "'.*'", "'.{'", "'}'", "'constrainedby'",
                    "'flow'", "'stream'", "'discrete'", "'parameter'",
                    "'constant'", "'input'", "'output'", "'if'", "':='",
                    "'each'", "'initial'", "'equation'", "'algorithm'",
                    "'break'", "'return'", "'then'", "'elseif'", "'else'",
                    "'for'", "'loop'", "'in'", "'while'", "'when'", "'elsewhen'",
                    "'connect'", "'or'", "'and'", "'not'", "'<'", "'<='",
                    "'>'", "'>='", "'=='", "'<>'", "'+'", "'-'", "'.+'",
                    "'.-'", "'*'", "'/'", "'./'", "'^'", "'.^'", "'false'",
                    "'true'", "'['", "']'", "'{'", "'.'", "'annotation'"]

    symbolicNames = ["<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "IDENT", "STRING", "UNSIGNED_NUMBER",
                     "WS", "COMMENT", "LINE_COMMENT"]

    RULE_stored_definition = 0
    RULE_class_definition = 1
    RULE_class_specifier = 2
    RULE_class_prefixes = 3
    RULE_long_class_specifier = 4
    RULE_short_class_specifier = 5
    RULE_der_class_specifier = 6
    RULE_base_prefix = 7
    RULE_enum_list = 8
    RULE_enumeration_literal = 9
    RULE_composition = 10
    RULE_language_specification = 11
    RULE_external_function_call = 12
    RULE_element_list = 13
    RULE_element = 14
    RULE_import_clause = 15
    RULE_import_list = 16
    RULE_extends_clause = 17
    RULE_constraining_clause = 18
    RULE_component_clause = 19
    RULE_type_prefix = 20
    RULE_type_specifier = 21
    RULE_component_list = 22
    RULE_component_declaration = 23
    RULE_condition_attribute = 24
    RULE_declaration = 25
    RULE_modification = 26
    RULE_class_modification = 27
    RULE_argument_list = 28
    RULE_argument = 29
    RULE_element_modification_or_replaceable = 30
    RULE_element_modification = 31
    RULE_element_redeclaration = 32
    RULE_element_replaceable = 33
    RULE_component_clause1 = 34
    RULE_component_declaration1 = 35
    RULE_short_class_definition = 36
    RULE_equation_section = 37
    RULE_algorithm_section = 38
    RULE_equation = 39
    RULE_statement = 40
    RULE_if_equation = 41
    RULE_if_statement = 42
    RULE_for_equation = 43
    RULE_for_statement = 44
    RULE_for_indices = 45
    RULE_for_index = 46
    RULE_while_statement = 47
    RULE_when_equation = 48
    RULE_when_statement = 49
    RULE_connect_clause = 50
    RULE_expression = 51
    RULE_simple_expression = 52
    RULE_logical_expression = 53
    RULE_logical_term = 54
    RULE_logical_factor = 55
    RULE_relation = 56
    RULE_rel_op = 57
    RULE_arithmetic_expression = 58
    RULE_add_op = 59
    RULE_term = 60
    RULE_mul_op = 61
    RULE_factor = 62
    RULE_primary = 63
    RULE_name = 64
    RULE_component_reference = 65
    RULE_function_call_args = 66
    RULE_function_arguments = 67
    RULE_named_arguments = 68
    RULE_named_argument = 69
    RULE_function_argument = 70
    RULE_output_expression_list = 71
    RULE_expression_list = 72
    RULE_array_subscripts = 73
    RULE_subscript = 74
    RULE_comment = 75
    RULE_string_comment = 76
    RULE_annotation = 77

    ruleNames = [
        "stored_definition",
        "class_definition",
        "class_specifier",
        "class_prefixes",
        "long_class_specifier",
        "short_class_specifier",
        "der_class_specifier",
        "base_prefix",
        "enum_list",
        "enumeration_literal",
        "composition",
        "language_specification",
        "external_function_call",
        "element_list",
        "element",
        "import_clause",
        "import_list",
        "extends_clause",
        "constraining_clause",
        "component_clause",
        "type_prefix",
        "type_specifier",
        "component_list",
        "component_declaration",
        "condition_attribute",
        "declaration",
        "modification",
        "class_modification",
        "argument_list",
        "argument",
        "element_modification_or_replaceable",
        "element_modification",
        "element_redeclaration",
        "element_replaceable",
        "component_clause1",
        "component_declaration1",
        "short_class_definition",
        "equation_section",
        "algorithm_section",
        "equation",
        "statement",
        "if_equation",
        "if_statement",
        "for_equation",
        "for_statement",
        "for_indices",
        "for_index",
        "while_statement",
        "when_equation",
        "when_statement",
        "connect_clause",
        "expression",
        "simple_expression",
        "logical_expression",
        "logical_term",
        "logical_factor",
        "relation",
        "rel_op",
        "arithmetic_expression",
        "add_op",
        "term",
        "mul_op",
        "factor",
        "primary",
        "name",
        "component_reference",
        "function_call_args",
        "function_arguments",
        "named_arguments",
        "named_argument",
        "function_argument",
        "output_expression_list",
        "expression_list",
        "array_subscripts",
        "subscript",
        "comment",
        "string_comment",
        "annotation"]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    T__52 = 53
    T__53 = 54
    T__54 = 55
    T__55 = 56
    T__56 = 57
    T__57 = 58
    T__58 = 59
    T__59 = 60
    T__60 = 61
    T__61 = 62
    T__62 = 63
    T__63 = 64
    T__64 = 65
    T__65 = 66
    T__66 = 67
    T__67 = 68
    T__68 = 69
    T__69 = 70
    T__70 = 71
    T__71 = 72
    T__72 = 73
    T__73 = 74
    T__74 = 75
    T__75 = 76
    T__76 = 77
    T__77 = 78
    T__78 = 79
    T__79 = 80
    T__80 = 81
    T__81 = 82
    T__82 = 83
    T__83 = 84
    T__84 = 85
    T__85 = 86
    T__86 = 87
    T__87 = 88
    IDENT = 89
    STRING = 90
    UNSIGNED_NUMBER = 91
    WS = 92
    COMMENT = 93
    LINE_COMMENT = 94

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class Stored_definitionContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_definition(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.Class_definitionContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Class_definitionContext, i)

        def name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.NameContext)
            else:
                return self.getTypedRuleContext(modelicaParser.NameContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_stored_definition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStored_definition"):
                listener.enterStored_definition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStored_definition"):
                listener.exitStored_definition(self)

    def stored_definition(self):

        localctx = modelicaParser.Stored_definitionContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_stored_definition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__0:
                self.state = 156
                self.match(modelicaParser.T__0)
                self.state = 158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__86 or _la == modelicaParser.IDENT:
                    self.state = 157
                    self.name()

                self.state = 160
                self.match(modelicaParser.T__1)
                self.state = 165
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (
                    (_la) & ~0x3f) == 0 and (
                    (1 << _la) & (
                        (1 << modelicaParser.T__2) | (
                    1 << modelicaParser.T__3) | (
                        1 << modelicaParser.T__4) | (
                            1 << modelicaParser.T__5) | (
                                1 << modelicaParser.T__6) | (
                                    1 << modelicaParser.T__7) | (
                                        1 << modelicaParser.T__8) | (
                                            1 << modelicaParser.T__9) | (
                                                1 << modelicaParser.T__10) | (
                                                    1 << modelicaParser.T__11) | (
                                                        1 << modelicaParser.T__12) | (
                                                            1 << modelicaParser.T__13) | (
                                                                1 << modelicaParser.T__14) | (
                                                                    1 << modelicaParser.T__15) | (
                                                                        1 << modelicaParser.T__16))) != 0):
                self.state = 167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__2:
                    self.state = 166
                    self.match(modelicaParser.T__2)

                self.state = 169
                self.class_definition()
                self.state = 170
                self.match(modelicaParser.T__1)
                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_definitionContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_prefixes(self):
            return self.getTypedRuleContext(
                modelicaParser.Class_prefixesContext, 0)

        def class_specifier(self):
            return self.getTypedRuleContext(
                modelicaParser.Class_specifierContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_class_definition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_definition"):
                listener.enterClass_definition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_definition"):
                listener.exitClass_definition(self)

    def class_definition(self):

        localctx = modelicaParser.Class_definitionContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_class_definition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__3:
                self.state = 177
                self.match(modelicaParser.T__3)

            self.state = 180
            self.class_prefixes()
            self.state = 181
            self.class_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_specifierContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def long_class_specifier(self):
            return self.getTypedRuleContext(
                modelicaParser.Long_class_specifierContext, 0)

        def short_class_specifier(self):
            return self.getTypedRuleContext(
                modelicaParser.Short_class_specifierContext, 0)

        def der_class_specifier(self):
            return self.getTypedRuleContext(
                modelicaParser.Der_class_specifierContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_class_specifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_specifier"):
                listener.enterClass_specifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_specifier"):
                listener.exitClass_specifier(self)

    def class_specifier(self):

        localctx = modelicaParser.Class_specifierContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_class_specifier)
        try:
            self.state = 186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 5, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 183
                self.long_class_specifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 184
                self.short_class_specifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 185
                self.der_class_specifier()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_prefixesContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return modelicaParser.RULE_class_prefixes

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_prefixes"):
                listener.enterClass_prefixes(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_prefixes"):
                listener.exitClass_prefixes(self)

    def class_prefixes(self):

        localctx = modelicaParser.Class_prefixesContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_class_prefixes)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__4:
                self.state = 188
                self.match(modelicaParser.T__4)

            self.state = 212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
            if la_ == 1:
                self.state = 191
                self.match(modelicaParser.T__5)
                pass

            elif la_ == 2:
                self.state = 192
                self.match(modelicaParser.T__6)
                pass

            elif la_ == 3:
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__7:
                    self.state = 193
                    self.match(modelicaParser.T__7)

                self.state = 196
                self.match(modelicaParser.T__8)
                pass

            elif la_ == 4:
                self.state = 197
                self.match(modelicaParser.T__9)
                pass

            elif la_ == 5:
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__10:
                    self.state = 198
                    self.match(modelicaParser.T__10)

                self.state = 201
                self.match(modelicaParser.T__11)
                pass

            elif la_ == 6:
                self.state = 202
                self.match(modelicaParser.T__12)
                pass

            elif la_ == 7:
                self.state = 203
                self.match(modelicaParser.T__13)
                pass

            elif la_ == 8:
                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__14 or _la == modelicaParser.T__15:
                    self.state = 204
                    _la = self._input.LA(1)
                    if not(_la == modelicaParser.T__14 or _la ==
                           modelicaParser.T__15):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__7:
                    self.state = 207
                    self.match(modelicaParser.T__7)

                self.state = 210
                self.match(modelicaParser.T__16)
                pass

            elif la_ == 9:
                self.state = 211
                self.match(modelicaParser.T__7)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Long_class_specifierContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i: int = None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def string_comment(self):
            return self.getTypedRuleContext(
                modelicaParser.String_commentContext, 0)

        def composition(self):
            return self.getTypedRuleContext(
                modelicaParser.CompositionContext, 0)

        def class_modification(self):
            return self.getTypedRuleContext(
                modelicaParser.Class_modificationContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_long_class_specifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLong_class_specifier"):
                listener.enterLong_class_specifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLong_class_specifier"):
                listener.exitLong_class_specifier(self)

    def long_class_specifier(self):

        localctx = modelicaParser.Long_class_specifierContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_long_class_specifier)
        self._la = 0  # Token type
        try:
            self.state = 230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 214
                self.match(modelicaParser.IDENT)
                self.state = 215
                self.string_comment()
                self.state = 216
                self.composition()
                self.state = 217
                self.match(modelicaParser.T__17)
                self.state = 218
                self.match(modelicaParser.IDENT)
                pass
            elif token in [modelicaParser.T__18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 220
                self.match(modelicaParser.T__18)
                self.state = 221
                self.match(modelicaParser.IDENT)
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__21:
                    self.state = 222
                    self.class_modification()

                self.state = 225
                self.string_comment()
                self.state = 226
                self.composition()
                self.state = 227
                self.match(modelicaParser.T__17)
                self.state = 228
                self.match(modelicaParser.IDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Short_class_specifierContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def base_prefix(self):
            return self.getTypedRuleContext(
                modelicaParser.Base_prefixContext, 0)

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext, 0)

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext, 0)

        def array_subscripts(self):
            return self.getTypedRuleContext(
                modelicaParser.Array_subscriptsContext, 0)

        def class_modification(self):
            return self.getTypedRuleContext(
                modelicaParser.Class_modificationContext, 0)

        def enum_list(self):
            return self.getTypedRuleContext(modelicaParser.Enum_listContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_short_class_specifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShort_class_specifier"):
                listener.enterShort_class_specifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShort_class_specifier"):
                listener.exitShort_class_specifier(self)

    def short_class_specifier(self):

        localctx = modelicaParser.Short_class_specifierContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_short_class_specifier)
        self._la = 0  # Token type
        try:
            self.state = 256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 18, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 232
                self.match(modelicaParser.IDENT)
                self.state = 233
                self.match(modelicaParser.T__19)
                self.state = 234
                self.base_prefix()
                self.state = 235
                self.name()
                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__83:
                    self.state = 236
                    self.array_subscripts()

                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__21:
                    self.state = 239
                    self.class_modification()

                self.state = 242
                self.comment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 244
                self.match(modelicaParser.IDENT)
                self.state = 245
                self.match(modelicaParser.T__19)
                self.state = 246
                self.match(modelicaParser.T__20)
                self.state = 247
                self.match(modelicaParser.T__21)
                self.state = 252
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__23, modelicaParser.IDENT]:
                    self.state = 249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == modelicaParser.IDENT:
                        self.state = 248
                        self.enum_list()

                    pass
                elif token in [modelicaParser.T__22]:
                    self.state = 251
                    self.match(modelicaParser.T__22)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 254
                self.match(modelicaParser.T__23)
                self.state = 255
                self.comment()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Der_class_specifierContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i: int = None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext, 0)

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_der_class_specifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDer_class_specifier"):
                listener.enterDer_class_specifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDer_class_specifier"):
                listener.exitDer_class_specifier(self)

    def der_class_specifier(self):

        localctx = modelicaParser.Der_class_specifierContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_der_class_specifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.match(modelicaParser.IDENT)
            self.state = 259
            self.match(modelicaParser.T__19)
            self.state = 260
            self.match(modelicaParser.T__24)
            self.state = 261
            self.match(modelicaParser.T__21)
            self.state = 262
            self.name()
            self.state = 263
            self.match(modelicaParser.T__25)
            self.state = 264
            self.match(modelicaParser.IDENT)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__25:
                self.state = 265
                self.match(modelicaParser.T__25)
                self.state = 266
                self.match(modelicaParser.IDENT)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 272
            self.match(modelicaParser.T__23)
            self.state = 273
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Base_prefixContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix(self):
            return self.getTypedRuleContext(
                modelicaParser.Type_prefixContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_base_prefix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBase_prefix"):
                listener.enterBase_prefix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBase_prefix"):
                listener.exitBase_prefix(self)

    def base_prefix(self):

        localctx = modelicaParser.Base_prefixContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_base_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.type_prefix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_listContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeration_literal(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.Enumeration_literalContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Enumeration_literalContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_enum_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnum_list"):
                listener.enterEnum_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnum_list"):
                listener.exitEnum_list(self)

    def enum_list(self):

        localctx = modelicaParser.Enum_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_enum_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.enumeration_literal()
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__25:
                self.state = 278
                self.match(modelicaParser.T__25)
                self.state = 279
                self.enumeration_literal()
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enumeration_literalContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_enumeration_literal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumeration_literal"):
                listener.enterEnumeration_literal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumeration_literal"):
                listener.exitEnumeration_literal(self)

    def enumeration_literal(self):

        localctx = modelicaParser.Enumeration_literalContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_enumeration_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(modelicaParser.IDENT)
            self.state = 286
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompositionContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_list(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.Element_listContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Element_listContext, i)

        def equation_section(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.Equation_sectionContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Equation_sectionContext, i)

        def algorithm_section(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.Algorithm_sectionContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Algorithm_sectionContext, i)

        def annotation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.AnnotationContext, i)

        def language_specification(self):
            return self.getTypedRuleContext(
                modelicaParser.Language_specificationContext, 0)

        def external_function_call(self):
            return self.getTypedRuleContext(
                modelicaParser.External_function_callContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_composition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComposition"):
                listener.enterComposition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComposition"):
                listener.exitComposition(self)

    def composition(self):

        localctx = modelicaParser.CompositionContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_composition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.element_list()
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (
                    (_la) & ~0x3f) == 0 and (
                    (1 << _la) & (
                        (1 << modelicaParser.T__26) | (
                    1 << modelicaParser.T__27) | (
                        1 << modelicaParser.T__48) | (
                            1 << modelicaParser.T__49) | (
                                1 << modelicaParser.T__50))) != 0):
                self.state = 295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 21, self._ctx)
                if la_ == 1:
                    self.state = 289
                    self.match(modelicaParser.T__26)
                    self.state = 290
                    self.element_list()
                    pass

                elif la_ == 2:
                    self.state = 291
                    self.match(modelicaParser.T__27)
                    self.state = 292
                    self.element_list()
                    pass

                elif la_ == 3:
                    self.state = 293
                    self.equation_section()
                    pass

                elif la_ == 4:
                    self.state = 294
                    self.algorithm_section()
                    pass

                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__28:
                self.state = 300
                self.match(modelicaParser.T__28)
                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.STRING:
                    self.state = 301
                    self.language_specification()

                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__86 or _la == modelicaParser.IDENT:
                    self.state = 304
                    self.external_function_call()

                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__87:
                    self.state = 307
                    self.annotation()

                self.state = 310
                self.match(modelicaParser.T__1)

            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__87:
                self.state = 313
                self.annotation()
                self.state = 314
                self.match(modelicaParser.T__1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Language_specificationContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(modelicaParser.STRING, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_language_specification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLanguage_specification"):
                listener.enterLanguage_specification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLanguage_specification"):
                listener.exitLanguage_specification(self)

    def language_specification(self):

        localctx = modelicaParser.Language_specificationContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_language_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(modelicaParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class External_function_callContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def component_reference(self):
            return self.getTypedRuleContext(
                modelicaParser.Component_referenceContext, 0)

        def expression_list(self):
            return self.getTypedRuleContext(
                modelicaParser.Expression_listContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_external_function_call

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExternal_function_call"):
                listener.enterExternal_function_call(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExternal_function_call"):
                listener.exitExternal_function_call(self)

    def external_function_call(self):

        localctx = modelicaParser.External_function_callContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_external_function_call)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 28, self._ctx)
            if la_ == 1:
                self.state = 320
                self.component_reference()
                self.state = 321
                self.match(modelicaParser.T__19)

            self.state = 325
            self.match(modelicaParser.IDENT)
            self.state = 326
            self.match(modelicaParser.T__21)
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    (_la) & ~0x3f) == 0 and (
                    (1 << _la) & (
                        (1 << modelicaParser.T__17) | (
                    1 << modelicaParser.T__21) | (
                        1 << modelicaParser.T__24) | (
                            1 << modelicaParser.T__45) | (
                                1 << modelicaParser.T__48))) != 0) or (
                                    (((_la -
                                       66)) & ~0x3f) == 0 and (
                                        (1 << (
                                            _la -
                                            66)) & (
                                                (1 << (
                                                    modelicaParser.T__65 -
                                                    66)) | (
                                                        1 << (
                                                            modelicaParser.T__72 -
                                                            66)) | (
                                                                1 << (
                                                                    modelicaParser.T__73 -
                                                                    66)) | (
                                                                        1 << (
                                                                            modelicaParser.T__74 -
                                                                            66)) | (
                                                                                1 << (
                                                                                    modelicaParser.T__75 -
                                                                                    66)) | (
                                                                                        1 << (
                                                                                            modelicaParser.T__81 -
                                                                                            66)) | (
                                                                                                1 << (
                                                                                                    modelicaParser.T__82 -
                                                                                                    66)) | (
                                                                                                        1 << (
                                                                                                            modelicaParser.T__83 -
                                                                                                            66)) | (
                                                                                                                1 << (
                                                                                                                    modelicaParser.T__85 -
                                                                                                                    66)) | (
                                                                                                                        1 << (
                                                                                                                            modelicaParser.T__86 -
                                                                                                                            66)) | (
                                                                                                                                1 << (
                                                                                                                                    modelicaParser.IDENT -
                                                                                                                                    66)) | (
                                                                                                                                        1 << (
                                                                                                                                            modelicaParser.STRING -
                                                                                                                                            66)) | (
                                                                                                                                                1 << (
                                                                                                                                                    modelicaParser.UNSIGNED_NUMBER -
                                                                                                                                                    66)))) != 0):
                self.state = 327
                self.expression_list()

            self.state = 330
            self.match(modelicaParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_listContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ElementContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.ElementContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_element_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement_list"):
                listener.enterElement_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement_list"):
                listener.exitElement_list(self)

    def element_list(self):

        localctx = modelicaParser.Element_listContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_element_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (
                    (_la) & ~0x3f) == 0 and (
                    (1 << _la) & (
                        (1 << modelicaParser.T__2) | (
                    1 << modelicaParser.T__3) | (
                        1 << modelicaParser.T__4) | (
                            1 << modelicaParser.T__5) | (
                                1 << modelicaParser.T__6) | (
                                    1 << modelicaParser.T__7) | (
                                        1 << modelicaParser.T__8) | (
                                            1 << modelicaParser.T__9) | (
                                                1 << modelicaParser.T__10) | (
                                                    1 << modelicaParser.T__11) | (
                                                        1 << modelicaParser.T__12) | (
                                                            1 << modelicaParser.T__13) | (
                                                                1 << modelicaParser.T__14) | (
                                                                    1 << modelicaParser.T__15) | (
                                                                        1 << modelicaParser.T__16) | (
                                                                            1 << modelicaParser.T__18) | (
                                                                                1 << modelicaParser.T__29) | (
                                                                                    1 << modelicaParser.T__30) | (
                                                                                        1 << modelicaParser.T__31) | (
                                                                                            1 << modelicaParser.T__32) | (
                                                                                                1 << modelicaParser.T__33) | (
                                                                                                    1 << modelicaParser.T__38) | (
                                                                                                        1 << modelicaParser.T__39) | (
                                                                                                            1 << modelicaParser.T__40) | (
                                                                                                                1 << modelicaParser.T__41) | (
                                                                                                                    1 << modelicaParser.T__42) | (
                                                                                                                        1 << modelicaParser.T__43) | (
                                                                                                                            1 << modelicaParser.T__44))) != 0) or _la == modelicaParser.T__86 or _la == modelicaParser.IDENT:
                self.state = 332
                self.element()
                self.state = 333
                self.match(modelicaParser.T__1)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_clause(self):
            return self.getTypedRuleContext(
                modelicaParser.Import_clauseContext, 0)

        def extends_clause(self):
            return self.getTypedRuleContext(
                modelicaParser.Extends_clauseContext, 0)

        def class_definition(self):
            return self.getTypedRuleContext(
                modelicaParser.Class_definitionContext, 0)

        def component_clause(self):
            return self.getTypedRuleContext(
                modelicaParser.Component_clauseContext, 0)

        def constraining_clause(self):
            return self.getTypedRuleContext(
                modelicaParser.Constraining_clauseContext, 0)

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_element

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement"):
                listener.enterElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement"):
                listener.exitElement(self)

    def element(self):

        localctx = modelicaParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_element)
        self._la = 0  # Token type
        try:
            self.state = 370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__33]:
                self.enterOuterAlt(localctx, 1)
                self.state = 340
                self.import_clause()
                pass
            elif token in [modelicaParser.T__18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self.extends_clause()
                pass
            elif token in [modelicaParser.T__2, modelicaParser.T__3, modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16, modelicaParser.T__29, modelicaParser.T__30, modelicaParser.T__31, modelicaParser.T__32, modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__29:
                    self.state = 342
                    self.match(modelicaParser.T__29)

                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__2:
                    self.state = 345
                    self.match(modelicaParser.T__2)

                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__30:
                    self.state = 348
                    self.match(modelicaParser.T__30)

                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__31:
                    self.state = 351
                    self.match(modelicaParser.T__31)

                self.state = 368
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                        modelicaParser.T__3,
                        modelicaParser.T__4,
                        modelicaParser.T__5,
                        modelicaParser.T__6,
                        modelicaParser.T__7,
                        modelicaParser.T__8,
                        modelicaParser.T__9,
                        modelicaParser.T__10,
                        modelicaParser.T__11,
                        modelicaParser.T__12,
                        modelicaParser.T__13,
                        modelicaParser.T__14,
                        modelicaParser.T__15,
                        modelicaParser.T__16,
                        modelicaParser.T__38,
                        modelicaParser.T__39,
                        modelicaParser.T__40,
                        modelicaParser.T__41,
                        modelicaParser.T__42,
                        modelicaParser.T__43,
                        modelicaParser.T__44,
                        modelicaParser.T__86,
                        modelicaParser.IDENT]:
                    self.state = 356
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                            modelicaParser.T__3,
                            modelicaParser.T__4,
                            modelicaParser.T__5,
                            modelicaParser.T__6,
                            modelicaParser.T__7,
                            modelicaParser.T__8,
                            modelicaParser.T__9,
                            modelicaParser.T__10,
                            modelicaParser.T__11,
                            modelicaParser.T__12,
                            modelicaParser.T__13,
                            modelicaParser.T__14,
                            modelicaParser.T__15,
                            modelicaParser.T__16]:
                        self.state = 354
                        self.class_definition()
                        pass
                    elif token in [modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                        self.state = 355
                        self.component_clause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [modelicaParser.T__32]:
                    self.state = 358
                    self.match(modelicaParser.T__32)
                    self.state = 361
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                            modelicaParser.T__3,
                            modelicaParser.T__4,
                            modelicaParser.T__5,
                            modelicaParser.T__6,
                            modelicaParser.T__7,
                            modelicaParser.T__8,
                            modelicaParser.T__9,
                            modelicaParser.T__10,
                            modelicaParser.T__11,
                            modelicaParser.T__12,
                            modelicaParser.T__13,
                            modelicaParser.T__14,
                            modelicaParser.T__15,
                            modelicaParser.T__16]:
                        self.state = 359
                        self.class_definition()
                        pass
                    elif token in [modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                        self.state = 360
                        self.component_clause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == modelicaParser.T__37:
                        self.state = 363
                        self.constraining_clause()
                        self.state = 364
                        self.comment()

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_clauseContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext, 0)

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext, 0)

        def import_list(self):
            return self.getTypedRuleContext(
                modelicaParser.Import_listContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_import_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_clause"):
                listener.enterImport_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_clause"):
                listener.exitImport_clause(self)

    def import_clause(self):

        localctx = modelicaParser.Import_clauseContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_import_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(modelicaParser.T__33)
            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 40, self._ctx)
            if la_ == 1:
                self.state = 373
                self.match(modelicaParser.IDENT)
                self.state = 374
                self.match(modelicaParser.T__19)
                self.state = 375
                self.name()
                pass

            elif la_ == 2:
                self.state = 376
                self.name()
                self.state = 377
                self.match(modelicaParser.T__34)
                pass

            elif la_ == 3:
                self.state = 379
                self.name()
                self.state = 380
                self.match(modelicaParser.T__35)
                self.state = 381
                self.import_list()
                self.state = 382
                self.match(modelicaParser.T__36)
                pass

            elif la_ == 4:
                self.state = 384
                self.name()
                pass

            self.state = 387
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_listContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i: int = None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_import_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_list"):
                listener.enterImport_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_list"):
                listener.exitImport_list(self)

    def import_list(self):

        localctx = modelicaParser.Import_listContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_import_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(modelicaParser.IDENT)
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__25:
                self.state = 390
                self.match(modelicaParser.T__25)
                self.state = 391
                self.match(modelicaParser.IDENT)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extends_clauseContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext, 0)

        def class_modification(self):
            return self.getTypedRuleContext(
                modelicaParser.Class_modificationContext, 0)

        def annotation(self):
            return self.getTypedRuleContext(
                modelicaParser.AnnotationContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_extends_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExtends_clause"):
                listener.enterExtends_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExtends_clause"):
                listener.exitExtends_clause(self)

    def extends_clause(self):

        localctx = modelicaParser.Extends_clauseContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_extends_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(modelicaParser.T__18)
            self.state = 398
            self.name()
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__21:
                self.state = 399
                self.class_modification()

            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__87:
                self.state = 402
                self.annotation()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraining_clauseContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext, 0)

        def class_modification(self):
            return self.getTypedRuleContext(
                modelicaParser.Class_modificationContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_constraining_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstraining_clause"):
                listener.enterConstraining_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstraining_clause"):
                listener.exitConstraining_clause(self)

    def constraining_clause(self):

        localctx = modelicaParser.Constraining_clauseContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_constraining_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(modelicaParser.T__37)
            self.state = 406
            self.name()
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__21:
                self.state = 407
                self.class_modification()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_clauseContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix(self):
            return self.getTypedRuleContext(
                modelicaParser.Type_prefixContext, 0)

        def type_specifier(self):
            return self.getTypedRuleContext(
                modelicaParser.Type_specifierContext, 0)

        def component_list(self):
            return self.getTypedRuleContext(
                modelicaParser.Component_listContext, 0)

        def array_subscripts(self):
            return self.getTypedRuleContext(
                modelicaParser.Array_subscriptsContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_component_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComponent_clause"):
                listener.enterComponent_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComponent_clause"):
                listener.exitComponent_clause(self)

    def component_clause(self):

        localctx = modelicaParser.Component_clauseContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_component_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.type_prefix()
            self.state = 411
            self.type_specifier()
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__83:
                self.state = 412
                self.array_subscripts()

            self.state = 415
            self.component_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_prefixContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return modelicaParser.RULE_type_prefix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_prefix"):
                listener.enterType_prefix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_prefix"):
                listener.exitType_prefix(self)

    def type_prefix(self):

        localctx = modelicaParser.Type_prefixContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_type_prefix)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__38 or _la == modelicaParser.T__39:
                self.state = 417
                _la = self._input.LA(1)
                if not(_la == modelicaParser.T__38 or _la ==
                       modelicaParser.T__39):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__40) | (
                    1 << modelicaParser.T__41) | (1 << modelicaParser.T__42))) != 0):
                self.state = 420
                _la = self._input.LA(1)
                if not(
                    (((_la) & ~0x3f) == 0 and (
                        (1 << _la) & (
                            (1 << modelicaParser.T__40) | (
                                1 << modelicaParser.T__41) | (
                        1 << modelicaParser.T__42))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__43 or _la == modelicaParser.T__44:
                self.state = 423
                _la = self._input.LA(1)
                if not(_la == modelicaParser.T__43 or _la ==
                       modelicaParser.T__44):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_specifierContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_type_specifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_specifier"):
                listener.enterType_specifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_specifier"):
                listener.exitType_specifier(self)

    def type_specifier(self):

        localctx = modelicaParser.Type_specifierContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_type_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_listContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_declaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.Component_declarationContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Component_declarationContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_component_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComponent_list"):
                listener.enterComponent_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComponent_list"):
                listener.exitComponent_list(self)

    def component_list(self):

        localctx = modelicaParser.Component_listContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_component_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.component_declaration()
            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__25:
                self.state = 429
                self.match(modelicaParser.T__25)
                self.state = 430
                self.component_declaration()
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_declarationContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(
                modelicaParser.DeclarationContext, 0)

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext, 0)

        def condition_attribute(self):
            return self.getTypedRuleContext(
                modelicaParser.Condition_attributeContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_component_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComponent_declaration"):
                listener.enterComponent_declaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComponent_declaration"):
                listener.exitComponent_declaration(self)

    def component_declaration(self):

        localctx = modelicaParser.Component_declarationContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_component_declaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.declaration()
            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__45:
                self.state = 437
                self.condition_attribute()

            self.state = 440
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Condition_attributeContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(
                modelicaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_condition_attribute

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCondition_attribute"):
                listener.enterCondition_attribute(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCondition_attribute"):
                listener.exitCondition_attribute(self)

    def condition_attribute(self):

        localctx = modelicaParser.Condition_attributeContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_condition_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(modelicaParser.T__45)
            self.state = 443
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def array_subscripts(self):
            return self.getTypedRuleContext(
                modelicaParser.Array_subscriptsContext, 0)

        def modification(self):
            return self.getTypedRuleContext(
                modelicaParser.ModificationContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaration"):
                listener.enterDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaration"):
                listener.exitDeclaration(self)

    def declaration(self):

        localctx = modelicaParser.DeclarationContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.match(modelicaParser.IDENT)
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__83:
                self.state = 446
                self.array_subscripts()

            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__19) | (
                    1 << modelicaParser.T__21) | (1 << modelicaParser.T__46))) != 0):
                self.state = 449
                self.modification()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModificationContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_modification(self):
            return self.getTypedRuleContext(
                modelicaParser.Class_modificationContext, 0)

        def expression(self):
            return self.getTypedRuleContext(
                modelicaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_modification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModification"):
                listener.enterModification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModification"):
                listener.exitModification(self)

    def modification(self):

        localctx = modelicaParser.ModificationContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_modification)
        self._la = 0  # Token type
        try:
            self.state = 461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 452
                self.class_modification()
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__19:
                    self.state = 453
                    self.match(modelicaParser.T__19)
                    self.state = 454
                    self.expression()

                pass
            elif token in [modelicaParser.T__19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 457
                self.match(modelicaParser.T__19)
                self.state = 458
                self.expression()
                pass
            elif token in [modelicaParser.T__46]:
                self.enterOuterAlt(localctx, 3)
                self.state = 459
                self.match(modelicaParser.T__46)
                self.state = 460
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_modificationContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_list(self):
            return self.getTypedRuleContext(
                modelicaParser.Argument_listContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_class_modification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_modification"):
                listener.enterClass_modification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_modification"):
                listener.exitClass_modification(self)

    def class_modification(self):

        localctx = modelicaParser.Class_modificationContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_class_modification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.match(modelicaParser.T__21)
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__2) | (1 << modelicaParser.T__29) | (
                    1 << modelicaParser.T__32) | (1 << modelicaParser.T__47))) != 0) or _la == modelicaParser.T__86 or _la == modelicaParser.IDENT:
                self.state = 464
                self.argument_list()

            self.state = 467
            self.match(modelicaParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_listContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.ArgumentContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_argument_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgument_list"):
                listener.enterArgument_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgument_list"):
                listener.exitArgument_list(self)

    def argument_list(self):

        localctx = modelicaParser.Argument_listContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_argument_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.argument()
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__25:
                self.state = 470
                self.match(modelicaParser.T__25)
                self.state = 471
                self.argument()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_modification_or_replaceable(self):
            return self.getTypedRuleContext(
                modelicaParser.Element_modification_or_replaceableContext, 0)

        def element_redeclaration(self):
            return self.getTypedRuleContext(
                modelicaParser.Element_redeclarationContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_argument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgument"):
                listener.enterArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgument"):
                listener.exitArgument(self)

    def argument(self):

        localctx = modelicaParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_argument)
        try:
            self.state = 479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                    modelicaParser.T__2,
                    modelicaParser.T__32,
                    modelicaParser.T__47,
                    modelicaParser.T__86,
                    modelicaParser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self.element_modification_or_replaceable()
                pass
            elif token in [modelicaParser.T__29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 478
                self.element_redeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_modification_or_replaceableContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_modification(self):
            return self.getTypedRuleContext(
                modelicaParser.Element_modificationContext, 0)

        def element_replaceable(self):
            return self.getTypedRuleContext(
                modelicaParser.Element_replaceableContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_element_modification_or_replaceable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement_modification_or_replaceable"):
                listener.enterElement_modification_or_replaceable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement_modification_or_replaceable"):
                listener.exitElement_modification_or_replaceable(self)

    def element_modification_or_replaceable(self):

        localctx = modelicaParser.Element_modification_or_replaceableContext(
            self, self._ctx, self.state)
        self.enterRule(
            localctx, 60, self.RULE_element_modification_or_replaceable)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__47:
                self.state = 481
                self.match(modelicaParser.T__47)

            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__2:
                self.state = 484
                self.match(modelicaParser.T__2)

            self.state = 489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__86, modelicaParser.IDENT]:
                self.state = 487
                self.element_modification()
                pass
            elif token in [modelicaParser.T__32]:
                self.state = 488
                self.element_replaceable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_modificationContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext, 0)

        def string_comment(self):
            return self.getTypedRuleContext(
                modelicaParser.String_commentContext, 0)

        def modification(self):
            return self.getTypedRuleContext(
                modelicaParser.ModificationContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_element_modification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement_modification"):
                listener.enterElement_modification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement_modification"):
                listener.exitElement_modification(self)

    def element_modification(self):

        localctx = modelicaParser.Element_modificationContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_element_modification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.name()
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__19) | (
                    1 << modelicaParser.T__21) | (1 << modelicaParser.T__46))) != 0):
                self.state = 492
                self.modification()

            self.state = 495
            self.string_comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_redeclarationContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_replaceable(self):
            return self.getTypedRuleContext(
                modelicaParser.Element_replaceableContext, 0)

        def short_class_definition(self):
            return self.getTypedRuleContext(
                modelicaParser.Short_class_definitionContext, 0)

        def component_clause1(self):
            return self.getTypedRuleContext(
                modelicaParser.Component_clause1Context, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_element_redeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement_redeclaration"):
                listener.enterElement_redeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement_redeclaration"):
                listener.exitElement_redeclaration(self)

    def element_redeclaration(self):

        localctx = modelicaParser.Element_redeclarationContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_element_redeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(modelicaParser.T__29)
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__47:
                self.state = 498
                self.match(modelicaParser.T__47)

            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__2:
                self.state = 501
                self.match(modelicaParser.T__2)

            self.state = 509
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                    modelicaParser.T__4,
                    modelicaParser.T__5,
                    modelicaParser.T__6,
                    modelicaParser.T__7,
                    modelicaParser.T__8,
                    modelicaParser.T__9,
                    modelicaParser.T__10,
                    modelicaParser.T__11,
                    modelicaParser.T__12,
                    modelicaParser.T__13,
                    modelicaParser.T__14,
                    modelicaParser.T__15,
                    modelicaParser.T__16,
                    modelicaParser.T__38,
                    modelicaParser.T__39,
                    modelicaParser.T__40,
                    modelicaParser.T__41,
                    modelicaParser.T__42,
                    modelicaParser.T__43,
                    modelicaParser.T__44,
                    modelicaParser.T__86,
                    modelicaParser.IDENT]:
                self.state = 506
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                        modelicaParser.T__4,
                        modelicaParser.T__5,
                        modelicaParser.T__6,
                        modelicaParser.T__7,
                        modelicaParser.T__8,
                        modelicaParser.T__9,
                        modelicaParser.T__10,
                        modelicaParser.T__11,
                        modelicaParser.T__12,
                        modelicaParser.T__13,
                        modelicaParser.T__14,
                        modelicaParser.T__15,
                        modelicaParser.T__16]:
                    self.state = 504
                    self.short_class_definition()
                    pass
                elif token in [modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                    self.state = 505
                    self.component_clause1()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [modelicaParser.T__32]:
                self.state = 508
                self.element_replaceable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_replaceableContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def short_class_definition(self):
            return self.getTypedRuleContext(
                modelicaParser.Short_class_definitionContext, 0)

        def component_clause1(self):
            return self.getTypedRuleContext(
                modelicaParser.Component_clause1Context, 0)

        def constraining_clause(self):
            return self.getTypedRuleContext(
                modelicaParser.Constraining_clauseContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_element_replaceable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement_replaceable"):
                listener.enterElement_replaceable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement_replaceable"):
                listener.exitElement_replaceable(self)

    def element_replaceable(self):

        localctx = modelicaParser.Element_replaceableContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_element_replaceable)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(modelicaParser.T__32)
            self.state = 514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                    modelicaParser.T__4,
                    modelicaParser.T__5,
                    modelicaParser.T__6,
                    modelicaParser.T__7,
                    modelicaParser.T__8,
                    modelicaParser.T__9,
                    modelicaParser.T__10,
                    modelicaParser.T__11,
                    modelicaParser.T__12,
                    modelicaParser.T__13,
                    modelicaParser.T__14,
                    modelicaParser.T__15,
                    modelicaParser.T__16]:
                self.state = 512
                self.short_class_definition()
                pass
            elif token in [modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                self.state = 513
                self.component_clause1()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__37:
                self.state = 516
                self.constraining_clause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_clause1Context(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix(self):
            return self.getTypedRuleContext(
                modelicaParser.Type_prefixContext, 0)

        def type_specifier(self):
            return self.getTypedRuleContext(
                modelicaParser.Type_specifierContext, 0)

        def component_declaration1(self):
            return self.getTypedRuleContext(
                modelicaParser.Component_declaration1Context, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_component_clause1

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComponent_clause1"):
                listener.enterComponent_clause1(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComponent_clause1"):
                listener.exitComponent_clause1(self)

    def component_clause1(self):

        localctx = modelicaParser.Component_clause1Context(
            self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_component_clause1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.type_prefix()
            self.state = 520
            self.type_specifier()
            self.state = 521
            self.component_declaration1()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_declaration1Context(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(
                modelicaParser.DeclarationContext, 0)

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_component_declaration1

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComponent_declaration1"):
                listener.enterComponent_declaration1(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComponent_declaration1"):
                listener.exitComponent_declaration1(self)

    def component_declaration1(self):

        localctx = modelicaParser.Component_declaration1Context(
            self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_component_declaration1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.declaration()
            self.state = 524
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Short_class_definitionContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_prefixes(self):
            return self.getTypedRuleContext(
                modelicaParser.Class_prefixesContext, 0)

        def short_class_specifier(self):
            return self.getTypedRuleContext(
                modelicaParser.Short_class_specifierContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_short_class_definition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShort_class_definition"):
                listener.enterShort_class_definition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShort_class_definition"):
                listener.exitShort_class_definition(self)

    def short_class_definition(self):

        localctx = modelicaParser.Short_class_definitionContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_short_class_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.class_prefixes()
            self.state = 527
            self.short_class_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Equation_sectionContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.EquationContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_equation_section

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEquation_section"):
                listener.enterEquation_section(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEquation_section"):
                listener.exitEquation_section(self)

    def equation_section(self):

        localctx = modelicaParser.Equation_sectionContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_equation_section)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__48:
                self.state = 529
                self.match(modelicaParser.T__48)

            self.state = 532
            self.match(modelicaParser.T__49)
            self.state = 538
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 69, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 533
                    self.equation()
                    self.state = 534
                    self.match(modelicaParser.T__1)
                self.state = 540
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 69, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Algorithm_sectionContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.StatementContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_algorithm_section

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAlgorithm_section"):
                listener.enterAlgorithm_section(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAlgorithm_section"):
                listener.exitAlgorithm_section(self)

    def algorithm_section(self):

        localctx = modelicaParser.Algorithm_sectionContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_algorithm_section)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__48:
                self.state = 541
                self.match(modelicaParser.T__48)

            self.state = 544
            self.match(modelicaParser.T__50)
            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (
                    (_la) & ~0x3f) == 0 and (
                    (1 << _la) & (
                        (1 << modelicaParser.T__21) | (
                    1 << modelicaParser.T__45) | (
                        1 << modelicaParser.T__51) | (
                            1 << modelicaParser.T__52) | (
                                1 << modelicaParser.T__56) | (
                                    1 << modelicaParser.T__59) | (
                                        1 << modelicaParser.T__60))) != 0) or _la == modelicaParser.T__86 or _la == modelicaParser.IDENT:
                self.state = 545
                self.statement()
                self.state = 546
                self.match(modelicaParser.T__1)
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EquationContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext, 0)

        def simple_expression(self):
            return self.getTypedRuleContext(
                modelicaParser.Simple_expressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(
                modelicaParser.ExpressionContext, 0)

        def if_equation(self):
            return self.getTypedRuleContext(
                modelicaParser.If_equationContext, 0)

        def for_equation(self):
            return self.getTypedRuleContext(
                modelicaParser.For_equationContext, 0)

        def connect_clause(self):
            return self.getTypedRuleContext(
                modelicaParser.Connect_clauseContext, 0)

        def when_equation(self):
            return self.getTypedRuleContext(
                modelicaParser.When_equationContext, 0)

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext, 0)

        def function_call_args(self):
            return self.getTypedRuleContext(
                modelicaParser.Function_call_argsContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_equation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEquation"):
                listener.enterEquation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEquation"):
                listener.exitEquation(self)

    def equation(self):

        localctx = modelicaParser.EquationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 72, self._ctx)
            if la_ == 1:
                self.state = 553
                self.simple_expression()
                self.state = 554
                self.match(modelicaParser.T__19)
                self.state = 555
                self.expression()
                pass

            elif la_ == 2:
                self.state = 557
                self.if_equation()
                pass

            elif la_ == 3:
                self.state = 558
                self.for_equation()
                pass

            elif la_ == 4:
                self.state = 559
                self.connect_clause()
                pass

            elif la_ == 5:
                self.state = 560
                self.when_equation()
                pass

            elif la_ == 6:
                self.state = 561
                self.name()
                self.state = 562
                self.function_call_args()
                pass

            self.state = 566
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext, 0)

        def component_reference(self):
            return self.getTypedRuleContext(
                modelicaParser.Component_referenceContext, 0)

        def output_expression_list(self):
            return self.getTypedRuleContext(
                modelicaParser.Output_expression_listContext, 0)

        def function_call_args(self):
            return self.getTypedRuleContext(
                modelicaParser.Function_call_argsContext, 0)

        def if_statement(self):
            return self.getTypedRuleContext(
                modelicaParser.If_statementContext, 0)

        def for_statement(self):
            return self.getTypedRuleContext(
                modelicaParser.For_statementContext, 0)

        def while_statement(self):
            return self.getTypedRuleContext(
                modelicaParser.While_statementContext, 0)

        def when_statement(self):
            return self.getTypedRuleContext(
                modelicaParser.When_statementContext, 0)

        def expression(self):
            return self.getTypedRuleContext(
                modelicaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):

        localctx = modelicaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__86, modelicaParser.IDENT]:
                self.state = 568
                self.component_reference()
                self.state = 572
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__46]:
                    self.state = 569
                    self.match(modelicaParser.T__46)
                    self.state = 570
                    self.expression()
                    pass
                elif token in [modelicaParser.T__21]:
                    self.state = 571
                    self.function_call_args()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [modelicaParser.T__21]:
                self.state = 574
                self.match(modelicaParser.T__21)
                self.state = 575
                self.output_expression_list()
                self.state = 576
                self.match(modelicaParser.T__23)
                self.state = 577
                self.match(modelicaParser.T__46)
                self.state = 578
                self.component_reference()
                self.state = 579
                self.function_call_args()
                pass
            elif token in [modelicaParser.T__51]:
                self.state = 581
                self.match(modelicaParser.T__51)
                pass
            elif token in [modelicaParser.T__52]:
                self.state = 582
                self.match(modelicaParser.T__52)
                pass
            elif token in [modelicaParser.T__45]:
                self.state = 583
                self.if_statement()
                pass
            elif token in [modelicaParser.T__56]:
                self.state = 584
                self.for_statement()
                pass
            elif token in [modelicaParser.T__59]:
                self.state = 585
                self.while_statement()
                pass
            elif token in [modelicaParser.T__60]:
                self.state = 586
                self.when_statement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 589
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_equationContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.ExpressionContext, i)

        def equation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.EquationContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_if_equation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_equation"):
                listener.enterIf_equation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_equation"):
                listener.exitIf_equation(self)

    def if_equation(self):

        localctx = modelicaParser.If_equationContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_if_equation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(modelicaParser.T__45)
            self.state = 592
            self.expression()
            self.state = 593
            self.match(modelicaParser.T__53)
            self.state = 599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 75, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 594
                    self.equation()
                    self.state = 595
                    self.match(modelicaParser.T__1)
                self.state = 601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 75, self._ctx)

            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__54:
                self.state = 602
                self.match(modelicaParser.T__54)
                self.state = 603
                self.expression()
                self.state = 604
                self.match(modelicaParser.T__53)
                self.state = 610
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 76, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 605
                        self.equation()
                        self.state = 606
                        self.match(modelicaParser.T__1)
                    self.state = 612
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(
                        self._input, 76, self._ctx)

                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__55:
                self.state = 618
                self.match(modelicaParser.T__55)
                self.state = 624
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 78, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 619
                        self.equation()
                        self.state = 620
                        self.match(modelicaParser.T__1)
                    self.state = 626
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(
                        self._input, 78, self._ctx)

            self.state = 629
            self.match(modelicaParser.T__17)
            self.state = 630
            self.match(modelicaParser.T__45)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_statementContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.ExpressionContext, i)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.StatementContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_if_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_statement"):
                listener.enterIf_statement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_statement"):
                listener.exitIf_statement(self)

    def if_statement(self):

        localctx = modelicaParser.If_statementContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_if_statement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(modelicaParser.T__45)
            self.state = 633
            self.expression()
            self.state = 634
            self.match(modelicaParser.T__53)
            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (
                    (_la) & ~0x3f) == 0 and (
                    (1 << _la) & (
                        (1 << modelicaParser.T__21) | (
                    1 << modelicaParser.T__45) | (
                        1 << modelicaParser.T__51) | (
                            1 << modelicaParser.T__52) | (
                                1 << modelicaParser.T__56) | (
                                    1 << modelicaParser.T__59) | (
                                        1 << modelicaParser.T__60))) != 0) or _la == modelicaParser.T__86 or _la == modelicaParser.IDENT:
                self.state = 635
                self.statement()
                self.state = 636
                self.match(modelicaParser.T__1)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__54:
                self.state = 643
                self.match(modelicaParser.T__54)
                self.state = 644
                self.expression()
                self.state = 645
                self.match(modelicaParser.T__53)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    (
                        (_la) & ~0x3f) == 0 and (
                        (1 << _la) & (
                            (1 << modelicaParser.T__21) | (
                                1 << modelicaParser.T__45) | (
                        1 << modelicaParser.T__51) | (
                            1 << modelicaParser.T__52) | (
                                1 << modelicaParser.T__56) | (
                                    1 << modelicaParser.T__59) | (
                                        1 << modelicaParser.T__60))) != 0) or _la == modelicaParser.T__86 or _la == modelicaParser.IDENT:
                    self.state = 646
                    self.statement()
                    self.state = 647
                    self.match(modelicaParser.T__1)
                    self.state = 653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__55:
                self.state = 659
                self.match(modelicaParser.T__55)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    (
                        (_la) & ~0x3f) == 0 and (
                        (1 << _la) & (
                            (1 << modelicaParser.T__21) | (
                                1 << modelicaParser.T__45) | (
                        1 << modelicaParser.T__51) | (
                            1 << modelicaParser.T__52) | (
                                1 << modelicaParser.T__56) | (
                                    1 << modelicaParser.T__59) | (
                                        1 << modelicaParser.T__60))) != 0) or _la == modelicaParser.T__86 or _la == modelicaParser.IDENT:
                    self.state = 660
                    self.statement()
                    self.state = 661
                    self.match(modelicaParser.T__1)
                    self.state = 667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 670
            self.match(modelicaParser.T__17)
            self.state = 671
            self.match(modelicaParser.T__45)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_equationContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_indices(self):
            return self.getTypedRuleContext(
                modelicaParser.For_indicesContext, 0)

        def equation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.EquationContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_for_equation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_equation"):
                listener.enterFor_equation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_equation"):
                listener.exitFor_equation(self)

    def for_equation(self):

        localctx = modelicaParser.For_equationContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_for_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(modelicaParser.T__56)
            self.state = 674
            self.for_indices()
            self.state = 675
            self.match(modelicaParser.T__57)
            self.state = 681
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 85, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 676
                    self.equation()
                    self.state = 677
                    self.match(modelicaParser.T__1)
                self.state = 683
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 85, self._ctx)

            self.state = 684
            self.match(modelicaParser.T__17)
            self.state = 685
            self.match(modelicaParser.T__56)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_statementContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_indices(self):
            return self.getTypedRuleContext(
                modelicaParser.For_indicesContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.StatementContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_for_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_statement"):
                listener.enterFor_statement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_statement"):
                listener.exitFor_statement(self)

    def for_statement(self):

        localctx = modelicaParser.For_statementContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_for_statement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(modelicaParser.T__56)
            self.state = 688
            self.for_indices()
            self.state = 689
            self.match(modelicaParser.T__57)
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (
                    (_la) & ~0x3f) == 0 and (
                    (1 << _la) & (
                        (1 << modelicaParser.T__21) | (
                    1 << modelicaParser.T__45) | (
                        1 << modelicaParser.T__51) | (
                            1 << modelicaParser.T__52) | (
                                1 << modelicaParser.T__56) | (
                                    1 << modelicaParser.T__59) | (
                                        1 << modelicaParser.T__60))) != 0) or _la == modelicaParser.T__86 or _la == modelicaParser.IDENT:
                self.state = 690
                self.statement()
                self.state = 691
                self.match(modelicaParser.T__1)
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 698
            self.match(modelicaParser.T__17)
            self.state = 699
            self.match(modelicaParser.T__56)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_indicesContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_index(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.For_indexContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.For_indexContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_for_indices

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_indices"):
                listener.enterFor_indices(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_indices"):
                listener.exitFor_indices(self)

    def for_indices(self):

        localctx = modelicaParser.For_indicesContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_for_indices)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.for_index()
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__25:
                self.state = 702
                self.match(modelicaParser.T__25)
                self.state = 703
                self.for_index()
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_indexContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def expression(self):
            return self.getTypedRuleContext(
                modelicaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_for_index

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_index"):
                listener.enterFor_index(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_index"):
                listener.exitFor_index(self)

    def for_index(self):

        localctx = modelicaParser.For_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_for_index)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(modelicaParser.IDENT)
            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__58:
                self.state = 710
                self.match(modelicaParser.T__58)
                self.state = 711
                self.expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_statementContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(
                modelicaParser.ExpressionContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.StatementContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_while_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhile_statement"):
                listener.enterWhile_statement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhile_statement"):
                listener.exitWhile_statement(self)

    def while_statement(self):

        localctx = modelicaParser.While_statementContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_while_statement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(modelicaParser.T__59)
            self.state = 715
            self.expression()
            self.state = 716
            self.match(modelicaParser.T__57)
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (
                    (_la) & ~0x3f) == 0 and (
                    (1 << _la) & (
                        (1 << modelicaParser.T__21) | (
                    1 << modelicaParser.T__45) | (
                        1 << modelicaParser.T__51) | (
                            1 << modelicaParser.T__52) | (
                                1 << modelicaParser.T__56) | (
                                    1 << modelicaParser.T__59) | (
                                        1 << modelicaParser.T__60))) != 0) or _la == modelicaParser.T__86 or _la == modelicaParser.IDENT:
                self.state = 717
                self.statement()
                self.state = 718
                self.match(modelicaParser.T__1)
                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 725
            self.match(modelicaParser.T__17)
            self.state = 726
            self.match(modelicaParser.T__59)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class When_equationContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.ExpressionContext, i)

        def equation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.EquationContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_when_equation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhen_equation"):
                listener.enterWhen_equation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhen_equation"):
                listener.exitWhen_equation(self)

    def when_equation(self):

        localctx = modelicaParser.When_equationContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_when_equation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(modelicaParser.T__60)
            self.state = 729
            self.expression()
            self.state = 730
            self.match(modelicaParser.T__53)
            self.state = 736
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 731
                    self.equation()
                    self.state = 732
                    self.match(modelicaParser.T__1)
                self.state = 738
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)

            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__61:
                self.state = 739
                self.match(modelicaParser.T__61)
                self.state = 740
                self.expression()
                self.state = 741
                self.match(modelicaParser.T__53)
                self.state = 747
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 91, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 742
                        self.equation()
                        self.state = 743
                        self.match(modelicaParser.T__1)
                    self.state = 749
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(
                        self._input, 91, self._ctx)

                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 755
            self.match(modelicaParser.T__17)
            self.state = 756
            self.match(modelicaParser.T__60)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class When_statementContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.ExpressionContext, i)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.StatementContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_when_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhen_statement"):
                listener.enterWhen_statement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhen_statement"):
                listener.exitWhen_statement(self)

    def when_statement(self):

        localctx = modelicaParser.When_statementContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_when_statement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(modelicaParser.T__60)
            self.state = 759
            self.expression()
            self.state = 760
            self.match(modelicaParser.T__53)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (
                    (_la) & ~0x3f) == 0 and (
                    (1 << _la) & (
                        (1 << modelicaParser.T__21) | (
                    1 << modelicaParser.T__45) | (
                        1 << modelicaParser.T__51) | (
                            1 << modelicaParser.T__52) | (
                                1 << modelicaParser.T__56) | (
                                    1 << modelicaParser.T__59) | (
                                        1 << modelicaParser.T__60))) != 0) or _la == modelicaParser.T__86 or _la == modelicaParser.IDENT:
                self.state = 761
                self.statement()
                self.state = 762
                self.match(modelicaParser.T__1)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__61:
                self.state = 769
                self.match(modelicaParser.T__61)
                self.state = 770
                self.expression()
                self.state = 771
                self.match(modelicaParser.T__53)
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    (
                        (_la) & ~0x3f) == 0 and (
                        (1 << _la) & (
                            (1 << modelicaParser.T__21) | (
                                1 << modelicaParser.T__45) | (
                        1 << modelicaParser.T__51) | (
                            1 << modelicaParser.T__52) | (
                                1 << modelicaParser.T__56) | (
                                    1 << modelicaParser.T__59) | (
                                        1 << modelicaParser.T__60))) != 0) or _la == modelicaParser.T__86 or _la == modelicaParser.IDENT:
                    self.state = 772
                    self.statement()
                    self.state = 773
                    self.match(modelicaParser.T__1)
                    self.state = 779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 785
            self.match(modelicaParser.T__17)
            self.state = 786
            self.match(modelicaParser.T__60)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Connect_clauseContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_reference(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.Component_referenceContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Component_referenceContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_connect_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect_clause"):
                listener.enterConnect_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect_clause"):
                listener.exitConnect_clause(self)

    def connect_clause(self):

        localctx = modelicaParser.Connect_clauseContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_connect_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(modelicaParser.T__62)
            self.state = 789
            self.match(modelicaParser.T__21)
            self.state = 790
            self.component_reference()
            self.state = 791
            self.match(modelicaParser.T__25)
            self.state = 792
            self.component_reference()
            self.state = 793
            self.match(modelicaParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expression(self):
            return self.getTypedRuleContext(
                modelicaParser.Simple_expressionContext, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.ExpressionContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self):

        localctx = modelicaParser.ExpressionContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_expression)
        self._la = 0  # Token type
        try:
            self.state = 813
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                    modelicaParser.T__17,
                    modelicaParser.T__21,
                    modelicaParser.T__24,
                    modelicaParser.T__48,
                    modelicaParser.T__65,
                    modelicaParser.T__72,
                    modelicaParser.T__73,
                    modelicaParser.T__74,
                    modelicaParser.T__75,
                    modelicaParser.T__81,
                    modelicaParser.T__82,
                    modelicaParser.T__83,
                    modelicaParser.T__85,
                    modelicaParser.T__86,
                    modelicaParser.IDENT,
                    modelicaParser.STRING,
                    modelicaParser.UNSIGNED_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 795
                self.simple_expression()
                pass
            elif token in [modelicaParser.T__45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 796
                self.match(modelicaParser.T__45)
                self.state = 797
                self.expression()
                self.state = 798
                self.match(modelicaParser.T__53)
                self.state = 799
                self.expression()
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == modelicaParser.T__54:
                    self.state = 800
                    self.match(modelicaParser.T__54)
                    self.state = 801
                    self.expression()
                    self.state = 802
                    self.match(modelicaParser.T__53)
                    self.state = 803
                    self.expression()
                    self.state = 809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 810
                self.match(modelicaParser.T__55)
                self.state = 811
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_expressionContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.Logical_expressionContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Logical_expressionContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_simple_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimple_expression"):
                listener.enterSimple_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimple_expression"):
                listener.exitSimple_expression(self)

    def simple_expression(self):

        localctx = modelicaParser.Simple_expressionContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_simple_expression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.logical_expression()
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__22:
                self.state = 816
                self.match(modelicaParser.T__22)
                self.state = 817
                self.logical_expression()
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__22:
                    self.state = 818
                    self.match(modelicaParser.T__22)
                    self.state = 819
                    self.logical_expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Logical_expressionContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.Logical_termContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Logical_termContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_logical_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogical_expression"):
                listener.enterLogical_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogical_expression"):
                listener.exitLogical_expression(self)

    def logical_expression(self):

        localctx = modelicaParser.Logical_expressionContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_logical_expression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.logical_term()
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__63:
                self.state = 825
                self.match(modelicaParser.T__63)
                self.state = 826
                self.logical_term()
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Logical_termContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.Logical_factorContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Logical_factorContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_logical_term

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogical_term"):
                listener.enterLogical_term(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogical_term"):
                listener.exitLogical_term(self)

    def logical_term(self):

        localctx = modelicaParser.Logical_termContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_logical_term)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.logical_factor()
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__64:
                self.state = 833
                self.match(modelicaParser.T__64)
                self.state = 834
                self.logical_factor()
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Logical_factorContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self):
            return self.getTypedRuleContext(modelicaParser.RelationContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_logical_factor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogical_factor"):
                listener.enterLogical_factor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogical_factor"):
                listener.exitLogical_factor(self)

    def logical_factor(self):

        localctx = modelicaParser.Logical_factorContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_logical_factor)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__65:
                self.state = 840
                self.match(modelicaParser.T__65)

            self.state = 843
            self.relation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmetic_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.Arithmetic_expressionContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Arithmetic_expressionContext, i)

        def rel_op(self):
            return self.getTypedRuleContext(modelicaParser.Rel_opContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_relation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelation"):
                listener.enterRelation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelation"):
                listener.exitRelation(self)

    def relation(self):

        localctx = modelicaParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_relation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.arithmetic_expression()
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la -
                   67)) & ~0x3f) == 0 and ((1 << (_la -
                                                  67)) & ((1 << (modelicaParser.T__66 -
                                                                 67)) | (1 << (modelicaParser.T__67 -
                                                                               67)) | (1 << (modelicaParser.T__68 -
                                                                                             67)) | (1 << (modelicaParser.T__69 -
                                                                                                           67)) | (1 << (modelicaParser.T__70 -
                                                                                                                         67)) | (1 << (modelicaParser.T__71 -
                                                                                                                                       67)))) != 0):
                self.state = 846
                self.rel_op()
                self.state = 847
                self.arithmetic_expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rel_opContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return modelicaParser.RULE_rel_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRel_op"):
                listener.enterRel_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRel_op"):
                listener.exitRel_op(self)

    def rel_op(self):

        localctx = modelicaParser.Rel_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_rel_op)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            _la = self._input.LA(1)
            if not(
                ((((_la -
                    67)) & ~0x3f) == 0 and (
                    (1 << (
                        _la -
                        67)) & (
                        (1 << (
                    modelicaParser.T__66 -
                    67)) | (
                        1 << (
                            modelicaParser.T__67 -
                            67)) | (
                                1 << (
                                    modelicaParser.T__68 -
                                    67)) | (
                                        1 << (
                                            modelicaParser.T__69 -
                                            67)) | (
                                                1 << (
                                                    modelicaParser.T__70 -
                                                    67)) | (
                                                        1 << (
                                                            modelicaParser.T__71 -
                                                            67)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arithmetic_expressionContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.TermContext)
            else:
                return self.getTypedRuleContext(modelicaParser.TermContext, i)

        def add_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Add_opContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Add_opContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_arithmetic_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmetic_expression"):
                listener.enterArithmetic_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmetic_expression"):
                listener.exitArithmetic_expression(self)

    def arithmetic_expression(self):

        localctx = modelicaParser.Arithmetic_expressionContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_arithmetic_expression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la -
                   73)) & ~0x3f) == 0 and ((1 << (_la -
                                                  73)) & ((1 << (modelicaParser.T__72 -
                                                                 73)) | (1 << (modelicaParser.T__73 -
                                                                               73)) | (1 << (modelicaParser.T__74 -
                                                                                             73)) | (1 << (modelicaParser.T__75 -
                                                                                                           73)))) != 0):
                self.state = 853
                self.add_op()

            self.state = 856
            self.term()
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la -
                      73)) & ~0x3f) == 0 and ((1 << (_la -
                                                     73)) & ((1 << (modelicaParser.T__72 -
                                                                    73)) | (1 << (modelicaParser.T__73 -
                                                                                  73)) | (1 << (modelicaParser.T__74 -
                                                                                                73)) | (1 << (modelicaParser.T__75 -
                                                                                                              73)))) != 0):
                self.state = 857
                self.add_op()
                self.state = 858
                self.term()
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Add_opContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return modelicaParser.RULE_add_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdd_op"):
                listener.enterAdd_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdd_op"):
                listener.exitAdd_op(self)

    def add_op(self):

        localctx = modelicaParser.Add_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_add_op)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            _la = self._input.LA(1)
            if not(
                ((((_la -
                    73)) & ~0x3f) == 0 and (
                    (1 << (
                        _la -
                        73)) & (
                        (1 << (
                    modelicaParser.T__72 -
                    73)) | (
                        1 << (
                            modelicaParser.T__73 -
                            73)) | (
                                1 << (
                                    modelicaParser.T__74 -
                                    73)) | (
                                        1 << (
                                            modelicaParser.T__75 -
                                            73)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.FactorContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.FactorContext, i)

        def mul_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Mul_opContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Mul_opContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_term

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTerm"):
                listener.enterTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTerm"):
                listener.exitTerm(self)

    def term(self):

        localctx = modelicaParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_term)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.factor()
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la -
                      35)) & ~0x3f) == 0 and ((1 << (_la -
                                                     35)) & ((1 << (modelicaParser.T__34 -
                                                                    35)) | (1 << (modelicaParser.T__76 -
                                                                                  35)) | (1 << (modelicaParser.T__77 -
                                                                                                35)) | (1 << (modelicaParser.T__78 -
                                                                                                              35)))) != 0):
                self.state = 868
                self.mul_op()
                self.state = 869
                self.factor()
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mul_opContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return modelicaParser.RULE_mul_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMul_op"):
                listener.enterMul_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMul_op"):
                listener.exitMul_op(self)

    def mul_op(self):

        localctx = modelicaParser.Mul_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_mul_op)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            _la = self._input.LA(1)
            if not(
                ((((_la -
                    35)) & ~0x3f) == 0 and (
                    (1 << (
                        _la -
                        35)) & (
                        (1 << (
                    modelicaParser.T__34 -
                    35)) | (
                        1 << (
                            modelicaParser.T__76 -
                            35)) | (
                                1 << (
                                    modelicaParser.T__77 -
                                    35)) | (
                                        1 << (
                                            modelicaParser.T__78 -
                                            35)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.PrimaryContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.PrimaryContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_factor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFactor"):
                listener.enterFactor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFactor"):
                listener.exitFactor(self)

    def factor(self):

        localctx = modelicaParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_factor)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.primary()
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__79 or _la == modelicaParser.T__80:
                self.state = 879
                _la = self._input.LA(1)
                if not(_la == modelicaParser.T__79 or _la ==
                       modelicaParser.T__80):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 880
                self.primary()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_NUMBER(self):
            return self.getToken(modelicaParser.UNSIGNED_NUMBER, 0)

        def STRING(self):
            return self.getToken(modelicaParser.STRING, 0)

        def function_call_args(self):
            return self.getTypedRuleContext(
                modelicaParser.Function_call_argsContext, 0)

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext, 0)

        def component_reference(self):
            return self.getTypedRuleContext(
                modelicaParser.Component_referenceContext, 0)

        def output_expression_list(self):
            return self.getTypedRuleContext(
                modelicaParser.Output_expression_listContext, 0)

        def expression_list(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Expression_listContext, i)

        def function_arguments(self):
            return self.getTypedRuleContext(
                modelicaParser.Function_argumentsContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_primary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimary"):
                listener.enterPrimary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimary"):
                listener.exitPrimary(self)

    def primary(self):

        localctx = modelicaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_primary)
        self._la = 0  # Token type
        try:
            self.state = 914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 110, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 883
                self.match(modelicaParser.UNSIGNED_NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 884
                self.match(modelicaParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 885
                self.match(modelicaParser.T__81)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 886
                self.match(modelicaParser.T__82)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 890
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__86, modelicaParser.IDENT]:
                    self.state = 887
                    self.name()
                    pass
                elif token in [modelicaParser.T__24]:
                    self.state = 888
                    self.match(modelicaParser.T__24)
                    pass
                elif token in [modelicaParser.T__48]:
                    self.state = 889
                    self.match(modelicaParser.T__48)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 892
                self.function_call_args()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 893
                self.component_reference()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 894
                self.match(modelicaParser.T__21)
                self.state = 895
                self.output_expression_list()
                self.state = 896
                self.match(modelicaParser.T__23)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 898
                self.match(modelicaParser.T__83)
                self.state = 899
                self.expression_list()
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == modelicaParser.T__1:
                    self.state = 900
                    self.match(modelicaParser.T__1)
                    self.state = 901
                    self.expression_list()
                    self.state = 906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 907
                self.match(modelicaParser.T__84)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 909
                self.match(modelicaParser.T__85)
                self.state = 910
                self.function_arguments()
                self.state = 911
                self.match(modelicaParser.T__36)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 913
                self.match(modelicaParser.T__17)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i: int = None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterName"):
                listener.enterName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitName"):
                listener.exitName(self)

    def name(self):

        localctx = modelicaParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__86:
                self.state = 916
                self.match(modelicaParser.T__86)

            self.state = 919
            self.match(modelicaParser.IDENT)
            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__86:
                self.state = 920
                self.match(modelicaParser.T__86)
                self.state = 921
                self.match(modelicaParser.IDENT)
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_referenceContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i: int = None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def array_subscripts(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.Array_subscriptsContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.Array_subscriptsContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_component_reference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComponent_reference"):
                listener.enterComponent_reference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComponent_reference"):
                listener.exitComponent_reference(self)

    def component_reference(self):

        localctx = modelicaParser.Component_referenceContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_component_reference)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__86:
                self.state = 927
                self.match(modelicaParser.T__86)

            self.state = 930
            self.match(modelicaParser.IDENT)
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__83:
                self.state = 931
                self.array_subscripts()

            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__86:
                self.state = 934
                self.match(modelicaParser.T__86)
                self.state = 935
                self.match(modelicaParser.IDENT)
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.T__83:
                    self.state = 936
                    self.array_subscripts()

                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_call_argsContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_arguments(self):
            return self.getTypedRuleContext(
                modelicaParser.Function_argumentsContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_function_call_args

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_call_args"):
                listener.enterFunction_call_args(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_call_args"):
                listener.exitFunction_call_args(self)

    def function_call_args(self):

        localctx = modelicaParser.Function_call_argsContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_function_call_args)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(modelicaParser.T__21)
            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    (_la) & ~0x3f) == 0 and (
                    (1 << _la) & (
                        (1 << modelicaParser.T__16) | (
                    1 << modelicaParser.T__17) | (
                        1 << modelicaParser.T__21) | (
                            1 << modelicaParser.T__24) | (
                                1 << modelicaParser.T__45) | (
                                    1 << modelicaParser.T__48))) != 0) or (
                                        (((_la -
                                           66)) & ~0x3f) == 0 and (
                                            (1 << (
                                                _la -
                                                66)) & (
                                                    (1 << (
                                                        modelicaParser.T__65 -
                                                        66)) | (
                                                            1 << (
                                                                modelicaParser.T__72 -
                                                                66)) | (
                                                                    1 << (
                                                                        modelicaParser.T__73 -
                                                                        66)) | (
                                                                            1 << (
                                                                                modelicaParser.T__74 -
                                                                                66)) | (
                                                                                    1 << (
                                                                                        modelicaParser.T__75 -
                                                                                        66)) | (
                                                                                            1 << (
                                                                                                modelicaParser.T__81 -
                                                                                                66)) | (
                                                                                                    1 << (
                                                                                                        modelicaParser.T__82 -
                                                                                                        66)) | (
                                                                                                            1 << (
                                                                                                                modelicaParser.T__83 -
                                                                                                                66)) | (
                                                                                                                    1 << (
                                                                                                                        modelicaParser.T__85 -
                                                                                                                        66)) | (
                                                                                                                            1 << (
                                                                                                                                modelicaParser.T__86 -
                                                                                                                                66)) | (
                                                                                                                                    1 << (
                                                                                                                                        modelicaParser.IDENT -
                                                                                                                                        66)) | (
                                                                                                                                            1 << (
                                                                                                                                                modelicaParser.STRING -
                                                                                                                                                66)) | (
                                                                                                                                                    1 << (
                                                                                                                                                        modelicaParser.UNSIGNED_NUMBER -
                                                                                                                                                        66)))) != 0):
                self.state = 945
                self.function_arguments()

            self.state = 948
            self.match(modelicaParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argumentsContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_argument(self):
            return self.getTypedRuleContext(
                modelicaParser.Function_argumentContext, 0)

        def function_arguments(self):
            return self.getTypedRuleContext(
                modelicaParser.Function_argumentsContext, 0)

        def for_indices(self):
            return self.getTypedRuleContext(
                modelicaParser.For_indicesContext, 0)

        def named_arguments(self):
            return self.getTypedRuleContext(
                modelicaParser.Named_argumentsContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_function_arguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_arguments"):
                listener.enterFunction_arguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_arguments"):
                listener.exitFunction_arguments(self)

    def function_arguments(self):

        localctx = modelicaParser.Function_argumentsContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_function_arguments)
        try:
            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 119, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.function_argument()
                self.state = 955
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__25]:
                    self.state = 951
                    self.match(modelicaParser.T__25)
                    self.state = 952
                    self.function_arguments()
                    pass
                elif token in [modelicaParser.T__56]:
                    self.state = 953
                    self.match(modelicaParser.T__56)
                    self.state = 954
                    self.for_indices()
                    pass
                elif token in [modelicaParser.T__23, modelicaParser.T__36]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 957
                self.named_arguments()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentsContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_argument(self):
            return self.getTypedRuleContext(
                modelicaParser.Named_argumentContext, 0)

        def named_arguments(self):
            return self.getTypedRuleContext(
                modelicaParser.Named_argumentsContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_named_arguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamed_arguments"):
                listener.enterNamed_arguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamed_arguments"):
                listener.exitNamed_arguments(self)

    def named_arguments(self):

        localctx = modelicaParser.Named_argumentsContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_named_arguments)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.named_argument()
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__25:
                self.state = 961
                self.match(modelicaParser.T__25)
                self.state = 962
                self.named_arguments()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def function_argument(self):
            return self.getTypedRuleContext(
                modelicaParser.Function_argumentContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_named_argument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamed_argument"):
                listener.enterNamed_argument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamed_argument"):
                listener.exitNamed_argument(self)

    def named_argument(self):

        localctx = modelicaParser.Named_argumentContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_named_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(modelicaParser.IDENT)
            self.state = 966
            self.match(modelicaParser.T__19)
            self.state = 967
            self.function_argument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argumentContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext, 0)

        def named_arguments(self):
            return self.getTypedRuleContext(
                modelicaParser.Named_argumentsContext, 0)

        def expression(self):
            return self.getTypedRuleContext(
                modelicaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_function_argument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_argument"):
                listener.enterFunction_argument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_argument"):
                listener.exitFunction_argument(self)

    def function_argument(self):

        localctx = modelicaParser.Function_argumentContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_function_argument)
        self._la = 0  # Token type
        try:
            self.state = 978
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 969
                self.match(modelicaParser.T__16)
                self.state = 970
                self.name()
                self.state = 971
                self.match(modelicaParser.T__21)
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == modelicaParser.IDENT:
                    self.state = 972
                    self.named_arguments()

                self.state = 975
                self.match(modelicaParser.T__23)
                pass
            elif token in [modelicaParser.T__17, modelicaParser.T__21, modelicaParser.T__24, modelicaParser.T__45, modelicaParser.T__48, modelicaParser.T__65, modelicaParser.T__72, modelicaParser.T__73, modelicaParser.T__74, modelicaParser.T__75, modelicaParser.T__81, modelicaParser.T__82, modelicaParser.T__83, modelicaParser.T__85, modelicaParser.T__86, modelicaParser.IDENT, modelicaParser.STRING, modelicaParser.UNSIGNED_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 977
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_expression_listContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.ExpressionContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_output_expression_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOutput_expression_list"):
                listener.enterOutput_expression_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOutput_expression_list"):
                listener.exitOutput_expression_list(self)

    def output_expression_list(self):

        localctx = modelicaParser.Output_expression_listContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_output_expression_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    (_la) & ~0x3f) == 0 and (
                    (1 << _la) & (
                        (1 << modelicaParser.T__17) | (
                    1 << modelicaParser.T__21) | (
                        1 << modelicaParser.T__24) | (
                            1 << modelicaParser.T__45) | (
                                1 << modelicaParser.T__48))) != 0) or (
                                    (((_la -
                                       66)) & ~0x3f) == 0 and (
                                        (1 << (
                                            _la -
                                            66)) & (
                                                (1 << (
                                                    modelicaParser.T__65 -
                                                    66)) | (
                                                        1 << (
                                                            modelicaParser.T__72 -
                                                            66)) | (
                                                                1 << (
                                                                    modelicaParser.T__73 -
                                                                    66)) | (
                                                                        1 << (
                                                                            modelicaParser.T__74 -
                                                                            66)) | (
                                                                                1 << (
                                                                                    modelicaParser.T__75 -
                                                                                    66)) | (
                                                                                        1 << (
                                                                                            modelicaParser.T__81 -
                                                                                            66)) | (
                                                                                                1 << (
                                                                                                    modelicaParser.T__82 -
                                                                                                    66)) | (
                                                                                                        1 << (
                                                                                                            modelicaParser.T__83 -
                                                                                                            66)) | (
                                                                                                                1 << (
                                                                                                                    modelicaParser.T__85 -
                                                                                                                    66)) | (
                                                                                                                        1 << (
                                                                                                                            modelicaParser.T__86 -
                                                                                                                            66)) | (
                                                                                                                                1 << (
                                                                                                                                    modelicaParser.IDENT -
                                                                                                                                    66)) | (
                                                                                                                                        1 << (
                                                                                                                                            modelicaParser.STRING -
                                                                                                                                            66)) | (
                                                                                                                                                1 << (
                                                                                                                                                    modelicaParser.UNSIGNED_NUMBER -
                                                                                                                                                    66)))) != 0):
                self.state = 980
                self.expression()

            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__25:
                self.state = 983
                self.match(modelicaParser.T__25)
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        (_la) & ~0x3f) == 0 and (
                        (1 << _la) & (
                            (1 << modelicaParser.T__17) | (
                                1 << modelicaParser.T__21) | (
                        1 << modelicaParser.T__24) | (
                            1 << modelicaParser.T__45) | (
                                1 << modelicaParser.T__48))) != 0) or (
                                    (((_la -
                                       66)) & ~0x3f) == 0 and (
                                        (1 << (
                                            _la -
                                            66)) & (
                                                (1 << (
                                                    modelicaParser.T__65 -
                                                    66)) | (
                                                        1 << (
                                                            modelicaParser.T__72 -
                                                            66)) | (
                                                                1 << (
                                                                    modelicaParser.T__73 -
                                                                    66)) | (
                                                                        1 << (
                                                                            modelicaParser.T__74 -
                                                                            66)) | (
                                                                                1 << (
                                                                                    modelicaParser.T__75 -
                                                                                    66)) | (
                                                                                        1 << (
                                                                                            modelicaParser.T__81 -
                                                                                            66)) | (
                                                                                                1 << (
                                                                                                    modelicaParser.T__82 -
                                                                                                    66)) | (
                                                                                                        1 << (
                                                                                                            modelicaParser.T__83 -
                                                                                                            66)) | (
                                                                                                                1 << (
                                                                                                                    modelicaParser.T__85 -
                                                                                                                    66)) | (
                                                                                                                        1 << (
                                                                                                                            modelicaParser.T__86 -
                                                                                                                            66)) | (
                                                                                                                                1 << (
                                                                                                                                    modelicaParser.IDENT -
                                                                                                                                    66)) | (
                                                                                                                                        1 << (
                                                                                                                                            modelicaParser.STRING -
                                                                                                                                            66)) | (
                                                                                                                                                1 << (
                                                                                                                                                    modelicaParser.UNSIGNED_NUMBER -
                                                                                                                                                    66)))) != 0):
                    self.state = 984
                    self.expression()

                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.ExpressionContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_expression_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression_list"):
                listener.enterExpression_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression_list"):
                listener.exitExpression_list(self)

    def expression_list(self):

        localctx = modelicaParser.Expression_listContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_expression_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.expression()
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__25:
                self.state = 993
                self.match(modelicaParser.T__25)
                self.state = 994
                self.expression()
                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_subscriptsContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    modelicaParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(
                    modelicaParser.SubscriptContext, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_array_subscripts

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArray_subscripts"):
                listener.enterArray_subscripts(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArray_subscripts"):
                listener.exitArray_subscripts(self)

    def array_subscripts(self):

        localctx = modelicaParser.Array_subscriptsContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_array_subscripts)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(modelicaParser.T__83)
            self.state = 1001
            self.subscript()
            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == modelicaParser.T__25:
                self.state = 1002
                self.match(modelicaParser.T__25)
                self.state = 1003
                self.subscript()
                self.state = 1008
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1009
            self.match(modelicaParser.T__84)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(
                modelicaParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_subscript

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubscript"):
                listener.enterSubscript(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubscript"):
                listener.exitSubscript(self)

    def subscript(self):

        localctx = modelicaParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_subscript)
        try:
            self.state = 1013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1011
                self.match(modelicaParser.T__22)
                pass
            elif token in [modelicaParser.T__17, modelicaParser.T__21, modelicaParser.T__24, modelicaParser.T__45, modelicaParser.T__48, modelicaParser.T__65, modelicaParser.T__72, modelicaParser.T__73, modelicaParser.T__74, modelicaParser.T__75, modelicaParser.T__81, modelicaParser.T__82, modelicaParser.T__83, modelicaParser.T__85, modelicaParser.T__86, modelicaParser.IDENT, modelicaParser.STRING, modelicaParser.UNSIGNED_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1012
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommentContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_comment(self):
            return self.getTypedRuleContext(
                modelicaParser.String_commentContext, 0)

        def annotation(self):
            return self.getTypedRuleContext(
                modelicaParser.AnnotationContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_comment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComment"):
                listener.enterComment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComment"):
                listener.exitComment(self)

    def comment(self):

        localctx = modelicaParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_comment)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.string_comment()
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.T__87:
                self.state = 1016
                self.annotation()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_commentContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(modelicaParser.STRING)
            else:
                return self.getToken(modelicaParser.STRING, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_string_comment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_comment"):
                listener.enterString_comment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_comment"):
                listener.exitString_comment(self)

    def string_comment(self):

        localctx = modelicaParser.String_commentContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_string_comment)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == modelicaParser.STRING:
                self.state = 1019
                self.match(modelicaParser.STRING)
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == modelicaParser.T__72:
                    self.state = 1020
                    self.match(modelicaParser.T__72)
                    self.state = 1021
                    self.match(modelicaParser.STRING)
                    self.state = 1026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationContext(ParserRuleContext):

        def __init__(
                self,
                parser,
                parent: ParserRuleContext = None,
                invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_modification(self):
            return self.getTypedRuleContext(
                modelicaParser.Class_modificationContext, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_annotation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnnotation"):
                listener.enterAnnotation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnnotation"):
                listener.exitAnnotation(self)

    def annotation(self):

        localctx = modelicaParser.AnnotationContext(
            self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(modelicaParser.T__87)
            self.state = 1030
            self.class_modification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx
