# Generated from /var/antlrResult/modelica.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3`")
        buf.write("\u0437\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\3\2\7\2\u00a8\n")
        buf.write("\2\f\2\16\2\u00ab\13\2\3\2\5\2\u00ae\n\2\3\2\3\2\3\2\7")
        buf.write("\2\u00b3\n\2\f\2\16\2\u00b6\13\2\3\3\3\3\5\3\u00ba\n\3")
        buf.write("\3\3\3\3\3\4\5\4\u00bf\n\4\3\4\3\4\3\4\3\5\3\5\3\5\5\5")
        buf.write("\u00c7\n\5\3\6\5\6\u00ca\n\6\3\6\3\6\3\6\5\6\u00cf\n\6")
        buf.write("\3\6\3\6\3\6\5\6\u00d4\n\6\3\6\3\6\3\6\3\6\5\6\u00da\n")
        buf.write("\6\3\6\5\6\u00dd\n\6\3\6\3\6\5\6\u00e1\n\6\3\7\3\7\5\7")
        buf.write("\u00e5\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00ee\n\7\3")
        buf.write("\7\5\7\u00f1\n\7\3\7\3\7\3\7\3\7\5\7\u00f7\n\7\3\b\3\b")
        buf.write("\3\b\3\b\3\b\5\b\u00fe\n\b\3\b\5\b\u0101\n\b\3\b\5\b\u0104")
        buf.write("\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u010b\n\b\3\b\5\b\u010e\n")
        buf.write("\b\3\b\3\b\5\b\u0112\n\b\5\b\u0114\n\b\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\7\t\u011f\n\t\f\t\16\t\u0122\13\t")
        buf.write("\3\t\3\t\5\t\u0126\n\t\3\n\5\n\u0129\n\n\3\n\5\n\u012c")
        buf.write("\n\n\3\n\5\n\u012f\n\n\3\13\3\13\3\13\7\13\u0134\n\13")
        buf.write("\f\13\16\13\u0137\13\13\3\f\3\f\5\f\u013b\n\f\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\7\r\u0144\n\r\f\r\16\r\u0147\13\r")
        buf.write("\3\r\3\r\5\r\u014b\n\r\3\r\5\r\u014e\n\r\3\r\5\r\u0151")
        buf.write("\n\r\3\r\5\r\u0154\n\r\3\r\3\r\3\r\5\r\u0159\n\r\3\16")
        buf.write("\3\16\3\17\3\17\3\17\5\17\u0160\n\17\3\17\3\17\3\17\5")
        buf.write("\17\u0165\n\17\3\17\3\17\3\20\7\20\u016a\n\20\f\20\16")
        buf.write("\20\u016d\13\20\3\21\3\21\3\21\5\21\u0172\n\21\3\21\5")
        buf.write("\21\u0175\n\21\3\21\5\21\u0178\n\21\3\21\5\21\u017b\n")
        buf.write("\21\3\21\3\21\5\21\u017f\n\21\3\21\3\21\3\21\5\21\u0184")
        buf.write("\n\21\3\21\3\21\3\21\5\21\u0189\n\21\5\21\u018b\n\21\5")
        buf.write("\21\u018d\n\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u019e\n\22\3")
        buf.write("\22\5\22\u01a1\n\22\3\23\3\23\3\23\7\23\u01a6\n\23\f\23")
        buf.write("\16\23\u01a9\13\23\3\24\3\24\3\24\5\24\u01ae\n\24\3\24")
        buf.write("\5\24\u01b1\n\24\3\25\3\25\3\25\5\25\u01b6\n\25\3\26\5")
        buf.write("\26\u01b9\n\26\3\26\5\26\u01bc\n\26\3\26\5\26\u01bf\n")
        buf.write("\26\3\26\3\26\5\26\u01c3\n\26\3\26\3\26\3\27\3\27\3\30")
        buf.write("\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\33\7\33\u01d2\n")
        buf.write("\33\f\33\16\33\u01d5\13\33\3\34\3\34\5\34\u01d9\n\34\3")
        buf.write("\34\5\34\u01dc\n\34\3\35\3\35\3\35\3\36\3\36\5\36\u01e3")
        buf.write("\n\36\3\36\5\36\u01e6\n\36\3\37\3\37\3\37\5\37\u01eb\n")
        buf.write("\37\3\37\3\37\3\37\3\37\5\37\u01f1\n\37\3 \3 \5 \u01f5")
        buf.write("\n \3 \3 \3!\3!\3!\7!\u01fc\n!\f!\16!\u01ff\13!\3\"\3")
        buf.write("\"\5\"\u0203\n\"\3#\5#\u0206\n#\3#\5#\u0209\n#\3#\3#\5")
        buf.write("#\u020d\n#\3$\3$\5$\u0211\n$\3$\5$\u0214\n$\3%\3%\5%\u0218")
        buf.write("\n%\3%\5%\u021b\n%\3%\3%\5%\u021f\n%\3%\5%\u0222\n%\3")
        buf.write("&\3&\3&\5&\u0227\n&\3&\5&\u022a\n&\3\'\5\'\u022d\n\'\3")
        buf.write("\'\5\'\u0230\n\'\3\'\5\'\u0233\n\'\3\'\3\'\3\'\3(\3(\3")
        buf.write("(\3)\3)\3)\3*\5*\u023f\n*\3*\3*\7*\u0243\n*\f*\16*\u0246")
        buf.write("\13*\3+\5+\u0249\n+\3+\3+\3+\3+\7+\u024f\n+\f+\16+\u0252")
        buf.write("\13+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u025f\n,\3,\5")
        buf.write(",\u0262\n,\3,\3,\3-\3-\3-\3-\5-\u026a\n-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0279\n-\3-\5-\u027c\n-\3")
        buf.write(".\3.\3.\3.\3.\3.\7.\u0284\n.\f.\16.\u0287\13.\3.\3.\3")
        buf.write(".\3.\3.\3.\7.\u028f\n.\f.\16.\u0292\13.\7.\u0294\n.\f")
        buf.write(".\16.\u0297\13.\3.\3.\3.\3.\7.\u029d\n.\f.\16.\u02a0\13")
        buf.write(".\5.\u02a2\n.\3.\3.\3.\3/\3/\3/\3/\3/\3/\7/\u02ad\n/\f")
        buf.write("/\16/\u02b0\13/\3/\3/\3/\3/\3/\3/\7/\u02b8\n/\f/\16/\u02bb")
        buf.write("\13/\7/\u02bd\n/\f/\16/\u02c0\13/\3/\3/\3/\3/\7/\u02c6")
        buf.write("\n/\f/\16/\u02c9\13/\5/\u02cb\n/\3/\3/\3/\3\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\7\60\u02d6\n\60\f\60\16\60\u02d9\13")
        buf.write("\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\7\61")
        buf.write("\u02e4\n\61\f\61\16\61\u02e7\13\61\3\61\3\61\3\61\3\62")
        buf.write("\3\62\3\62\7\62\u02ef\n\62\f\62\16\62\u02f2\13\62\3\63")
        buf.write("\3\63\3\63\5\63\u02f7\n\63\3\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\7\64\u02ff\n\64\f\64\16\64\u0302\13\64\3\64\3\64\3")
        buf.write("\64\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u030d\n\65\f\65")
        buf.write("\16\65\u0310\13\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65")
        buf.write("\u0318\n\65\f\65\16\65\u031b\13\65\7\65\u031d\n\65\f\65")
        buf.write("\16\65\u0320\13\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\7\66\u032b\n\66\f\66\16\66\u032e\13\66\3\66")
        buf.write("\3\66\3\66\3\66\3\66\3\66\7\66\u0336\n\66\f\66\16\66\u0339")
        buf.write("\13\66\7\66\u033b\n\66\f\66\16\66\u033e\13\66\3\66\3\66")
        buf.write("\3\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\38\38\38\38\3")
        buf.write("8\38\38\38\38\38\78\u0354\n8\f8\168\u0357\138\38\38\3")
        buf.write("8\58\u035c\n8\39\39\39\39\39\59\u0363\n9\59\u0365\n9\3")
        buf.write(":\3:\3:\7:\u036a\n:\f:\16:\u036d\13:\3;\3;\3;\7;\u0372")
        buf.write("\n;\f;\16;\u0375\13;\3<\5<\u0378\n<\3<\3<\3=\3=\3=\3=")
        buf.write("\5=\u0380\n=\3>\3>\3?\5?\u0385\n?\3?\3?\3?\3?\7?\u038b")
        buf.write("\n?\f?\16?\u038e\13?\3@\3@\3A\3A\3A\3A\7A\u0396\nA\fA")
        buf.write("\16A\u0399\13A\3B\3B\3C\3C\3C\5C\u03a0\nC\3D\3D\3D\3D")
        buf.write("\3D\3D\3D\5D\u03a9\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7")
        buf.write("D\u03b5\nD\fD\16D\u03b8\13D\3D\3D\3D\3D\3D\3D\3D\5D\u03c1")
        buf.write("\nD\3E\5E\u03c4\nE\3E\3E\3E\7E\u03c9\nE\fE\16E\u03cc\13")
        buf.write("E\3F\5F\u03cf\nF\3F\3F\5F\u03d3\nF\3F\3F\3F\5F\u03d8\n")
        buf.write("F\7F\u03da\nF\fF\16F\u03dd\13F\3G\3G\5G\u03e1\nG\3G\3")
        buf.write("G\3H\3H\3H\3H\3H\5H\u03ea\nH\3H\5H\u03ed\nH\3I\3I\3I\5")
        buf.write("I\u03f2\nI\3J\3J\3J\3J\3K\3K\3K\3K\5K\u03fc\nK\3K\3K\3")
        buf.write("K\5K\u0401\nK\3L\5L\u0404\nL\3L\3L\5L\u0408\nL\7L\u040a")
        buf.write("\nL\fL\16L\u040d\13L\3M\3M\3M\7M\u0412\nM\fM\16M\u0415")
        buf.write("\13M\3N\3N\3N\3N\7N\u041b\nN\fN\16N\u041e\13N\3N\3N\3")
        buf.write("O\3O\5O\u0424\nO\3P\3P\5P\u0428\nP\3Q\3Q\3Q\7Q\u042d\n")
        buf.write("Q\fQ\16Q\u0430\13Q\3R\3R\3S\3S\3S\3S\2\2T\2\4\6\b\n\f")
        buf.write("\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@")
        buf.write("BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\2\n\3\2\21\22\3\2")
        buf.write(")*\3\2+-\3\2./\3\2EJ\3\2KN\4\2%%OQ\3\2RS\2\u049a\2\u00a9")
        buf.write("\3\2\2\2\4\u00b7\3\2\2\2\6\u00be\3\2\2\2\b\u00c6\3\2\2")
        buf.write("\2\n\u00c9\3\2\2\2\f\u00f6\3\2\2\2\16\u0113\3\2\2\2\20")
        buf.write("\u0115\3\2\2\2\22\u0128\3\2\2\2\24\u0130\3\2\2\2\26\u0138")
        buf.write("\3\2\2\2\30\u013c\3\2\2\2\32\u015a\3\2\2\2\34\u015f\3")
        buf.write("\2\2\2\36\u016b\3\2\2\2 \u018c\3\2\2\2\"\u0190\3\2\2\2")
        buf.write("$\u01a2\3\2\2\2&\u01aa\3\2\2\2(\u01b2\3\2\2\2*\u01b8\3")
        buf.write("\2\2\2,\u01c6\3\2\2\2.\u01c8\3\2\2\2\60\u01ca\3\2\2\2")
        buf.write("\62\u01cc\3\2\2\2\64\u01ce\3\2\2\2\66\u01d6\3\2\2\28\u01dd")
        buf.write("\3\2\2\2:\u01e0\3\2\2\2<\u01f0\3\2\2\2>\u01f2\3\2\2\2")
        buf.write("@\u01f8\3\2\2\2B\u0202\3\2\2\2D\u0205\3\2\2\2F\u020e\3")
        buf.write("\2\2\2H\u0215\3\2\2\2J\u0223\3\2\2\2L\u022c\3\2\2\2N\u0237")
        buf.write("\3\2\2\2P\u023a\3\2\2\2R\u023e\3\2\2\2T\u0248\3\2\2\2")
        buf.write("V\u025e\3\2\2\2X\u0278\3\2\2\2Z\u027d\3\2\2\2\\\u02a6")
        buf.write("\3\2\2\2^\u02cf\3\2\2\2`\u02dd\3\2\2\2b\u02eb\3\2\2\2")
        buf.write("d\u02f3\3\2\2\2f\u02f8\3\2\2\2h\u0306\3\2\2\2j\u0324\3")
        buf.write("\2\2\2l\u0342\3\2\2\2n\u035b\3\2\2\2p\u035d\3\2\2\2r\u0366")
        buf.write("\3\2\2\2t\u036e\3\2\2\2v\u0377\3\2\2\2x\u037b\3\2\2\2")
        buf.write("z\u0381\3\2\2\2|\u0384\3\2\2\2~\u038f\3\2\2\2\u0080\u0391")
        buf.write("\3\2\2\2\u0082\u039a\3\2\2\2\u0084\u039c\3\2\2\2\u0086")
        buf.write("\u03c0\3\2\2\2\u0088\u03c3\3\2\2\2\u008a\u03ce\3\2\2\2")
        buf.write("\u008c\u03de\3\2\2\2\u008e\u03ec\3\2\2\2\u0090\u03ee\3")
        buf.write("\2\2\2\u0092\u03f3\3\2\2\2\u0094\u0400\3\2\2\2\u0096\u0403")
        buf.write("\3\2\2\2\u0098\u040e\3\2\2\2\u009a\u0416\3\2\2\2\u009c")
        buf.write("\u0423\3\2\2\2\u009e\u0425\3\2\2\2\u00a0\u0429\3\2\2\2")
        buf.write("\u00a2\u0431\3\2\2\2\u00a4\u0433\3\2\2\2\u00a6\u00a8\5")
        buf.write("\4\3\2\u00a7\u00a6\3\2\2\2\u00a8\u00ab\3\2\2\2\u00a9\u00a7")
        buf.write("\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00b4\3\2\2\2\u00ab")
        buf.write("\u00a9\3\2\2\2\u00ac\u00ae\7\3\2\2\u00ad\u00ac\3\2\2\2")
        buf.write("\u00ad\u00ae\3\2\2\2\u00ae\u00af\3\2\2\2\u00af\u00b0\5")
        buf.write("\6\4\2\u00b0\u00b1\7\4\2\2\u00b1\u00b3\3\2\2\2\u00b2\u00ad")
        buf.write("\3\2\2\2\u00b3\u00b6\3\2\2\2\u00b4\u00b2\3\2\2\2\u00b4")
        buf.write("\u00b5\3\2\2\2\u00b5\3\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b7")
        buf.write("\u00b9\7\5\2\2\u00b8\u00ba\5\u0088E\2\u00b9\u00b8\3\2")
        buf.write("\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00bb\3\2\2\2\u00bb\u00bc")
        buf.write("\7\4\2\2\u00bc\5\3\2\2\2\u00bd\u00bf\7\6\2\2\u00be\u00bd")
        buf.write("\3\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0")
        buf.write("\u00c1\5\n\6\2\u00c1\u00c2\5\b\5\2\u00c2\7\3\2\2\2\u00c3")
        buf.write("\u00c7\5\f\7\2\u00c4\u00c7\5\16\b\2\u00c5\u00c7\5\20\t")
        buf.write("\2\u00c6\u00c3\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c6\u00c5")
        buf.write("\3\2\2\2\u00c7\t\3\2\2\2\u00c8\u00ca\7\7\2\2\u00c9\u00c8")
        buf.write("\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca\u00e0\3\2\2\2\u00cb")
        buf.write("\u00e1\7\b\2\2\u00cc\u00e1\7\t\2\2\u00cd\u00cf\7\n\2\2")
        buf.write("\u00ce\u00cd\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d0\3")
        buf.write("\2\2\2\u00d0\u00e1\7\13\2\2\u00d1\u00e1\7\f\2\2\u00d2")
        buf.write("\u00d4\7\r\2\2\u00d3\u00d2\3\2\2\2\u00d3\u00d4\3\2\2\2")
        buf.write("\u00d4\u00d5\3\2\2\2\u00d5\u00e1\7\16\2\2\u00d6\u00e1")
        buf.write("\7\17\2\2\u00d7\u00e1\7\20\2\2\u00d8\u00da\t\2\2\2\u00d9")
        buf.write("\u00d8\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00dc\3\2\2\2")
        buf.write("\u00db\u00dd\7\n\2\2\u00dc\u00db\3\2\2\2\u00dc\u00dd\3")
        buf.write("\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00e1\7\23\2\2\u00df")
        buf.write("\u00e1\7\n\2\2\u00e0\u00cb\3\2\2\2\u00e0\u00cc\3\2\2\2")
        buf.write("\u00e0\u00ce\3\2\2\2\u00e0\u00d1\3\2\2\2\u00e0\u00d3\3")
        buf.write("\2\2\2\u00e0\u00d6\3\2\2\2\u00e0\u00d7\3\2\2\2\u00e0\u00d9")
        buf.write("\3\2\2\2\u00e0\u00df\3\2\2\2\u00e1\13\3\2\2\2\u00e2\u00e4")
        buf.write("\7[\2\2\u00e3\u00e5\5\u00a0Q\2\u00e4\u00e3\3\2\2\2\u00e4")
        buf.write("\u00e5\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e7\5\30\r")
        buf.write("\2\u00e7\u00e8\7\24\2\2\u00e8\u00e9\7[\2\2\u00e9\u00f7")
        buf.write("\3\2\2\2\u00ea\u00eb\7\25\2\2\u00eb\u00ed\7[\2\2\u00ec")
        buf.write("\u00ee\5> \2\u00ed\u00ec\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee")
        buf.write("\u00f0\3\2\2\2\u00ef\u00f1\5\u00a0Q\2\u00f0\u00ef\3\2")
        buf.write("\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f3")
        buf.write("\5\30\r\2\u00f3\u00f4\7\24\2\2\u00f4\u00f5\7[\2\2\u00f5")
        buf.write("\u00f7\3\2\2\2\u00f6\u00e2\3\2\2\2\u00f6\u00ea\3\2\2\2")
        buf.write("\u00f7\r\3\2\2\2\u00f8\u00f9\7[\2\2\u00f9\u00fa\7\26\2")
        buf.write("\2\u00fa\u00fb\5\22\n\2\u00fb\u00fd\5\u0088E\2\u00fc\u00fe")
        buf.write("\5\u009aN\2\u00fd\u00fc\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe")
        buf.write("\u0100\3\2\2\2\u00ff\u0101\5> \2\u0100\u00ff\3\2\2\2\u0100")
        buf.write("\u0101\3\2\2\2\u0101\u0103\3\2\2\2\u0102\u0104\5\u009e")
        buf.write("P\2\u0103\u0102\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0114")
        buf.write("\3\2\2\2\u0105\u0106\7[\2\2\u0106\u0107\7\26\2\2\u0107")
        buf.write("\u0108\7\27\2\2\u0108\u010d\7\30\2\2\u0109\u010b\5\24")
        buf.write("\13\2\u010a\u0109\3\2\2\2\u010a\u010b\3\2\2\2\u010b\u010e")
        buf.write("\3\2\2\2\u010c\u010e\7\31\2\2\u010d\u010a\3\2\2\2\u010d")
        buf.write("\u010c\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0111\7\32\2")
        buf.write("\2\u0110\u0112\5\u009eP\2\u0111\u0110\3\2\2\2\u0111\u0112")
        buf.write("\3\2\2\2\u0112\u0114\3\2\2\2\u0113\u00f8\3\2\2\2\u0113")
        buf.write("\u0105\3\2\2\2\u0114\17\3\2\2\2\u0115\u0116\7[\2\2\u0116")
        buf.write("\u0117\7\26\2\2\u0117\u0118\7\33\2\2\u0118\u0119\7\30")
        buf.write("\2\2\u0119\u011a\5\u0088E\2\u011a\u011b\7\34\2\2\u011b")
        buf.write("\u0120\7[\2\2\u011c\u011d\7\34\2\2\u011d\u011f\7[\2\2")
        buf.write("\u011e\u011c\3\2\2\2\u011f\u0122\3\2\2\2\u0120\u011e\3")
        buf.write("\2\2\2\u0120\u0121\3\2\2\2\u0121\u0123\3\2\2\2\u0122\u0120")
        buf.write("\3\2\2\2\u0123\u0125\7\32\2\2\u0124\u0126\5\u009eP\2\u0125")
        buf.write("\u0124\3\2\2\2\u0125\u0126\3\2\2\2\u0126\21\3\2\2\2\u0127")
        buf.write("\u0129\5,\27\2\u0128\u0127\3\2\2\2\u0128\u0129\3\2\2\2")
        buf.write("\u0129\u012b\3\2\2\2\u012a\u012c\5.\30\2\u012b\u012a\3")
        buf.write("\2\2\2\u012b\u012c\3\2\2\2\u012c\u012e\3\2\2\2\u012d\u012f")
        buf.write("\5\60\31\2\u012e\u012d\3\2\2\2\u012e\u012f\3\2\2\2\u012f")
        buf.write("\23\3\2\2\2\u0130\u0135\5\26\f\2\u0131\u0132\7\34\2\2")
        buf.write("\u0132\u0134\5\26\f\2\u0133\u0131\3\2\2\2\u0134\u0137")
        buf.write("\3\2\2\2\u0135\u0133\3\2\2\2\u0135\u0136\3\2\2\2\u0136")
        buf.write("\25\3\2\2\2\u0137\u0135\3\2\2\2\u0138\u013a\7[\2\2\u0139")
        buf.write("\u013b\5\u009eP\2\u013a\u0139\3\2\2\2\u013a\u013b\3\2")
        buf.write("\2\2\u013b\27\3\2\2\2\u013c\u0145\5\36\20\2\u013d\u013e")
        buf.write("\7\35\2\2\u013e\u0144\5\36\20\2\u013f\u0140\7\36\2\2\u0140")
        buf.write("\u0144\5\36\20\2\u0141\u0144\5R*\2\u0142\u0144\5T+\2\u0143")
        buf.write("\u013d\3\2\2\2\u0143\u013f\3\2\2\2\u0143\u0141\3\2\2\2")
        buf.write("\u0143\u0142\3\2\2\2\u0144\u0147\3\2\2\2\u0145\u0143\3")
        buf.write("\2\2\2\u0145\u0146\3\2\2\2\u0146\u0153\3\2\2\2\u0147\u0145")
        buf.write("\3\2\2\2\u0148\u014a\7\37\2\2\u0149\u014b\5\32\16\2\u014a")
        buf.write("\u0149\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014d\3\2\2\2")
        buf.write("\u014c\u014e\5\34\17\2\u014d\u014c\3\2\2\2\u014d\u014e")
        buf.write("\3\2\2\2\u014e\u0150\3\2\2\2\u014f\u0151\5\u00a4S\2\u0150")
        buf.write("\u014f\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0152\3\2\2\2")
        buf.write("\u0152\u0154\7\4\2\2\u0153\u0148\3\2\2\2\u0153\u0154\3")
        buf.write("\2\2\2\u0154\u0158\3\2\2\2\u0155\u0156\5\u00a2R\2\u0156")
        buf.write("\u0157\7\4\2\2\u0157\u0159\3\2\2\2\u0158\u0155\3\2\2\2")
        buf.write("\u0158\u0159\3\2\2\2\u0159\31\3\2\2\2\u015a\u015b\7\\")
        buf.write("\2\2\u015b\33\3\2\2\2\u015c\u015d\5\u008aF\2\u015d\u015e")
        buf.write("\7\26\2\2\u015e\u0160\3\2\2\2\u015f\u015c\3\2\2\2\u015f")
        buf.write("\u0160\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u0162\7[\2\2")
        buf.write("\u0162\u0164\7\30\2\2\u0163\u0165\5\u0098M\2\u0164\u0163")
        buf.write("\3\2\2\2\u0164\u0165\3\2\2\2\u0165\u0166\3\2\2\2\u0166")
        buf.write("\u0167\7\32\2\2\u0167\35\3\2\2\2\u0168\u016a\5 \21\2\u0169")
        buf.write("\u0168\3\2\2\2\u016a\u016d\3\2\2\2\u016b\u0169\3\2\2\2")
        buf.write("\u016b\u016c\3\2\2\2\u016c\37\3\2\2\2\u016d\u016b\3\2")
        buf.write("\2\2\u016e\u018d\5\"\22\2\u016f\u018d\5&\24\2\u0170\u0172")
        buf.write("\7 \2\2\u0171\u0170\3\2\2\2\u0171\u0172\3\2\2\2\u0172")
        buf.write("\u0174\3\2\2\2\u0173\u0175\7\3\2\2\u0174\u0173\3\2\2\2")
        buf.write("\u0174\u0175\3\2\2\2\u0175\u0177\3\2\2\2\u0176\u0178\7")
        buf.write("!\2\2\u0177\u0176\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u017a")
        buf.write("\3\2\2\2\u0179\u017b\7\"\2\2\u017a\u0179\3\2\2\2\u017a")
        buf.write("\u017b\3\2\2\2\u017b\u018a\3\2\2\2\u017c\u017f\5\6\4\2")
        buf.write("\u017d\u017f\5*\26\2\u017e\u017c\3\2\2\2\u017e\u017d\3")
        buf.write("\2\2\2\u017f\u018b\3\2\2\2\u0180\u0183\7#\2\2\u0181\u0184")
        buf.write("\5\6\4\2\u0182\u0184\5*\26\2\u0183\u0181\3\2\2\2\u0183")
        buf.write("\u0182\3\2\2\2\u0184\u0188\3\2\2\2\u0185\u0186\5(\25\2")
        buf.write("\u0186\u0187\5\u009eP\2\u0187\u0189\3\2\2\2\u0188\u0185")
        buf.write("\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018b\3\2\2\2\u018a")
        buf.write("\u017e\3\2\2\2\u018a\u0180\3\2\2\2\u018b\u018d\3\2\2\2")
        buf.write("\u018c\u016e\3\2\2\2\u018c\u016f\3\2\2\2\u018c\u0171\3")
        buf.write("\2\2\2\u018d\u018e\3\2\2\2\u018e\u018f\7\4\2\2\u018f!")
        buf.write("\3\2\2\2\u0190\u019d\7$\2\2\u0191\u0192\7[\2\2\u0192\u0193")
        buf.write("\7\26\2\2\u0193\u019e\5\u0088E\2\u0194\u0195\5\u0088E")
        buf.write("\2\u0195\u0196\7%\2\2\u0196\u019e\3\2\2\2\u0197\u0198")
        buf.write("\5\u0088E\2\u0198\u0199\7&\2\2\u0199\u019a\5$\23\2\u019a")
        buf.write("\u019b\7\'\2\2\u019b\u019e\3\2\2\2\u019c\u019e\5\u0088")
        buf.write("E\2\u019d\u0191\3\2\2\2\u019d\u0194\3\2\2\2\u019d\u0197")
        buf.write("\3\2\2\2\u019d\u019c\3\2\2\2\u019e\u01a0\3\2\2\2\u019f")
        buf.write("\u01a1\5\u009eP\2\u01a0\u019f\3\2\2\2\u01a0\u01a1\3\2")
        buf.write("\2\2\u01a1#\3\2\2\2\u01a2\u01a7\7[\2\2\u01a3\u01a4\7\34")
        buf.write("\2\2\u01a4\u01a6\7[\2\2\u01a5\u01a3\3\2\2\2\u01a6\u01a9")
        buf.write("\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8")
        buf.write("%\3\2\2\2\u01a9\u01a7\3\2\2\2\u01aa\u01ab\7\25\2\2\u01ab")
        buf.write("\u01ad\5\u0088E\2\u01ac\u01ae\5> \2\u01ad\u01ac\3\2\2")
        buf.write("\2\u01ad\u01ae\3\2\2\2\u01ae\u01b0\3\2\2\2\u01af\u01b1")
        buf.write("\5\u00a4S\2\u01b0\u01af\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1")
        buf.write("\'\3\2\2\2\u01b2\u01b3\7(\2\2\u01b3\u01b5\5\u0088E\2\u01b4")
        buf.write("\u01b6\5> \2\u01b5\u01b4\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6")
        buf.write(")\3\2\2\2\u01b7\u01b9\5,\27\2\u01b8\u01b7\3\2\2\2\u01b8")
        buf.write("\u01b9\3\2\2\2\u01b9\u01bb\3\2\2\2\u01ba\u01bc\5.\30\2")
        buf.write("\u01bb\u01ba\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01be\3")
        buf.write("\2\2\2\u01bd\u01bf\5\60\31\2\u01be\u01bd\3\2\2\2\u01be")
        buf.write("\u01bf\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c2\5\62\32")
        buf.write("\2\u01c1\u01c3\5\u009aN\2\u01c2\u01c1\3\2\2\2\u01c2\u01c3")
        buf.write("\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c5\5\64\33\2\u01c5")
        buf.write("+\3\2\2\2\u01c6\u01c7\t\3\2\2\u01c7-\3\2\2\2\u01c8\u01c9")
        buf.write("\t\4\2\2\u01c9/\3\2\2\2\u01ca\u01cb\t\5\2\2\u01cb\61\3")
        buf.write("\2\2\2\u01cc\u01cd\5\u0088E\2\u01cd\63\3\2\2\2\u01ce\u01d3")
        buf.write("\5\66\34\2\u01cf\u01d0\7\34\2\2\u01d0\u01d2\5\66\34\2")
        buf.write("\u01d1\u01cf\3\2\2\2\u01d2\u01d5\3\2\2\2\u01d3\u01d1\3")
        buf.write("\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\65\3\2\2\2\u01d5\u01d3")
        buf.write("\3\2\2\2\u01d6\u01d8\5:\36\2\u01d7\u01d9\58\35\2\u01d8")
        buf.write("\u01d7\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01db\3\2\2\2")
        buf.write("\u01da\u01dc\5\u009eP\2\u01db\u01da\3\2\2\2\u01db\u01dc")
        buf.write("\3\2\2\2\u01dc\67\3\2\2\2\u01dd\u01de\7\60\2\2\u01de\u01df")
        buf.write("\5n8\2\u01df9\3\2\2\2\u01e0\u01e2\7[\2\2\u01e1\u01e3\5")
        buf.write("\u009aN\2\u01e2\u01e1\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3")
        buf.write("\u01e5\3\2\2\2\u01e4\u01e6\5<\37\2\u01e5\u01e4\3\2\2\2")
        buf.write("\u01e5\u01e6\3\2\2\2\u01e6;\3\2\2\2\u01e7\u01ea\5> \2")
        buf.write("\u01e8\u01e9\7\26\2\2\u01e9\u01eb\5n8\2\u01ea\u01e8\3")
        buf.write("\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01f1\3\2\2\2\u01ec\u01ed")
        buf.write("\7\26\2\2\u01ed\u01f1\5n8\2\u01ee\u01ef\7\61\2\2\u01ef")
        buf.write("\u01f1\5n8\2\u01f0\u01e7\3\2\2\2\u01f0\u01ec\3\2\2\2\u01f0")
        buf.write("\u01ee\3\2\2\2\u01f1=\3\2\2\2\u01f2\u01f4\7\30\2\2\u01f3")
        buf.write("\u01f5\5@!\2\u01f4\u01f3\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5")
        buf.write("\u01f6\3\2\2\2\u01f6\u01f7\7\32\2\2\u01f7?\3\2\2\2\u01f8")
        buf.write("\u01fd\5B\"\2\u01f9\u01fa\7\34\2\2\u01fa\u01fc\5B\"\2")
        buf.write("\u01fb\u01f9\3\2\2\2\u01fc\u01ff\3\2\2\2\u01fd\u01fb\3")
        buf.write("\2\2\2\u01fd\u01fe\3\2\2\2\u01feA\3\2\2\2\u01ff\u01fd")
        buf.write("\3\2\2\2\u0200\u0203\5D#\2\u0201\u0203\5H%\2\u0202\u0200")
        buf.write("\3\2\2\2\u0202\u0201\3\2\2\2\u0203C\3\2\2\2\u0204\u0206")
        buf.write("\7\62\2\2\u0205\u0204\3\2\2\2\u0205\u0206\3\2\2\2\u0206")
        buf.write("\u0208\3\2\2\2\u0207\u0209\7\3\2\2\u0208\u0207\3\2\2\2")
        buf.write("\u0208\u0209\3\2\2\2\u0209\u020c\3\2\2\2\u020a\u020d\5")
        buf.write("F$\2\u020b\u020d\5J&\2\u020c\u020a\3\2\2\2\u020c\u020b")
        buf.write("\3\2\2\2\u020dE\3\2\2\2\u020e\u0210\5\u0088E\2\u020f\u0211")
        buf.write("\5<\37\2\u0210\u020f\3\2\2\2\u0210\u0211\3\2\2\2\u0211")
        buf.write("\u0213\3\2\2\2\u0212\u0214\5\u00a0Q\2\u0213\u0212\3\2")
        buf.write("\2\2\u0213\u0214\3\2\2\2\u0214G\3\2\2\2\u0215\u0217\7")
        buf.write(" \2\2\u0216\u0218\7\62\2\2\u0217\u0216\3\2\2\2\u0217\u0218")
        buf.write("\3\2\2\2\u0218\u021a\3\2\2\2\u0219\u021b\7\3\2\2\u021a")
        buf.write("\u0219\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u0221\3\2\2\2")
        buf.write("\u021c\u021f\5P)\2\u021d\u021f\5L\'\2\u021e\u021c\3\2")
        buf.write("\2\2\u021e\u021d\3\2\2\2\u021f\u0222\3\2\2\2\u0220\u0222")
        buf.write("\5J&\2\u0221\u021e\3\2\2\2\u0221\u0220\3\2\2\2\u0222I")
        buf.write("\3\2\2\2\u0223\u0226\7#\2\2\u0224\u0227\5P)\2\u0225\u0227")
        buf.write("\5L\'\2\u0226\u0224\3\2\2\2\u0226\u0225\3\2\2\2\u0227")
        buf.write("\u0229\3\2\2\2\u0228\u022a\5(\25\2\u0229\u0228\3\2\2\2")
        buf.write("\u0229\u022a\3\2\2\2\u022aK\3\2\2\2\u022b\u022d\5,\27")
        buf.write("\2\u022c\u022b\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022f")
        buf.write("\3\2\2\2\u022e\u0230\5.\30\2\u022f\u022e\3\2\2\2\u022f")
        buf.write("\u0230\3\2\2\2\u0230\u0232\3\2\2\2\u0231\u0233\5\60\31")
        buf.write("\2\u0232\u0231\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0234")
        buf.write("\3\2\2\2\u0234\u0235\5\62\32\2\u0235\u0236\5N(\2\u0236")
        buf.write("M\3\2\2\2\u0237\u0238\5:\36\2\u0238\u0239\5\u009eP\2\u0239")
        buf.write("O\3\2\2\2\u023a\u023b\5\n\6\2\u023b\u023c\5\16\b\2\u023c")
        buf.write("Q\3\2\2\2\u023d\u023f\7\63\2\2\u023e\u023d\3\2\2\2\u023e")
        buf.write("\u023f\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0244\7\64\2")
        buf.write("\2\u0241\u0243\5V,\2\u0242\u0241\3\2\2\2\u0243\u0246\3")
        buf.write("\2\2\2\u0244\u0242\3\2\2\2\u0244\u0245\3\2\2\2\u0245S")
        buf.write("\3\2\2\2\u0246\u0244\3\2\2\2\u0247\u0249\7\63\2\2\u0248")
        buf.write("\u0247\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u024a\3\2\2\2")
        buf.write("\u024a\u0250\7\65\2\2\u024b\u024c\5X-\2\u024c\u024d\7")
        buf.write("\4\2\2\u024d\u024f\3\2\2\2\u024e\u024b\3\2\2\2\u024f\u0252")
        buf.write("\3\2\2\2\u0250\u024e\3\2\2\2\u0250\u0251\3\2\2\2\u0251")
        buf.write("U\3\2\2\2\u0252\u0250\3\2\2\2\u0253\u0254\5p9\2\u0254")
        buf.write("\u0255\7\26\2\2\u0255\u0256\5n8\2\u0256\u025f\3\2\2\2")
        buf.write("\u0257\u025f\5Z.\2\u0258\u025f\5^\60\2\u0259\u025f\5l")
        buf.write("\67\2\u025a\u025f\5h\65\2\u025b\u025c\5\u0088E\2\u025c")
        buf.write("\u025d\5\u008cG\2\u025d\u025f\3\2\2\2\u025e\u0253\3\2")
        buf.write("\2\2\u025e\u0257\3\2\2\2\u025e\u0258\3\2\2\2\u025e\u0259")
        buf.write("\3\2\2\2\u025e\u025a\3\2\2\2\u025e\u025b\3\2\2\2\u025f")
        buf.write("\u0261\3\2\2\2\u0260\u0262\5\u009eP\2\u0261\u0260\3\2")
        buf.write("\2\2\u0261\u0262\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0264")
        buf.write("\7\4\2\2\u0264W\3\2\2\2\u0265\u0269\5\u008aF\2\u0266\u0267")
        buf.write("\7\61\2\2\u0267\u026a\5n8\2\u0268\u026a\5\u008cG\2\u0269")
        buf.write("\u0266\3\2\2\2\u0269\u0268\3\2\2\2\u026a\u0279\3\2\2\2")
        buf.write("\u026b\u026c\7\30\2\2\u026c\u026d\5\u0096L\2\u026d\u026e")
        buf.write("\7\32\2\2\u026e\u026f\7\61\2\2\u026f\u0270\5\u008aF\2")
        buf.write("\u0270\u0271\5\u008cG\2\u0271\u0279\3\2\2\2\u0272\u0279")
        buf.write("\7\66\2\2\u0273\u0279\7\67\2\2\u0274\u0279\5\\/\2\u0275")
        buf.write("\u0279\5`\61\2\u0276\u0279\5f\64\2\u0277\u0279\5j\66\2")
        buf.write("\u0278\u0265\3\2\2\2\u0278\u026b\3\2\2\2\u0278\u0272\3")
        buf.write("\2\2\2\u0278\u0273\3\2\2\2\u0278\u0274\3\2\2\2\u0278\u0275")
        buf.write("\3\2\2\2\u0278\u0276\3\2\2\2\u0278\u0277\3\2\2\2\u0279")
        buf.write("\u027b\3\2\2\2\u027a\u027c\5\u009eP\2\u027b\u027a\3\2")
        buf.write("\2\2\u027b\u027c\3\2\2\2\u027cY\3\2\2\2\u027d\u027e\7")
        buf.write("\60\2\2\u027e\u027f\5n8\2\u027f\u0285\78\2\2\u0280\u0281")
        buf.write("\5V,\2\u0281\u0282\7\4\2\2\u0282\u0284\3\2\2\2\u0283\u0280")
        buf.write("\3\2\2\2\u0284\u0287\3\2\2\2\u0285\u0283\3\2\2\2\u0285")
        buf.write("\u0286\3\2\2\2\u0286\u0295\3\2\2\2\u0287\u0285\3\2\2\2")
        buf.write("\u0288\u0289\79\2\2\u0289\u028a\5n8\2\u028a\u0290\78\2")
        buf.write("\2\u028b\u028c\5V,\2\u028c\u028d\7\4\2\2\u028d\u028f\3")
        buf.write("\2\2\2\u028e\u028b\3\2\2\2\u028f\u0292\3\2\2\2\u0290\u028e")
        buf.write("\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0294\3\2\2\2\u0292")
        buf.write("\u0290\3\2\2\2\u0293\u0288\3\2\2\2\u0294\u0297\3\2\2\2")
        buf.write("\u0295\u0293\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u02a1\3")
        buf.write("\2\2\2\u0297\u0295\3\2\2\2\u0298\u029e\7:\2\2\u0299\u029a")
        buf.write("\5V,\2\u029a\u029b\7\4\2\2\u029b\u029d\3\2\2\2\u029c\u0299")
        buf.write("\3\2\2\2\u029d\u02a0\3\2\2\2\u029e\u029c\3\2\2\2\u029e")
        buf.write("\u029f\3\2\2\2\u029f\u02a2\3\2\2\2\u02a0\u029e\3\2\2\2")
        buf.write("\u02a1\u0298\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a3\3")
        buf.write("\2\2\2\u02a3\u02a4\7\24\2\2\u02a4\u02a5\7\60\2\2\u02a5")
        buf.write("[\3\2\2\2\u02a6\u02a7\7\60\2\2\u02a7\u02a8\5n8\2\u02a8")
        buf.write("\u02ae\78\2\2\u02a9\u02aa\5X-\2\u02aa\u02ab\7\4\2\2\u02ab")
        buf.write("\u02ad\3\2\2\2\u02ac\u02a9\3\2\2\2\u02ad\u02b0\3\2\2\2")
        buf.write("\u02ae\u02ac\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02be\3")
        buf.write("\2\2\2\u02b0\u02ae\3\2\2\2\u02b1\u02b2\79\2\2\u02b2\u02b3")
        buf.write("\5n8\2\u02b3\u02b9\78\2\2\u02b4\u02b5\5X-\2\u02b5\u02b6")
        buf.write("\7\4\2\2\u02b6\u02b8\3\2\2\2\u02b7\u02b4\3\2\2\2\u02b8")
        buf.write("\u02bb\3\2\2\2\u02b9\u02b7\3\2\2\2\u02b9\u02ba\3\2\2\2")
        buf.write("\u02ba\u02bd\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bc\u02b1\3")
        buf.write("\2\2\2\u02bd\u02c0\3\2\2\2\u02be\u02bc\3\2\2\2\u02be\u02bf")
        buf.write("\3\2\2\2\u02bf\u02ca\3\2\2\2\u02c0\u02be\3\2\2\2\u02c1")
        buf.write("\u02c7\7:\2\2\u02c2\u02c3\5X-\2\u02c3\u02c4\7\4\2\2\u02c4")
        buf.write("\u02c6\3\2\2\2\u02c5\u02c2\3\2\2\2\u02c6\u02c9\3\2\2\2")
        buf.write("\u02c7\u02c5\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02cb\3")
        buf.write("\2\2\2\u02c9\u02c7\3\2\2\2\u02ca\u02c1\3\2\2\2\u02ca\u02cb")
        buf.write("\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd\7\24\2\2\u02cd")
        buf.write("\u02ce\7\60\2\2\u02ce]\3\2\2\2\u02cf\u02d0\7;\2\2\u02d0")
        buf.write("\u02d1\5b\62\2\u02d1\u02d7\7<\2\2\u02d2\u02d3\5V,\2\u02d3")
        buf.write("\u02d4\7\4\2\2\u02d4\u02d6\3\2\2\2\u02d5\u02d2\3\2\2\2")
        buf.write("\u02d6\u02d9\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d7\u02d8\3")
        buf.write("\2\2\2\u02d8\u02da\3\2\2\2\u02d9\u02d7\3\2\2\2\u02da\u02db")
        buf.write("\7\24\2\2\u02db\u02dc\7;\2\2\u02dc_\3\2\2\2\u02dd\u02de")
        buf.write("\7;\2\2\u02de\u02df\5b\62\2\u02df\u02e5\7<\2\2\u02e0\u02e1")
        buf.write("\5X-\2\u02e1\u02e2\7\4\2\2\u02e2\u02e4\3\2\2\2\u02e3\u02e0")
        buf.write("\3\2\2\2\u02e4\u02e7\3\2\2\2\u02e5\u02e3\3\2\2\2\u02e5")
        buf.write("\u02e6\3\2\2\2\u02e6\u02e8\3\2\2\2\u02e7\u02e5\3\2\2\2")
        buf.write("\u02e8\u02e9\7\24\2\2\u02e9\u02ea\7;\2\2\u02eaa\3\2\2")
        buf.write("\2\u02eb\u02f0\5d\63\2\u02ec\u02ed\7\34\2\2\u02ed\u02ef")
        buf.write("\5d\63\2\u02ee\u02ec\3\2\2\2\u02ef\u02f2\3\2\2\2\u02f0")
        buf.write("\u02ee\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1c\3\2\2\2\u02f2")
        buf.write("\u02f0\3\2\2\2\u02f3\u02f6\7[\2\2\u02f4\u02f5\7=\2\2\u02f5")
        buf.write("\u02f7\5n8\2\u02f6\u02f4\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7")
        buf.write("e\3\2\2\2\u02f8\u02f9\7>\2\2\u02f9\u02fa\5n8\2\u02fa\u0300")
        buf.write("\7<\2\2\u02fb\u02fc\5X-\2\u02fc\u02fd\7\4\2\2\u02fd\u02ff")
        buf.write("\3\2\2\2\u02fe\u02fb\3\2\2\2\u02ff\u0302\3\2\2\2\u0300")
        buf.write("\u02fe\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u0303\3\2\2\2")
        buf.write("\u0302\u0300\3\2\2\2\u0303\u0304\7\24\2\2\u0304\u0305")
        buf.write("\7>\2\2\u0305g\3\2\2\2\u0306\u0307\7?\2\2\u0307\u0308")
        buf.write("\5n8\2\u0308\u030e\78\2\2\u0309\u030a\5V,\2\u030a\u030b")
        buf.write("\7\4\2\2\u030b\u030d\3\2\2\2\u030c\u0309\3\2\2\2\u030d")
        buf.write("\u0310\3\2\2\2\u030e\u030c\3\2\2\2\u030e\u030f\3\2\2\2")
        buf.write("\u030f\u031e\3\2\2\2\u0310\u030e\3\2\2\2\u0311\u0312\7")
        buf.write("@\2\2\u0312\u0313\5n8\2\u0313\u0319\78\2\2\u0314\u0315")
        buf.write("\5V,\2\u0315\u0316\7\4\2\2\u0316\u0318\3\2\2\2\u0317\u0314")
        buf.write("\3\2\2\2\u0318\u031b\3\2\2\2\u0319\u0317\3\2\2\2\u0319")
        buf.write("\u031a\3\2\2\2\u031a\u031d\3\2\2\2\u031b\u0319\3\2\2\2")
        buf.write("\u031c\u0311\3\2\2\2\u031d\u0320\3\2\2\2\u031e\u031c\3")
        buf.write("\2\2\2\u031e\u031f\3\2\2\2\u031f\u0321\3\2\2\2\u0320\u031e")
        buf.write("\3\2\2\2\u0321\u0322\7\24\2\2\u0322\u0323\7?\2\2\u0323")
        buf.write("i\3\2\2\2\u0324\u0325\7?\2\2\u0325\u0326\5n8\2\u0326\u032c")
        buf.write("\78\2\2\u0327\u0328\5X-\2\u0328\u0329\7\4\2\2\u0329\u032b")
        buf.write("\3\2\2\2\u032a\u0327\3\2\2\2\u032b\u032e\3\2\2\2\u032c")
        buf.write("\u032a\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u033c\3\2\2\2")
        buf.write("\u032e\u032c\3\2\2\2\u032f\u0330\7@\2\2\u0330\u0331\5")
        buf.write("n8\2\u0331\u0337\78\2\2\u0332\u0333\5X-\2\u0333\u0334")
        buf.write("\7\4\2\2\u0334\u0336\3\2\2\2\u0335\u0332\3\2\2\2\u0336")
        buf.write("\u0339\3\2\2\2\u0337\u0335\3\2\2\2\u0337\u0338\3\2\2\2")
        buf.write("\u0338\u033b\3\2\2\2\u0339\u0337\3\2\2\2\u033a\u032f\3")
        buf.write("\2\2\2\u033b\u033e\3\2\2\2\u033c\u033a\3\2\2\2\u033c\u033d")
        buf.write("\3\2\2\2\u033d\u033f\3\2\2\2\u033e\u033c\3\2\2\2\u033f")
        buf.write("\u0340\7\24\2\2\u0340\u0341\7?\2\2\u0341k\3\2\2\2\u0342")
        buf.write("\u0343\7A\2\2\u0343\u0344\7\30\2\2\u0344\u0345\5\u008a")
        buf.write("F\2\u0345\u0346\7\34\2\2\u0346\u0347\5\u008aF\2\u0347")
        buf.write("\u0348\7\32\2\2\u0348m\3\2\2\2\u0349\u035c\5p9\2\u034a")
        buf.write("\u034b\7\60\2\2\u034b\u034c\5n8\2\u034c\u034d\78\2\2\u034d")
        buf.write("\u0355\5n8\2\u034e\u034f\79\2\2\u034f\u0350\5n8\2\u0350")
        buf.write("\u0351\78\2\2\u0351\u0352\5n8\2\u0352\u0354\3\2\2\2\u0353")
        buf.write("\u034e\3\2\2\2\u0354\u0357\3\2\2\2\u0355\u0353\3\2\2\2")
        buf.write("\u0355\u0356\3\2\2\2\u0356\u0358\3\2\2\2\u0357\u0355\3")
        buf.write("\2\2\2\u0358\u0359\7:\2\2\u0359\u035a\5n8\2\u035a\u035c")
        buf.write("\3\2\2\2\u035b\u0349\3\2\2\2\u035b\u034a\3\2\2\2\u035c")
        buf.write("o\3\2\2\2\u035d\u0364\5r:\2\u035e\u035f\7\31\2\2\u035f")
        buf.write("\u0362\5r:\2\u0360\u0361\7\31\2\2\u0361\u0363\5r:\2\u0362")
        buf.write("\u0360\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0365\3\2\2\2")
        buf.write("\u0364\u035e\3\2\2\2\u0364\u0365\3\2\2\2\u0365q\3\2\2")
        buf.write("\2\u0366\u036b\5t;\2\u0367\u0368\7B\2\2\u0368\u036a\5")
        buf.write("t;\2\u0369\u0367\3\2\2\2\u036a\u036d\3\2\2\2\u036b\u0369")
        buf.write("\3\2\2\2\u036b\u036c\3\2\2\2\u036cs\3\2\2\2\u036d\u036b")
        buf.write("\3\2\2\2\u036e\u0373\5v<\2\u036f\u0370\7C\2\2\u0370\u0372")
        buf.write("\5v<\2\u0371\u036f\3\2\2\2\u0372\u0375\3\2\2\2\u0373\u0371")
        buf.write("\3\2\2\2\u0373\u0374\3\2\2\2\u0374u\3\2\2\2\u0375\u0373")
        buf.write("\3\2\2\2\u0376\u0378\7D\2\2\u0377\u0376\3\2\2\2\u0377")
        buf.write("\u0378\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037a\5x=\2\u037a")
        buf.write("w\3\2\2\2\u037b\u037f\5|?\2\u037c\u037d\5z>\2\u037d\u037e")
        buf.write("\5|?\2\u037e\u0380\3\2\2\2\u037f\u037c\3\2\2\2\u037f\u0380")
        buf.write("\3\2\2\2\u0380y\3\2\2\2\u0381\u0382\t\6\2\2\u0382{\3\2")
        buf.write("\2\2\u0383\u0385\5~@\2\u0384\u0383\3\2\2\2\u0384\u0385")
        buf.write("\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u038c\5\u0080A\2\u0387")
        buf.write("\u0388\5~@\2\u0388\u0389\5\u0080A\2\u0389\u038b\3\2\2")
        buf.write("\2\u038a\u0387\3\2\2\2\u038b\u038e\3\2\2\2\u038c\u038a")
        buf.write("\3\2\2\2\u038c\u038d\3\2\2\2\u038d}\3\2\2\2\u038e\u038c")
        buf.write("\3\2\2\2\u038f\u0390\t\7\2\2\u0390\177\3\2\2\2\u0391\u0397")
        buf.write("\5\u0084C\2\u0392\u0393\5\u0082B\2\u0393\u0394\5\u0084")
        buf.write("C\2\u0394\u0396\3\2\2\2\u0395\u0392\3\2\2\2\u0396\u0399")
        buf.write("\3\2\2\2\u0397\u0395\3\2\2\2\u0397\u0398\3\2\2\2\u0398")
        buf.write("\u0081\3\2\2\2\u0399\u0397\3\2\2\2\u039a\u039b\t\b\2\2")
        buf.write("\u039b\u0083\3\2\2\2\u039c\u039f\5\u0086D\2\u039d\u039e")
        buf.write("\t\t\2\2\u039e\u03a0\5\u0086D\2\u039f\u039d\3\2\2\2\u039f")
        buf.write("\u03a0\3\2\2\2\u03a0\u0085\3\2\2\2\u03a1\u03c1\7]\2\2")
        buf.write("\u03a2\u03c1\7\\\2\2\u03a3\u03c1\7T\2\2\u03a4\u03c1\7")
        buf.write("U\2\2\u03a5\u03a9\5\u0088E\2\u03a6\u03a9\7\33\2\2\u03a7")
        buf.write("\u03a9\7\63\2\2\u03a8\u03a5\3\2\2\2\u03a8\u03a6\3\2\2")
        buf.write("\2\u03a8\u03a7\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03c1")
        buf.write("\5\u008cG\2\u03ab\u03c1\5\u008aF\2\u03ac\u03ad\7\30\2")
        buf.write("\2\u03ad\u03ae\5\u0096L\2\u03ae\u03af\7\32\2\2\u03af\u03c1")
        buf.write("\3\2\2\2\u03b0\u03b1\7V\2\2\u03b1\u03b6\5\u0098M\2\u03b2")
        buf.write("\u03b3\7\4\2\2\u03b3\u03b5\5\u0098M\2\u03b4\u03b2\3\2")
        buf.write("\2\2\u03b5\u03b8\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b6\u03b7")
        buf.write("\3\2\2\2\u03b7\u03b9\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b9")
        buf.write("\u03ba\7W\2\2\u03ba\u03c1\3\2\2\2\u03bb\u03bc\7X\2\2\u03bc")
        buf.write("\u03bd\5\u008eH\2\u03bd\u03be\7\'\2\2\u03be\u03c1\3\2")
        buf.write("\2\2\u03bf\u03c1\7\24\2\2\u03c0\u03a1\3\2\2\2\u03c0\u03a2")
        buf.write("\3\2\2\2\u03c0\u03a3\3\2\2\2\u03c0\u03a4\3\2\2\2\u03c0")
        buf.write("\u03a8\3\2\2\2\u03c0\u03ab\3\2\2\2\u03c0\u03ac\3\2\2\2")
        buf.write("\u03c0\u03b0\3\2\2\2\u03c0\u03bb\3\2\2\2\u03c0\u03bf\3")
        buf.write("\2\2\2\u03c1\u0087\3\2\2\2\u03c2\u03c4\7Y\2\2\u03c3\u03c2")
        buf.write("\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5")
        buf.write("\u03ca\7[\2\2\u03c6\u03c7\7Y\2\2\u03c7\u03c9\7[\2\2\u03c8")
        buf.write("\u03c6\3\2\2\2\u03c9\u03cc\3\2\2\2\u03ca\u03c8\3\2\2\2")
        buf.write("\u03ca\u03cb\3\2\2\2\u03cb\u0089\3\2\2\2\u03cc\u03ca\3")
        buf.write("\2\2\2\u03cd\u03cf\7Y\2\2\u03ce\u03cd\3\2\2\2\u03ce\u03cf")
        buf.write("\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03d2\7[\2\2\u03d1")
        buf.write("\u03d3\5\u009aN\2\u03d2\u03d1\3\2\2\2\u03d2\u03d3\3\2")
        buf.write("\2\2\u03d3\u03db\3\2\2\2\u03d4\u03d5\7Y\2\2\u03d5\u03d7")
        buf.write("\7[\2\2\u03d6\u03d8\5\u009aN\2\u03d7\u03d6\3\2\2\2\u03d7")
        buf.write("\u03d8\3\2\2\2\u03d8\u03da\3\2\2\2\u03d9\u03d4\3\2\2\2")
        buf.write("\u03da\u03dd\3\2\2\2\u03db\u03d9\3\2\2\2\u03db\u03dc\3")
        buf.write("\2\2\2\u03dc\u008b\3\2\2\2\u03dd\u03db\3\2\2\2\u03de\u03e0")
        buf.write("\7\30\2\2\u03df\u03e1\5\u008eH\2\u03e0\u03df\3\2\2\2\u03e0")
        buf.write("\u03e1\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e3\7\32\2")
        buf.write("\2\u03e3\u008d\3\2\2\2\u03e4\u03e9\5\u0094K\2\u03e5\u03e6")
        buf.write("\7\34\2\2\u03e6\u03ea\5\u008eH\2\u03e7\u03e8\7;\2\2\u03e8")
        buf.write("\u03ea\5b\62\2\u03e9\u03e5\3\2\2\2\u03e9\u03e7\3\2\2\2")
        buf.write("\u03e9\u03ea\3\2\2\2\u03ea\u03ed\3\2\2\2\u03eb\u03ed\5")
        buf.write("\u0090I\2\u03ec\u03e4\3\2\2\2\u03ec\u03eb\3\2\2\2\u03ed")
        buf.write("\u008f\3\2\2\2\u03ee\u03f1\5\u0092J\2\u03ef\u03f0\7\34")
        buf.write("\2\2\u03f0\u03f2\5\u0090I\2\u03f1\u03ef\3\2\2\2\u03f1")
        buf.write("\u03f2\3\2\2\2\u03f2\u0091\3\2\2\2\u03f3\u03f4\7[\2\2")
        buf.write("\u03f4\u03f5\7\26\2\2\u03f5\u03f6\5\u0094K\2\u03f6\u0093")
        buf.write("\3\2\2\2\u03f7\u03f8\7\23\2\2\u03f8\u03f9\5\u0088E\2\u03f9")
        buf.write("\u03fb\7\30\2\2\u03fa\u03fc\5\u0090I\2\u03fb\u03fa\3\2")
        buf.write("\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03fe")
        buf.write("\7\32\2\2\u03fe\u0401\3\2\2\2\u03ff\u0401\5n8\2\u0400")
        buf.write("\u03f7\3\2\2\2\u0400\u03ff\3\2\2\2\u0401\u0095\3\2\2\2")
        buf.write("\u0402\u0404\5n8\2\u0403\u0402\3\2\2\2\u0403\u0404\3\2")
        buf.write("\2\2\u0404\u040b\3\2\2\2\u0405\u0407\7\34\2\2\u0406\u0408")
        buf.write("\5n8\2\u0407\u0406\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u040a")
        buf.write("\3\2\2\2\u0409\u0405\3\2\2\2\u040a\u040d\3\2\2\2\u040b")
        buf.write("\u0409\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u0097\3\2\2\2")
        buf.write("\u040d\u040b\3\2\2\2\u040e\u0413\5n8\2\u040f\u0410\7\34")
        buf.write("\2\2\u0410\u0412\5n8\2\u0411\u040f\3\2\2\2\u0412\u0415")
        buf.write("\3\2\2\2\u0413\u0411\3\2\2\2\u0413\u0414\3\2\2\2\u0414")
        buf.write("\u0099\3\2\2\2\u0415\u0413\3\2\2\2\u0416\u0417\7V\2\2")
        buf.write("\u0417\u041c\5\u009cO\2\u0418\u0419\7\34\2\2\u0419\u041b")
        buf.write("\5\u009cO\2\u041a\u0418\3\2\2\2\u041b\u041e\3\2\2\2\u041c")
        buf.write("\u041a\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u041f\3\2\2\2")
        buf.write("\u041e\u041c\3\2\2\2\u041f\u0420\7W\2\2\u0420\u009b\3")
        buf.write("\2\2\2\u0421\u0424\7\31\2\2\u0422\u0424\5n8\2\u0423\u0421")
        buf.write("\3\2\2\2\u0423\u0422\3\2\2\2\u0424\u009d\3\2\2\2\u0425")
        buf.write("\u0427\5\u00a0Q\2\u0426\u0428\5\u00a4S\2\u0427\u0426\3")
        buf.write("\2\2\2\u0427\u0428\3\2\2\2\u0428\u009f\3\2\2\2\u0429\u042e")
        buf.write("\7\\\2\2\u042a\u042b\7K\2\2\u042b\u042d\7\\\2\2\u042c")
        buf.write("\u042a\3\2\2\2\u042d\u0430\3\2\2\2\u042e\u042c\3\2\2\2")
        buf.write("\u042e\u042f\3\2\2\2\u042f\u00a1\3\2\2\2\u0430\u042e\3")
        buf.write("\2\2\2\u0431\u0432\5\u00a4S\2\u0432\u00a3\3\2\2\2\u0433")
        buf.write("\u0434\7Z\2\2\u0434\u0435\5> \2\u0435\u00a5\3\2\2\2\u0096")
        buf.write("\u00a9\u00ad\u00b4\u00b9\u00be\u00c6\u00c9\u00ce\u00d3")
        buf.write("\u00d9\u00dc\u00e0\u00e4\u00ed\u00f0\u00f6\u00fd\u0100")
        buf.write("\u0103\u010a\u010d\u0111\u0113\u0120\u0125\u0128\u012b")
        buf.write("\u012e\u0135\u013a\u0143\u0145\u014a\u014d\u0150\u0153")
        buf.write("\u0158\u015f\u0164\u016b\u0171\u0174\u0177\u017a\u017e")
        buf.write("\u0183\u0188\u018a\u018c\u019d\u01a0\u01a7\u01ad\u01b0")
        buf.write("\u01b5\u01b8\u01bb\u01be\u01c2\u01d3\u01d8\u01db\u01e2")
        buf.write("\u01e5\u01ea\u01f0\u01f4\u01fd\u0202\u0205\u0208\u020c")
        buf.write("\u0210\u0213\u0217\u021a\u021e\u0221\u0226\u0229\u022c")
        buf.write("\u022f\u0232\u023e\u0244\u0248\u0250\u025e\u0261\u0269")
        buf.write("\u0278\u027b\u0285\u0290\u0295\u029e\u02a1\u02ae\u02b9")
        buf.write("\u02be\u02c7\u02ca\u02d7\u02e5\u02f0\u02f6\u0300\u030e")
        buf.write("\u0319\u031e\u032c\u0337\u033c\u0355\u035b\u0362\u0364")
        buf.write("\u036b\u0373\u0377\u037f\u0384\u038c\u0397\u039f\u03a8")
        buf.write("\u03b6\u03c0\u03c3\u03ca\u03ce\u03d2\u03d7\u03db\u03e0")
        buf.write("\u03e9\u03ec\u03f1\u03fb\u0400\u0403\u0407\u040b\u0413")
        buf.write("\u041c\u0423\u0427\u042e")
        return buf.getvalue()


class modelicaParser ( Parser ):

    grammarFileName = "modelica.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'final'", "';'", "'within'", "'encapsulated'", 
                     "'partial'", "'class'", "'model'", "'operator'", "'record'", 
                     "'block'", "'expandable'", "'connector'", "'type'", 
                     "'package'", "'pure'", "'impure'", "'function'", "'end'", 
                     "'extends'", "'='", "'enumeration'", "'('", "':'", 
                     "')'", "'der'", "','", "'public'", "'protected'", "'external'", 
                     "'redeclare'", "'inner'", "'outer'", "'replaceable'", 
                     "'import'", "'.*'", "'.{'", "'}'", "'constrainedby'", 
                     "'flow'", "'stream'", "'discrete'", "'parameter'", 
                     "'constant'", "'input'", "'output'", "'if'", "':='", 
                     "'each'", "'initial'", "'equation'", "'algorithm'", 
                     "'break'", "'return'", "'then'", "'elseif'", "'else'", 
                     "'for'", "'loop'", "'in'", "'while'", "'when'", "'elsewhen'", 
                     "'connect'", "'or'", "'and'", "'not'", "'<'", "'<='", 
                     "'>'", "'>='", "'=='", "'<>'", "'+'", "'-'", "'.+'", 
                     "'.-'", "'*'", "'/'", "'./'", "'^'", "'.^'", "'false'", 
                     "'true'", "'['", "']'", "'{'", "'.'", "'annotation'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "IDENT", "STRING", "UNSIGNED_NUMBER", 
                      "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_stored_definition = 0
    RULE_within_statement = 1
    RULE_class_definition = 2
    RULE_class_specifier = 3
    RULE_class_prefixes = 4
    RULE_long_class_specifier = 5
    RULE_short_class_specifier = 6
    RULE_der_class_specifier = 7
    RULE_base_prefix = 8
    RULE_enum_list = 9
    RULE_enumeration_literal = 10
    RULE_composition = 11
    RULE_language_specification = 12
    RULE_external_function_call = 13
    RULE_element_list = 14
    RULE_element = 15
    RULE_import_clause = 16
    RULE_import_list = 17
    RULE_extends_clause = 18
    RULE_constraining_clause = 19
    RULE_component_clause = 20
    RULE_type_prefix_connector = 21
    RULE_type_prefix_variability = 22
    RULE_type_prefix_io = 23
    RULE_type_specifier = 24
    RULE_component_list = 25
    RULE_component_declaration = 26
    RULE_condition_attribute = 27
    RULE_declaration = 28
    RULE_modification = 29
    RULE_class_modification = 30
    RULE_argument_list = 31
    RULE_argument = 32
    RULE_element_modification_or_replaceable = 33
    RULE_element_modification = 34
    RULE_element_redeclaration = 35
    RULE_element_replaceable = 36
    RULE_component_clause1 = 37
    RULE_component_declaration1 = 38
    RULE_short_class_definition = 39
    RULE_equation_section = 40
    RULE_algorithm_section = 41
    RULE_equation = 42
    RULE_statement = 43
    RULE_if_equation = 44
    RULE_if_statement = 45
    RULE_for_equation = 46
    RULE_for_statement = 47
    RULE_for_indices = 48
    RULE_for_index = 49
    RULE_while_statement = 50
    RULE_when_equation = 51
    RULE_when_statement = 52
    RULE_connect_clause = 53
    RULE_expression = 54
    RULE_simple_expression = 55
    RULE_logical_expression = 56
    RULE_logical_term = 57
    RULE_logical_factor = 58
    RULE_relation = 59
    RULE_rel_op = 60
    RULE_arithmetic_expression = 61
    RULE_add_op = 62
    RULE_term = 63
    RULE_mul_op = 64
    RULE_factor = 65
    RULE_primary = 66
    RULE_name = 67
    RULE_component_reference = 68
    RULE_function_call_args = 69
    RULE_function_arguments = 70
    RULE_named_arguments = 71
    RULE_named_argument = 72
    RULE_function_argument = 73
    RULE_output_expression_list = 74
    RULE_expression_list = 75
    RULE_array_subscripts = 76
    RULE_subscript = 77
    RULE_comment = 78
    RULE_string_comment = 79
    RULE_model_annotation = 80
    RULE_annotation = 81

    ruleNames =  [ "stored_definition", "within_statement", "class_definition", 
                   "class_specifier", "class_prefixes", "long_class_specifier", 
                   "short_class_specifier", "der_class_specifier", "base_prefix", 
                   "enum_list", "enumeration_literal", "composition", "language_specification", 
                   "external_function_call", "element_list", "element", 
                   "import_clause", "import_list", "extends_clause", "constraining_clause", 
                   "component_clause", "type_prefix_connector", "type_prefix_variability", 
                   "type_prefix_io", "type_specifier", "component_list", 
                   "component_declaration", "condition_attribute", "declaration", 
                   "modification", "class_modification", "argument_list", 
                   "argument", "element_modification_or_replaceable", "element_modification", 
                   "element_redeclaration", "element_replaceable", "component_clause1", 
                   "component_declaration1", "short_class_definition", "equation_section", 
                   "algorithm_section", "equation", "statement", "if_equation", 
                   "if_statement", "for_equation", "for_statement", "for_indices", 
                   "for_index", "while_statement", "when_equation", "when_statement", 
                   "connect_clause", "expression", "simple_expression", 
                   "logical_expression", "logical_term", "logical_factor", 
                   "relation", "rel_op", "arithmetic_expression", "add_op", 
                   "term", "mul_op", "factor", "primary", "name", "component_reference", 
                   "function_call_args", "function_arguments", "named_arguments", 
                   "named_argument", "function_argument", "output_expression_list", 
                   "expression_list", "array_subscripts", "subscript", "comment", 
                   "string_comment", "model_annotation", "annotation" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    IDENT=89
    STRING=90
    UNSIGNED_NUMBER=91
    WS=92
    COMMENT=93
    LINE_COMMENT=94

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Stored_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def within_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Within_statementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Within_statementContext,i)


        def class_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Class_definitionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Class_definitionContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_stored_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStored_definition" ):
                listener.enterStored_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStored_definition" ):
                listener.exitStored_definition(self)




    def stored_definition(self):

        localctx = modelicaParser.Stored_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_stored_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__2:
                self.state = 164
                self.within_statement()
                self.state = 169
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__0) | (1 << modelicaParser.T__3) | (1 << modelicaParser.T__4) | (1 << modelicaParser.T__5) | (1 << modelicaParser.T__6) | (1 << modelicaParser.T__7) | (1 << modelicaParser.T__8) | (1 << modelicaParser.T__9) | (1 << modelicaParser.T__10) | (1 << modelicaParser.T__11) | (1 << modelicaParser.T__12) | (1 << modelicaParser.T__13) | (1 << modelicaParser.T__14) | (1 << modelicaParser.T__15) | (1 << modelicaParser.T__16))) != 0):
                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__0:
                    self.state = 170
                    self.match(modelicaParser.T__0)


                self.state = 173
                self.class_definition()
                self.state = 174
                self.match(modelicaParser.T__1)
                self.state = 180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Within_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_within_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_statement" ):
                listener.enterWithin_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_statement" ):
                listener.exitWithin_statement(self)




    def within_statement(self):

        localctx = modelicaParser.Within_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_within_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self.match(modelicaParser.T__2)
            self.state = 183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 182
                self.name()


            self.state = 185
            self.match(modelicaParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_prefixes(self):
            return self.getTypedRuleContext(modelicaParser.Class_prefixesContext,0)


        def class_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Class_specifierContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_definition" ):
                listener.enterClass_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_definition" ):
                listener.exitClass_definition(self)




    def class_definition(self):

        localctx = modelicaParser.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__3:
                self.state = 187
                self.match(modelicaParser.T__3)


            self.state = 190
            self.class_prefixes()
            self.state = 191
            self.class_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def long_class_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Long_class_specifierContext,0)


        def short_class_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Short_class_specifierContext,0)


        def der_class_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Der_class_specifierContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_class_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_specifier" ):
                listener.enterClass_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_specifier" ):
                listener.exitClass_specifier(self)




    def class_specifier(self):

        localctx = modelicaParser.Class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_class_specifier)
        try:
            self.state = 196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 193
                self.long_class_specifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 194
                self.short_class_specifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 195
                self.der_class_specifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_prefixesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return modelicaParser.RULE_class_prefixes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_prefixes" ):
                listener.enterClass_prefixes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_prefixes" ):
                listener.exitClass_prefixes(self)




    def class_prefixes(self):

        localctx = modelicaParser.Class_prefixesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_class_prefixes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__4:
                self.state = 198
                self.match(modelicaParser.T__4)


            self.state = 222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 201
                self.match(modelicaParser.T__5)
                pass

            elif la_ == 2:
                self.state = 202
                self.match(modelicaParser.T__6)
                pass

            elif la_ == 3:
                self.state = 204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__7:
                    self.state = 203
                    self.match(modelicaParser.T__7)


                self.state = 206
                self.match(modelicaParser.T__8)
                pass

            elif la_ == 4:
                self.state = 207
                self.match(modelicaParser.T__9)
                pass

            elif la_ == 5:
                self.state = 209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__10:
                    self.state = 208
                    self.match(modelicaParser.T__10)


                self.state = 211
                self.match(modelicaParser.T__11)
                pass

            elif la_ == 6:
                self.state = 212
                self.match(modelicaParser.T__12)
                pass

            elif la_ == 7:
                self.state = 213
                self.match(modelicaParser.T__13)
                pass

            elif la_ == 8:
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__14 or _la==modelicaParser.T__15:
                    self.state = 214
                    _la = self._input.LA(1)
                    if not(_la==modelicaParser.T__14 or _la==modelicaParser.T__15):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__7:
                    self.state = 217
                    self.match(modelicaParser.T__7)


                self.state = 220
                self.match(modelicaParser.T__16)
                pass

            elif la_ == 9:
                self.state = 221
                self.match(modelicaParser.T__7)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Long_class_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def composition(self):
            return self.getTypedRuleContext(modelicaParser.CompositionContext,0)


        def string_comment(self):
            return self.getTypedRuleContext(modelicaParser.String_commentContext,0)


        def class_modification(self):
            return self.getTypedRuleContext(modelicaParser.Class_modificationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_long_class_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLong_class_specifier" ):
                listener.enterLong_class_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLong_class_specifier" ):
                listener.exitLong_class_specifier(self)




    def long_class_specifier(self):

        localctx = modelicaParser.Long_class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_long_class_specifier)
        self._la = 0 # Token type
        try:
            self.state = 244
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 224
                self.match(modelicaParser.IDENT)
                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.STRING:
                    self.state = 225
                    self.string_comment()


                self.state = 228
                self.composition()
                self.state = 229
                self.match(modelicaParser.T__17)
                self.state = 230
                self.match(modelicaParser.IDENT)
                pass
            elif token in [modelicaParser.T__18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 232
                self.match(modelicaParser.T__18)
                self.state = 233
                self.match(modelicaParser.IDENT)
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__21:
                    self.state = 234
                    self.class_modification()


                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.STRING:
                    self.state = 237
                    self.string_comment()


                self.state = 240
                self.composition()
                self.state = 241
                self.match(modelicaParser.T__17)
                self.state = 242
                self.match(modelicaParser.IDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Short_class_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def base_prefix(self):
            return self.getTypedRuleContext(modelicaParser.Base_prefixContext,0)


        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def array_subscripts(self):
            return self.getTypedRuleContext(modelicaParser.Array_subscriptsContext,0)


        def class_modification(self):
            return self.getTypedRuleContext(modelicaParser.Class_modificationContext,0)


        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def enum_list(self):
            return self.getTypedRuleContext(modelicaParser.Enum_listContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_short_class_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShort_class_specifier" ):
                listener.enterShort_class_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShort_class_specifier" ):
                listener.exitShort_class_specifier(self)




    def short_class_specifier(self):

        localctx = modelicaParser.Short_class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_short_class_specifier)
        self._la = 0 # Token type
        try:
            self.state = 273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 246
                self.match(modelicaParser.IDENT)
                self.state = 247
                self.match(modelicaParser.T__19)
                self.state = 248
                self.base_prefix()
                self.state = 249
                self.name()
                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__83:
                    self.state = 250
                    self.array_subscripts()


                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__21:
                    self.state = 253
                    self.class_modification()


                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.STRING:
                    self.state = 256
                    self.comment()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 259
                self.match(modelicaParser.IDENT)
                self.state = 260
                self.match(modelicaParser.T__19)
                self.state = 261
                self.match(modelicaParser.T__20)
                self.state = 262
                self.match(modelicaParser.T__21)
                self.state = 267
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__23, modelicaParser.IDENT]:
                    self.state = 264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==modelicaParser.IDENT:
                        self.state = 263
                        self.enum_list()


                    pass
                elif token in [modelicaParser.T__22]:
                    self.state = 266
                    self.match(modelicaParser.T__22)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 269
                self.match(modelicaParser.T__23)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.STRING:
                    self.state = 270
                    self.comment()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Der_class_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_der_class_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDer_class_specifier" ):
                listener.enterDer_class_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDer_class_specifier" ):
                listener.exitDer_class_specifier(self)




    def der_class_specifier(self):

        localctx = modelicaParser.Der_class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_der_class_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.match(modelicaParser.IDENT)
            self.state = 276
            self.match(modelicaParser.T__19)
            self.state = 277
            self.match(modelicaParser.T__24)
            self.state = 278
            self.match(modelicaParser.T__21)
            self.state = 279
            self.name()
            self.state = 280
            self.match(modelicaParser.T__25)
            self.state = 281
            self.match(modelicaParser.IDENT)
            self.state = 286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 282
                self.match(modelicaParser.T__25)
                self.state = 283
                self.match(modelicaParser.IDENT)
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 289
            self.match(modelicaParser.T__23)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.STRING:
                self.state = 290
                self.comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_prefixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix_connector(self):
            return self.getTypedRuleContext(modelicaParser.Type_prefix_connectorContext,0)


        def type_prefix_variability(self):
            return self.getTypedRuleContext(modelicaParser.Type_prefix_variabilityContext,0)


        def type_prefix_io(self):
            return self.getTypedRuleContext(modelicaParser.Type_prefix_ioContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_base_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_prefix" ):
                listener.enterBase_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_prefix" ):
                listener.exitBase_prefix(self)




    def base_prefix(self):

        localctx = modelicaParser.Base_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_base_prefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__38 or _la==modelicaParser.T__39:
                self.state = 293
                self.type_prefix_connector()


            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__40) | (1 << modelicaParser.T__41) | (1 << modelicaParser.T__42))) != 0):
                self.state = 296
                self.type_prefix_variability()


            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__43 or _la==modelicaParser.T__44:
                self.state = 299
                self.type_prefix_io()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeration_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Enumeration_literalContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Enumeration_literalContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_enum_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_list" ):
                listener.enterEnum_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_list" ):
                listener.exitEnum_list(self)




    def enum_list(self):

        localctx = modelicaParser.Enum_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_enum_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.enumeration_literal()
            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 303
                self.match(modelicaParser.T__25)
                self.state = 304
                self.enumeration_literal()
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enumeration_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_enumeration_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeration_literal" ):
                listener.enterEnumeration_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeration_literal" ):
                listener.exitEnumeration_literal(self)




    def enumeration_literal(self):

        localctx = modelicaParser.Enumeration_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_enumeration_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.match(modelicaParser.IDENT)
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.STRING:
                self.state = 311
                self.comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Element_listContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Element_listContext,i)


        def equation_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Equation_sectionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Equation_sectionContext,i)


        def algorithm_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Algorithm_sectionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Algorithm_sectionContext,i)


        def model_annotation(self):
            return self.getTypedRuleContext(modelicaParser.Model_annotationContext,0)


        def language_specification(self):
            return self.getTypedRuleContext(modelicaParser.Language_specificationContext,0)


        def external_function_call(self):
            return self.getTypedRuleContext(modelicaParser.External_function_callContext,0)


        def annotation(self):
            return self.getTypedRuleContext(modelicaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_composition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposition" ):
                listener.enterComposition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposition" ):
                listener.exitComposition(self)




    def composition(self):

        localctx = modelicaParser.CompositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_composition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.element_list()
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__26) | (1 << modelicaParser.T__27) | (1 << modelicaParser.T__48) | (1 << modelicaParser.T__49) | (1 << modelicaParser.T__50))) != 0):
                self.state = 321
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 315
                    self.match(modelicaParser.T__26)
                    self.state = 316
                    self.element_list()
                    pass

                elif la_ == 2:
                    self.state = 317
                    self.match(modelicaParser.T__27)
                    self.state = 318
                    self.element_list()
                    pass

                elif la_ == 3:
                    self.state = 319
                    self.equation_section()
                    pass

                elif la_ == 4:
                    self.state = 320
                    self.algorithm_section()
                    pass


                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__28:
                self.state = 326
                self.match(modelicaParser.T__28)
                self.state = 328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.STRING:
                    self.state = 327
                    self.language_specification()


                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                    self.state = 330
                    self.external_function_call()


                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__87:
                    self.state = 333
                    self.annotation()


                self.state = 336
                self.match(modelicaParser.T__1)


            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__87:
                self.state = 339
                self.model_annotation()
                self.state = 340
                self.match(modelicaParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Language_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(modelicaParser.STRING, 0)

        def getRuleIndex(self):
            return modelicaParser.RULE_language_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLanguage_specification" ):
                listener.enterLanguage_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLanguage_specification" ):
                listener.exitLanguage_specification(self)




    def language_specification(self):

        localctx = modelicaParser.Language_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_language_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.match(modelicaParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def component_reference(self):
            return self.getTypedRuleContext(modelicaParser.Component_referenceContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(modelicaParser.Expression_listContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_external_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_call" ):
                listener.enterExternal_function_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_call" ):
                listener.exitExternal_function_call(self)




    def external_function_call(self):

        localctx = modelicaParser.External_function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_external_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 346
                self.component_reference()
                self.state = 347
                self.match(modelicaParser.T__19)


            self.state = 351
            self.match(modelicaParser.IDENT)
            self.state = 352
            self.match(modelicaParser.T__21)
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__17) | (1 << modelicaParser.T__21) | (1 << modelicaParser.T__24) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__48))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (modelicaParser.T__65 - 66)) | (1 << (modelicaParser.T__72 - 66)) | (1 << (modelicaParser.T__73 - 66)) | (1 << (modelicaParser.T__74 - 66)) | (1 << (modelicaParser.T__75 - 66)) | (1 << (modelicaParser.T__81 - 66)) | (1 << (modelicaParser.T__82 - 66)) | (1 << (modelicaParser.T__83 - 66)) | (1 << (modelicaParser.T__85 - 66)) | (1 << (modelicaParser.T__86 - 66)) | (1 << (modelicaParser.IDENT - 66)) | (1 << (modelicaParser.STRING - 66)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 66)))) != 0):
                self.state = 353
                self.expression_list()


            self.state = 356
            self.match(modelicaParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ElementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ElementContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_list" ):
                listener.enterElement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_list" ):
                listener.exitElement_list(self)




    def element_list(self):

        localctx = modelicaParser.Element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__0) | (1 << modelicaParser.T__3) | (1 << modelicaParser.T__4) | (1 << modelicaParser.T__5) | (1 << modelicaParser.T__6) | (1 << modelicaParser.T__7) | (1 << modelicaParser.T__8) | (1 << modelicaParser.T__9) | (1 << modelicaParser.T__10) | (1 << modelicaParser.T__11) | (1 << modelicaParser.T__12) | (1 << modelicaParser.T__13) | (1 << modelicaParser.T__14) | (1 << modelicaParser.T__15) | (1 << modelicaParser.T__16) | (1 << modelicaParser.T__18) | (1 << modelicaParser.T__29) | (1 << modelicaParser.T__30) | (1 << modelicaParser.T__31) | (1 << modelicaParser.T__32) | (1 << modelicaParser.T__33) | (1 << modelicaParser.T__38) | (1 << modelicaParser.T__39) | (1 << modelicaParser.T__40) | (1 << modelicaParser.T__41) | (1 << modelicaParser.T__42) | (1 << modelicaParser.T__43) | (1 << modelicaParser.T__44))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 358
                self.element()
                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_clause(self):
            return self.getTypedRuleContext(modelicaParser.Import_clauseContext,0)


        def extends_clause(self):
            return self.getTypedRuleContext(modelicaParser.Extends_clauseContext,0)


        def class_definition(self):
            return self.getTypedRuleContext(modelicaParser.Class_definitionContext,0)


        def component_clause(self):
            return self.getTypedRuleContext(modelicaParser.Component_clauseContext,0)


        def constraining_clause(self):
            return self.getTypedRuleContext(modelicaParser.Constraining_clauseContext,0)


        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)




    def element(self):

        localctx = modelicaParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__33]:
                self.state = 364
                self.import_clause()
                pass
            elif token in [modelicaParser.T__18]:
                self.state = 365
                self.extends_clause()
                pass
            elif token in [modelicaParser.T__0, modelicaParser.T__3, modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16, modelicaParser.T__29, modelicaParser.T__30, modelicaParser.T__31, modelicaParser.T__32, modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__29:
                    self.state = 366
                    self.match(modelicaParser.T__29)


                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__0:
                    self.state = 369
                    self.match(modelicaParser.T__0)


                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__30:
                    self.state = 372
                    self.match(modelicaParser.T__30)


                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__31:
                    self.state = 375
                    self.match(modelicaParser.T__31)


                self.state = 392
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__3, modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16, modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                    self.state = 380
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [modelicaParser.T__3, modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16]:
                        self.state = 378
                        self.class_definition()
                        pass
                    elif token in [modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                        self.state = 379
                        self.component_clause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [modelicaParser.T__32]:
                    self.state = 382
                    self.match(modelicaParser.T__32)
                    self.state = 385
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [modelicaParser.T__3, modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16]:
                        self.state = 383
                        self.class_definition()
                        pass
                    elif token in [modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                        self.state = 384
                        self.component_clause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==modelicaParser.T__37:
                        self.state = 387
                        self.constraining_clause()
                        self.state = 388
                        self.comment()


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 396
            self.match(modelicaParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def import_list(self):
            return self.getTypedRuleContext(modelicaParser.Import_listContext,0)


        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_import_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_clause" ):
                listener.enterImport_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_clause" ):
                listener.exitImport_clause(self)




    def import_clause(self):

        localctx = modelicaParser.Import_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_import_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(modelicaParser.T__33)
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 399
                self.match(modelicaParser.IDENT)
                self.state = 400
                self.match(modelicaParser.T__19)
                self.state = 401
                self.name()
                pass

            elif la_ == 2:
                self.state = 402
                self.name()
                self.state = 403
                self.match(modelicaParser.T__34)
                pass

            elif la_ == 3:
                self.state = 405
                self.name()
                self.state = 406
                self.match(modelicaParser.T__35)
                self.state = 407
                self.import_list()
                self.state = 408
                self.match(modelicaParser.T__36)
                pass

            elif la_ == 4:
                self.state = 410
                self.name()
                pass


            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.STRING:
                self.state = 413
                self.comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_import_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_list" ):
                listener.enterImport_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_list" ):
                listener.exitImport_list(self)




    def import_list(self):

        localctx = modelicaParser.Import_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_import_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(modelicaParser.IDENT)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 417
                self.match(modelicaParser.T__25)
                self.state = 418
                self.match(modelicaParser.IDENT)
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extends_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def class_modification(self):
            return self.getTypedRuleContext(modelicaParser.Class_modificationContext,0)


        def annotation(self):
            return self.getTypedRuleContext(modelicaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_extends_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtends_clause" ):
                listener.enterExtends_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtends_clause" ):
                listener.exitExtends_clause(self)




    def extends_clause(self):

        localctx = modelicaParser.Extends_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_extends_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(modelicaParser.T__18)
            self.state = 425
            self.name()
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__21:
                self.state = 426
                self.class_modification()


            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__87:
                self.state = 429
                self.annotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraining_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def class_modification(self):
            return self.getTypedRuleContext(modelicaParser.Class_modificationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_constraining_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraining_clause" ):
                listener.enterConstraining_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraining_clause" ):
                listener.exitConstraining_clause(self)




    def constraining_clause(self):

        localctx = modelicaParser.Constraining_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_constraining_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(modelicaParser.T__37)
            self.state = 433
            self.name()
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__21:
                self.state = 434
                self.class_modification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Type_specifierContext,0)


        def component_list(self):
            return self.getTypedRuleContext(modelicaParser.Component_listContext,0)


        def type_prefix_connector(self):
            return self.getTypedRuleContext(modelicaParser.Type_prefix_connectorContext,0)


        def type_prefix_variability(self):
            return self.getTypedRuleContext(modelicaParser.Type_prefix_variabilityContext,0)


        def type_prefix_io(self):
            return self.getTypedRuleContext(modelicaParser.Type_prefix_ioContext,0)


        def array_subscripts(self):
            return self.getTypedRuleContext(modelicaParser.Array_subscriptsContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_component_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_clause" ):
                listener.enterComponent_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_clause" ):
                listener.exitComponent_clause(self)




    def component_clause(self):

        localctx = modelicaParser.Component_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_component_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__38 or _la==modelicaParser.T__39:
                self.state = 437
                self.type_prefix_connector()


            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__40) | (1 << modelicaParser.T__41) | (1 << modelicaParser.T__42))) != 0):
                self.state = 440
                self.type_prefix_variability()


            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__43 or _la==modelicaParser.T__44:
                self.state = 443
                self.type_prefix_io()


            self.state = 446
            self.type_specifier()
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__83:
                self.state = 447
                self.array_subscripts()


            self.state = 450
            self.component_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_prefix_connectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return modelicaParser.RULE_type_prefix_connector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_prefix_connector" ):
                listener.enterType_prefix_connector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_prefix_connector" ):
                listener.exitType_prefix_connector(self)




    def type_prefix_connector(self):

        localctx = modelicaParser.Type_prefix_connectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_type_prefix_connector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            _la = self._input.LA(1)
            if not(_la==modelicaParser.T__38 or _la==modelicaParser.T__39):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_prefix_variabilityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return modelicaParser.RULE_type_prefix_variability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_prefix_variability" ):
                listener.enterType_prefix_variability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_prefix_variability" ):
                listener.exitType_prefix_variability(self)




    def type_prefix_variability(self):

        localctx = modelicaParser.Type_prefix_variabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_type_prefix_variability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__40) | (1 << modelicaParser.T__41) | (1 << modelicaParser.T__42))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_prefix_ioContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return modelicaParser.RULE_type_prefix_io

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_prefix_io" ):
                listener.enterType_prefix_io(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_prefix_io" ):
                listener.exitType_prefix_io(self)




    def type_prefix_io(self):

        localctx = modelicaParser.Type_prefix_ioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_type_prefix_io)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            _la = self._input.LA(1)
            if not(_la==modelicaParser.T__43 or _la==modelicaParser.T__44):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_type_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_specifier" ):
                listener.enterType_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_specifier" ):
                listener.exitType_specifier(self)




    def type_specifier(self):

        localctx = modelicaParser.Type_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_type_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Component_declarationContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Component_declarationContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_component_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_list" ):
                listener.enterComponent_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_list" ):
                listener.exitComponent_list(self)




    def component_list(self):

        localctx = modelicaParser.Component_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_component_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.component_declaration()
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 461
                self.match(modelicaParser.T__25)
                self.state = 462
                self.component_declaration()
                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(modelicaParser.DeclarationContext,0)


        def condition_attribute(self):
            return self.getTypedRuleContext(modelicaParser.Condition_attributeContext,0)


        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_component_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_declaration" ):
                listener.enterComponent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_declaration" ):
                listener.exitComponent_declaration(self)




    def component_declaration(self):

        localctx = modelicaParser.Component_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_component_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.declaration()
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__45:
                self.state = 469
                self.condition_attribute()


            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.STRING:
                self.state = 472
                self.comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_condition_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_attribute" ):
                listener.enterCondition_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_attribute" ):
                listener.exitCondition_attribute(self)




    def condition_attribute(self):

        localctx = modelicaParser.Condition_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_condition_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(modelicaParser.T__45)
            self.state = 476
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def array_subscripts(self):
            return self.getTypedRuleContext(modelicaParser.Array_subscriptsContext,0)


        def modification(self):
            return self.getTypedRuleContext(modelicaParser.ModificationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = modelicaParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(modelicaParser.IDENT)
            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__83:
                self.state = 479
                self.array_subscripts()


            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__19) | (1 << modelicaParser.T__21) | (1 << modelicaParser.T__46))) != 0):
                self.state = 482
                self.modification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_modification(self):
            return self.getTypedRuleContext(modelicaParser.Class_modificationContext,0)


        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModification" ):
                listener.enterModification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModification" ):
                listener.exitModification(self)




    def modification(self):

        localctx = modelicaParser.ModificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_modification)
        self._la = 0 # Token type
        try:
            self.state = 494
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 485
                self.class_modification()
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__19:
                    self.state = 486
                    self.match(modelicaParser.T__19)
                    self.state = 487
                    self.expression()


                pass
            elif token in [modelicaParser.T__19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 490
                self.match(modelicaParser.T__19)
                self.state = 491
                self.expression()
                pass
            elif token in [modelicaParser.T__46]:
                self.enterOuterAlt(localctx, 3)
                self.state = 492
                self.match(modelicaParser.T__46)
                self.state = 493
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_modificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_list(self):
            return self.getTypedRuleContext(modelicaParser.Argument_listContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_class_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_modification" ):
                listener.enterClass_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_modification" ):
                listener.exitClass_modification(self)




    def class_modification(self):

        localctx = modelicaParser.Class_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_class_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(modelicaParser.T__21)
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__0) | (1 << modelicaParser.T__29) | (1 << modelicaParser.T__32) | (1 << modelicaParser.T__47))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 497
                self.argument_list()


            self.state = 500
            self.match(modelicaParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ArgumentContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = modelicaParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.argument()
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 503
                self.match(modelicaParser.T__25)
                self.state = 504
                self.argument()
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_modification_or_replaceable(self):
            return self.getTypedRuleContext(modelicaParser.Element_modification_or_replaceableContext,0)


        def element_redeclaration(self):
            return self.getTypedRuleContext(modelicaParser.Element_redeclarationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = modelicaParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_argument)
        try:
            self.state = 512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__0, modelicaParser.T__32, modelicaParser.T__47, modelicaParser.T__86, modelicaParser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.element_modification_or_replaceable()
                pass
            elif token in [modelicaParser.T__29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 511
                self.element_redeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_modification_or_replaceableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_modification(self):
            return self.getTypedRuleContext(modelicaParser.Element_modificationContext,0)


        def element_replaceable(self):
            return self.getTypedRuleContext(modelicaParser.Element_replaceableContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_element_modification_or_replaceable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_modification_or_replaceable" ):
                listener.enterElement_modification_or_replaceable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_modification_or_replaceable" ):
                listener.exitElement_modification_or_replaceable(self)




    def element_modification_or_replaceable(self):

        localctx = modelicaParser.Element_modification_or_replaceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_element_modification_or_replaceable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__47:
                self.state = 514
                self.match(modelicaParser.T__47)


            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__0:
                self.state = 517
                self.match(modelicaParser.T__0)


            self.state = 522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__86, modelicaParser.IDENT]:
                self.state = 520
                self.element_modification()
                pass
            elif token in [modelicaParser.T__32]:
                self.state = 521
                self.element_replaceable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_modificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def modification(self):
            return self.getTypedRuleContext(modelicaParser.ModificationContext,0)


        def string_comment(self):
            return self.getTypedRuleContext(modelicaParser.String_commentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_element_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_modification" ):
                listener.enterElement_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_modification" ):
                listener.exitElement_modification(self)




    def element_modification(self):

        localctx = modelicaParser.Element_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_element_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.name()
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__19) | (1 << modelicaParser.T__21) | (1 << modelicaParser.T__46))) != 0):
                self.state = 525
                self.modification()


            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.STRING:
                self.state = 528
                self.string_comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_redeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_replaceable(self):
            return self.getTypedRuleContext(modelicaParser.Element_replaceableContext,0)


        def short_class_definition(self):
            return self.getTypedRuleContext(modelicaParser.Short_class_definitionContext,0)


        def component_clause1(self):
            return self.getTypedRuleContext(modelicaParser.Component_clause1Context,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_element_redeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_redeclaration" ):
                listener.enterElement_redeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_redeclaration" ):
                listener.exitElement_redeclaration(self)




    def element_redeclaration(self):

        localctx = modelicaParser.Element_redeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_element_redeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(modelicaParser.T__29)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__47:
                self.state = 532
                self.match(modelicaParser.T__47)


            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__0:
                self.state = 535
                self.match(modelicaParser.T__0)


            self.state = 543
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16, modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                self.state = 540
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16]:
                    self.state = 538
                    self.short_class_definition()
                    pass
                elif token in [modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                    self.state = 539
                    self.component_clause1()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [modelicaParser.T__32]:
                self.state = 542
                self.element_replaceable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_replaceableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def short_class_definition(self):
            return self.getTypedRuleContext(modelicaParser.Short_class_definitionContext,0)


        def component_clause1(self):
            return self.getTypedRuleContext(modelicaParser.Component_clause1Context,0)


        def constraining_clause(self):
            return self.getTypedRuleContext(modelicaParser.Constraining_clauseContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_element_replaceable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_replaceable" ):
                listener.enterElement_replaceable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_replaceable" ):
                listener.exitElement_replaceable(self)




    def element_replaceable(self):

        localctx = modelicaParser.Element_replaceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_element_replaceable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(modelicaParser.T__32)
            self.state = 548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__4, modelicaParser.T__5, modelicaParser.T__6, modelicaParser.T__7, modelicaParser.T__8, modelicaParser.T__9, modelicaParser.T__10, modelicaParser.T__11, modelicaParser.T__12, modelicaParser.T__13, modelicaParser.T__14, modelicaParser.T__15, modelicaParser.T__16]:
                self.state = 546
                self.short_class_definition()
                pass
            elif token in [modelicaParser.T__38, modelicaParser.T__39, modelicaParser.T__40, modelicaParser.T__41, modelicaParser.T__42, modelicaParser.T__43, modelicaParser.T__44, modelicaParser.T__86, modelicaParser.IDENT]:
                self.state = 547
                self.component_clause1()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__37:
                self.state = 550
                self.constraining_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_clause1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Type_specifierContext,0)


        def component_declaration1(self):
            return self.getTypedRuleContext(modelicaParser.Component_declaration1Context,0)


        def type_prefix_connector(self):
            return self.getTypedRuleContext(modelicaParser.Type_prefix_connectorContext,0)


        def type_prefix_variability(self):
            return self.getTypedRuleContext(modelicaParser.Type_prefix_variabilityContext,0)


        def type_prefix_io(self):
            return self.getTypedRuleContext(modelicaParser.Type_prefix_ioContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_component_clause1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_clause1" ):
                listener.enterComponent_clause1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_clause1" ):
                listener.exitComponent_clause1(self)




    def component_clause1(self):

        localctx = modelicaParser.Component_clause1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_component_clause1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__38 or _la==modelicaParser.T__39:
                self.state = 553
                self.type_prefix_connector()


            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__40) | (1 << modelicaParser.T__41) | (1 << modelicaParser.T__42))) != 0):
                self.state = 556
                self.type_prefix_variability()


            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__43 or _la==modelicaParser.T__44:
                self.state = 559
                self.type_prefix_io()


            self.state = 562
            self.type_specifier()
            self.state = 563
            self.component_declaration1()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_declaration1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(modelicaParser.DeclarationContext,0)


        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_component_declaration1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_declaration1" ):
                listener.enterComponent_declaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_declaration1" ):
                listener.exitComponent_declaration1(self)




    def component_declaration1(self):

        localctx = modelicaParser.Component_declaration1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_component_declaration1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.declaration()
            self.state = 566
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Short_class_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_prefixes(self):
            return self.getTypedRuleContext(modelicaParser.Class_prefixesContext,0)


        def short_class_specifier(self):
            return self.getTypedRuleContext(modelicaParser.Short_class_specifierContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_short_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShort_class_definition" ):
                listener.enterShort_class_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShort_class_definition" ):
                listener.exitShort_class_definition(self)




    def short_class_definition(self):

        localctx = modelicaParser.Short_class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_short_class_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.class_prefixes()
            self.state = 569
            self.short_class_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equation_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(modelicaParser.EquationContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_equation_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation_section" ):
                listener.enterEquation_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation_section" ):
                listener.exitEquation_section(self)




    def equation_section(self):

        localctx = modelicaParser.Equation_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_equation_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__48:
                self.state = 571
                self.match(modelicaParser.T__48)


            self.state = 574
            self.match(modelicaParser.T__49)
            self.state = 578
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 575
                    self.equation() 
                self.state = 580
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Algorithm_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_algorithm_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlgorithm_section" ):
                listener.enterAlgorithm_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlgorithm_section" ):
                listener.exitAlgorithm_section(self)




    def algorithm_section(self):

        localctx = modelicaParser.Algorithm_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_algorithm_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__48:
                self.state = 581
                self.match(modelicaParser.T__48)


            self.state = 584
            self.match(modelicaParser.T__50)
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 585
                self.statement()
                self.state = 586
                self.match(modelicaParser.T__1)
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EquationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expression(self):
            return self.getTypedRuleContext(modelicaParser.Simple_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def if_equation(self):
            return self.getTypedRuleContext(modelicaParser.If_equationContext,0)


        def for_equation(self):
            return self.getTypedRuleContext(modelicaParser.For_equationContext,0)


        def connect_clause(self):
            return self.getTypedRuleContext(modelicaParser.Connect_clauseContext,0)


        def when_equation(self):
            return self.getTypedRuleContext(modelicaParser.When_equationContext,0)


        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def function_call_args(self):
            return self.getTypedRuleContext(modelicaParser.Function_call_argsContext,0)


        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation" ):
                listener.enterEquation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation" ):
                listener.exitEquation(self)




    def equation(self):

        localctx = modelicaParser.EquationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_equation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 593
                self.simple_expression()
                self.state = 594
                self.match(modelicaParser.T__19)
                self.state = 595
                self.expression()
                pass

            elif la_ == 2:
                self.state = 597
                self.if_equation()
                pass

            elif la_ == 3:
                self.state = 598
                self.for_equation()
                pass

            elif la_ == 4:
                self.state = 599
                self.connect_clause()
                pass

            elif la_ == 5:
                self.state = 600
                self.when_equation()
                pass

            elif la_ == 6:
                self.state = 601
                self.name()
                self.state = 602
                self.function_call_args()
                pass


            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.STRING:
                self.state = 606
                self.comment()


            self.state = 609
            self.match(modelicaParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_reference(self):
            return self.getTypedRuleContext(modelicaParser.Component_referenceContext,0)


        def output_expression_list(self):
            return self.getTypedRuleContext(modelicaParser.Output_expression_listContext,0)


        def function_call_args(self):
            return self.getTypedRuleContext(modelicaParser.Function_call_argsContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(modelicaParser.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(modelicaParser.For_statementContext,0)


        def while_statement(self):
            return self.getTypedRuleContext(modelicaParser.While_statementContext,0)


        def when_statement(self):
            return self.getTypedRuleContext(modelicaParser.When_statementContext,0)


        def comment(self):
            return self.getTypedRuleContext(modelicaParser.CommentContext,0)


        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = modelicaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__86, modelicaParser.IDENT]:
                self.state = 611
                self.component_reference()
                self.state = 615
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__46]:
                    self.state = 612
                    self.match(modelicaParser.T__46)
                    self.state = 613
                    self.expression()
                    pass
                elif token in [modelicaParser.T__21]:
                    self.state = 614
                    self.function_call_args()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [modelicaParser.T__21]:
                self.state = 617
                self.match(modelicaParser.T__21)
                self.state = 618
                self.output_expression_list()
                self.state = 619
                self.match(modelicaParser.T__23)
                self.state = 620
                self.match(modelicaParser.T__46)
                self.state = 621
                self.component_reference()
                self.state = 622
                self.function_call_args()
                pass
            elif token in [modelicaParser.T__51]:
                self.state = 624
                self.match(modelicaParser.T__51)
                pass
            elif token in [modelicaParser.T__52]:
                self.state = 625
                self.match(modelicaParser.T__52)
                pass
            elif token in [modelicaParser.T__45]:
                self.state = 626
                self.if_statement()
                pass
            elif token in [modelicaParser.T__56]:
                self.state = 627
                self.for_statement()
                pass
            elif token in [modelicaParser.T__59]:
                self.state = 628
                self.while_statement()
                pass
            elif token in [modelicaParser.T__60]:
                self.state = 629
                self.when_statement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.STRING:
                self.state = 632
                self.comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_equationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(modelicaParser.EquationContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_if_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_equation" ):
                listener.enterIf_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_equation" ):
                listener.exitIf_equation(self)




    def if_equation(self):

        localctx = modelicaParser.If_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_if_equation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.match(modelicaParser.T__45)
            self.state = 636
            self.expression()
            self.state = 637
            self.match(modelicaParser.T__53)
            self.state = 643
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 638
                    self.equation()
                    self.state = 639
                    self.match(modelicaParser.T__1) 
                self.state = 645
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__54:
                self.state = 646
                self.match(modelicaParser.T__54)
                self.state = 647
                self.expression()
                self.state = 648
                self.match(modelicaParser.T__53)
                self.state = 654
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 649
                        self.equation()
                        self.state = 650
                        self.match(modelicaParser.T__1) 
                    self.state = 656
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__55:
                self.state = 662
                self.match(modelicaParser.T__55)
                self.state = 668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 663
                        self.equation()
                        self.state = 664
                        self.match(modelicaParser.T__1) 
                    self.state = 670
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)



            self.state = 673
            self.match(modelicaParser.T__17)
            self.state = 674
            self.match(modelicaParser.T__45)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = modelicaParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(modelicaParser.T__45)
            self.state = 677
            self.expression()
            self.state = 678
            self.match(modelicaParser.T__53)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 679
                self.statement()
                self.state = 680
                self.match(modelicaParser.T__1)
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__54:
                self.state = 687
                self.match(modelicaParser.T__54)
                self.state = 688
                self.expression()
                self.state = 689
                self.match(modelicaParser.T__53)
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                    self.state = 690
                    self.statement()
                    self.state = 691
                    self.match(modelicaParser.T__1)
                    self.state = 697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__55:
                self.state = 703
                self.match(modelicaParser.T__55)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                    self.state = 704
                    self.statement()
                    self.state = 705
                    self.match(modelicaParser.T__1)
                    self.state = 711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 714
            self.match(modelicaParser.T__17)
            self.state = 715
            self.match(modelicaParser.T__45)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_equationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_indices(self):
            return self.getTypedRuleContext(modelicaParser.For_indicesContext,0)


        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(modelicaParser.EquationContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_for_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_equation" ):
                listener.enterFor_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_equation" ):
                listener.exitFor_equation(self)




    def for_equation(self):

        localctx = modelicaParser.For_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_for_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(modelicaParser.T__56)
            self.state = 718
            self.for_indices()
            self.state = 719
            self.match(modelicaParser.T__57)
            self.state = 725
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 720
                    self.equation()
                    self.state = 721
                    self.match(modelicaParser.T__1) 
                self.state = 727
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

            self.state = 728
            self.match(modelicaParser.T__17)
            self.state = 729
            self.match(modelicaParser.T__56)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_indices(self):
            return self.getTypedRuleContext(modelicaParser.For_indicesContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_statement" ):
                listener.enterFor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_statement" ):
                listener.exitFor_statement(self)




    def for_statement(self):

        localctx = modelicaParser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(modelicaParser.T__56)
            self.state = 732
            self.for_indices()
            self.state = 733
            self.match(modelicaParser.T__57)
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 734
                self.statement()
                self.state = 735
                self.match(modelicaParser.T__1)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 742
            self.match(modelicaParser.T__17)
            self.state = 743
            self.match(modelicaParser.T__56)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_indicesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.For_indexContext)
            else:
                return self.getTypedRuleContext(modelicaParser.For_indexContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_for_indices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_indices" ):
                listener.enterFor_indices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_indices" ):
                listener.exitFor_indices(self)




    def for_indices(self):

        localctx = modelicaParser.For_indicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_for_indices)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.for_index()
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 746
                self.match(modelicaParser.T__25)
                self.state = 747
                self.for_index()
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_for_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_index" ):
                listener.enterFor_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_index" ):
                listener.exitFor_index(self)




    def for_index(self):

        localctx = modelicaParser.For_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_for_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(modelicaParser.IDENT)
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__58:
                self.state = 754
                self.match(modelicaParser.T__58)
                self.state = 755
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = modelicaParser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_while_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(modelicaParser.T__59)
            self.state = 759
            self.expression()
            self.state = 760
            self.match(modelicaParser.T__57)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 761
                self.statement()
                self.state = 762
                self.match(modelicaParser.T__1)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 769
            self.match(modelicaParser.T__17)
            self.state = 770
            self.match(modelicaParser.T__59)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_equationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(modelicaParser.EquationContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_when_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_equation" ):
                listener.enterWhen_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_equation" ):
                listener.exitWhen_equation(self)




    def when_equation(self):

        localctx = modelicaParser.When_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_when_equation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(modelicaParser.T__60)
            self.state = 773
            self.expression()
            self.state = 774
            self.match(modelicaParser.T__53)
            self.state = 780
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 775
                    self.equation()
                    self.state = 776
                    self.match(modelicaParser.T__1) 
                self.state = 782
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__61:
                self.state = 783
                self.match(modelicaParser.T__61)
                self.state = 784
                self.expression()
                self.state = 785
                self.match(modelicaParser.T__53)
                self.state = 791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 786
                        self.equation()
                        self.state = 787
                        self.match(modelicaParser.T__1) 
                    self.state = 793
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 799
            self.match(modelicaParser.T__17)
            self.state = 800
            self.match(modelicaParser.T__60)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(modelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_when_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_statement" ):
                listener.enterWhen_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_statement" ):
                listener.exitWhen_statement(self)




    def when_statement(self):

        localctx = modelicaParser.When_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_when_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(modelicaParser.T__60)
            self.state = 803
            self.expression()
            self.state = 804
            self.match(modelicaParser.T__53)
            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                self.state = 805
                self.statement()
                self.state = 806
                self.match(modelicaParser.T__1)
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__61:
                self.state = 813
                self.match(modelicaParser.T__61)
                self.state = 814
                self.expression()
                self.state = 815
                self.match(modelicaParser.T__53)
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__21) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__51) | (1 << modelicaParser.T__52) | (1 << modelicaParser.T__56) | (1 << modelicaParser.T__59) | (1 << modelicaParser.T__60))) != 0) or _la==modelicaParser.T__86 or _la==modelicaParser.IDENT:
                    self.state = 816
                    self.statement()
                    self.state = 817
                    self.match(modelicaParser.T__1)
                    self.state = 823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 829
            self.match(modelicaParser.T__17)
            self.state = 830
            self.match(modelicaParser.T__60)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Connect_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Component_referenceContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Component_referenceContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_connect_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnect_clause" ):
                listener.enterConnect_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnect_clause" ):
                listener.exitConnect_clause(self)




    def connect_clause(self):

        localctx = modelicaParser.Connect_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_connect_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(modelicaParser.T__62)
            self.state = 833
            self.match(modelicaParser.T__21)
            self.state = 834
            self.component_reference()
            self.state = 835
            self.match(modelicaParser.T__25)
            self.state = 836
            self.component_reference()
            self.state = 837
            self.match(modelicaParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expression(self):
            return self.getTypedRuleContext(modelicaParser.Simple_expressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = modelicaParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.state = 857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__17, modelicaParser.T__21, modelicaParser.T__24, modelicaParser.T__48, modelicaParser.T__65, modelicaParser.T__72, modelicaParser.T__73, modelicaParser.T__74, modelicaParser.T__75, modelicaParser.T__81, modelicaParser.T__82, modelicaParser.T__83, modelicaParser.T__85, modelicaParser.T__86, modelicaParser.IDENT, modelicaParser.STRING, modelicaParser.UNSIGNED_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 839
                self.simple_expression()
                pass
            elif token in [modelicaParser.T__45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 840
                self.match(modelicaParser.T__45)
                self.state = 841
                self.expression()
                self.state = 842
                self.match(modelicaParser.T__53)
                self.state = 843
                self.expression()
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==modelicaParser.T__54:
                    self.state = 844
                    self.match(modelicaParser.T__54)
                    self.state = 845
                    self.expression()
                    self.state = 846
                    self.match(modelicaParser.T__53)
                    self.state = 847
                    self.expression()
                    self.state = 853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 854
                self.match(modelicaParser.T__55)
                self.state = 855
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Logical_expressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Logical_expressionContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_simple_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_expression" ):
                listener.enterSimple_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_expression" ):
                listener.exitSimple_expression(self)




    def simple_expression(self):

        localctx = modelicaParser.Simple_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_simple_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.logical_expression()
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__22:
                self.state = 860
                self.match(modelicaParser.T__22)
                self.state = 861
                self.logical_expression()
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__22:
                    self.state = 862
                    self.match(modelicaParser.T__22)
                    self.state = 863
                    self.logical_expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Logical_termContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Logical_termContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_logical_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_expression" ):
                listener.enterLogical_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_expression" ):
                listener.exitLogical_expression(self)




    def logical_expression(self):

        localctx = modelicaParser.Logical_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_logical_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.logical_term()
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__63:
                self.state = 869
                self.match(modelicaParser.T__63)
                self.state = 870
                self.logical_term()
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Logical_factorContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Logical_factorContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_logical_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_term" ):
                listener.enterLogical_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_term" ):
                listener.exitLogical_term(self)




    def logical_term(self):

        localctx = modelicaParser.Logical_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_logical_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.logical_factor()
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__64:
                self.state = 877
                self.match(modelicaParser.T__64)
                self.state = 878
                self.logical_factor()
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self):
            return self.getTypedRuleContext(modelicaParser.RelationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_logical_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_factor" ):
                listener.enterLogical_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_factor" ):
                listener.exitLogical_factor(self)




    def logical_factor(self):

        localctx = modelicaParser.Logical_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_logical_factor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__65:
                self.state = 884
                self.match(modelicaParser.T__65)


            self.state = 887
            self.relation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmetic_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Arithmetic_expressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Arithmetic_expressionContext,i)


        def rel_op(self):
            return self.getTypedRuleContext(modelicaParser.Rel_opContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)




    def relation(self):

        localctx = modelicaParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.arithmetic_expression()
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (modelicaParser.T__66 - 67)) | (1 << (modelicaParser.T__67 - 67)) | (1 << (modelicaParser.T__68 - 67)) | (1 << (modelicaParser.T__69 - 67)) | (1 << (modelicaParser.T__70 - 67)) | (1 << (modelicaParser.T__71 - 67)))) != 0):
                self.state = 890
                self.rel_op()
                self.state = 891
                self.arithmetic_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rel_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return modelicaParser.RULE_rel_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel_op" ):
                listener.enterRel_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel_op" ):
                listener.exitRel_op(self)




    def rel_op(self):

        localctx = modelicaParser.Rel_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_rel_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (modelicaParser.T__66 - 67)) | (1 << (modelicaParser.T__67 - 67)) | (1 << (modelicaParser.T__68 - 67)) | (1 << (modelicaParser.T__69 - 67)) | (1 << (modelicaParser.T__70 - 67)) | (1 << (modelicaParser.T__71 - 67)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmetic_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.TermContext)
            else:
                return self.getTypedRuleContext(modelicaParser.TermContext,i)


        def add_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Add_opContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Add_opContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_arithmetic_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic_expression" ):
                listener.enterArithmetic_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic_expression" ):
                listener.exitArithmetic_expression(self)




    def arithmetic_expression(self):

        localctx = modelicaParser.Arithmetic_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_arithmetic_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (modelicaParser.T__72 - 73)) | (1 << (modelicaParser.T__73 - 73)) | (1 << (modelicaParser.T__74 - 73)) | (1 << (modelicaParser.T__75 - 73)))) != 0):
                self.state = 897
                self.add_op()


            self.state = 900
            self.term()
            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (modelicaParser.T__72 - 73)) | (1 << (modelicaParser.T__73 - 73)) | (1 << (modelicaParser.T__74 - 73)) | (1 << (modelicaParser.T__75 - 73)))) != 0):
                self.state = 901
                self.add_op()
                self.state = 902
                self.term()
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return modelicaParser.RULE_add_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_op" ):
                listener.enterAdd_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_op" ):
                listener.exitAdd_op(self)




    def add_op(self):

        localctx = modelicaParser.Add_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_add_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (modelicaParser.T__72 - 73)) | (1 << (modelicaParser.T__73 - 73)) | (1 << (modelicaParser.T__74 - 73)) | (1 << (modelicaParser.T__75 - 73)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.FactorContext)
            else:
                return self.getTypedRuleContext(modelicaParser.FactorContext,i)


        def mul_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Mul_opContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Mul_opContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = modelicaParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.factor()
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (modelicaParser.T__34 - 35)) | (1 << (modelicaParser.T__76 - 35)) | (1 << (modelicaParser.T__77 - 35)) | (1 << (modelicaParser.T__78 - 35)))) != 0):
                self.state = 912
                self.mul_op()
                self.state = 913
                self.factor()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mul_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return modelicaParser.RULE_mul_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMul_op" ):
                listener.enterMul_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMul_op" ):
                listener.exitMul_op(self)




    def mul_op(self):

        localctx = modelicaParser.Mul_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_mul_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            _la = self._input.LA(1)
            if not(((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (modelicaParser.T__34 - 35)) | (1 << (modelicaParser.T__76 - 35)) | (1 << (modelicaParser.T__77 - 35)) | (1 << (modelicaParser.T__78 - 35)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.PrimaryContext)
            else:
                return self.getTypedRuleContext(modelicaParser.PrimaryContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = modelicaParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.primary()
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__79 or _la==modelicaParser.T__80:
                self.state = 923
                _la = self._input.LA(1)
                if not(_la==modelicaParser.T__79 or _la==modelicaParser.T__80):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 924
                self.primary()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_NUMBER(self):
            return self.getToken(modelicaParser.UNSIGNED_NUMBER, 0)

        def STRING(self):
            return self.getToken(modelicaParser.STRING, 0)

        def function_call_args(self):
            return self.getTypedRuleContext(modelicaParser.Function_call_argsContext,0)


        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def component_reference(self):
            return self.getTypedRuleContext(modelicaParser.Component_referenceContext,0)


        def output_expression_list(self):
            return self.getTypedRuleContext(modelicaParser.Output_expression_listContext,0)


        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Expression_listContext,i)


        def function_arguments(self):
            return self.getTypedRuleContext(modelicaParser.Function_argumentsContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = modelicaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self.match(modelicaParser.UNSIGNED_NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.match(modelicaParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 929
                self.match(modelicaParser.T__81)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 930
                self.match(modelicaParser.T__82)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 934
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__86, modelicaParser.IDENT]:
                    self.state = 931
                    self.name()
                    pass
                elif token in [modelicaParser.T__24]:
                    self.state = 932
                    self.match(modelicaParser.T__24)
                    pass
                elif token in [modelicaParser.T__48]:
                    self.state = 933
                    self.match(modelicaParser.T__48)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 936
                self.function_call_args()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 937
                self.component_reference()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 938
                self.match(modelicaParser.T__21)
                self.state = 939
                self.output_expression_list()
                self.state = 940
                self.match(modelicaParser.T__23)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 942
                self.match(modelicaParser.T__83)
                self.state = 943
                self.expression_list()
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==modelicaParser.T__1:
                    self.state = 944
                    self.match(modelicaParser.T__1)
                    self.state = 945
                    self.expression_list()
                    self.state = 950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 951
                self.match(modelicaParser.T__84)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 953
                self.match(modelicaParser.T__85)
                self.state = 954
                self.function_arguments()
                self.state = 955
                self.match(modelicaParser.T__36)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 957
                self.match(modelicaParser.T__17)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = modelicaParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__86:
                self.state = 960
                self.match(modelicaParser.T__86)


            self.state = 963
            self.match(modelicaParser.IDENT)
            self.state = 968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__86:
                self.state = 964
                self.match(modelicaParser.T__86)
                self.state = 965
                self.match(modelicaParser.IDENT)
                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(modelicaParser.IDENT)
            else:
                return self.getToken(modelicaParser.IDENT, i)

        def array_subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.Array_subscriptsContext)
            else:
                return self.getTypedRuleContext(modelicaParser.Array_subscriptsContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_component_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_reference" ):
                listener.enterComponent_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_reference" ):
                listener.exitComponent_reference(self)




    def component_reference(self):

        localctx = modelicaParser.Component_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_component_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__86:
                self.state = 971
                self.match(modelicaParser.T__86)


            self.state = 974
            self.match(modelicaParser.IDENT)
            self.state = 976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__83:
                self.state = 975
                self.array_subscripts()


            self.state = 985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__86:
                self.state = 978
                self.match(modelicaParser.T__86)
                self.state = 979
                self.match(modelicaParser.IDENT)
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.T__83:
                    self.state = 980
                    self.array_subscripts()


                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_argsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_arguments(self):
            return self.getTypedRuleContext(modelicaParser.Function_argumentsContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_function_call_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_args" ):
                listener.enterFunction_call_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_args" ):
                listener.exitFunction_call_args(self)




    def function_call_args(self):

        localctx = modelicaParser.Function_call_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_function_call_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(modelicaParser.T__21)
            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__16) | (1 << modelicaParser.T__17) | (1 << modelicaParser.T__21) | (1 << modelicaParser.T__24) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__48))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (modelicaParser.T__65 - 66)) | (1 << (modelicaParser.T__72 - 66)) | (1 << (modelicaParser.T__73 - 66)) | (1 << (modelicaParser.T__74 - 66)) | (1 << (modelicaParser.T__75 - 66)) | (1 << (modelicaParser.T__81 - 66)) | (1 << (modelicaParser.T__82 - 66)) | (1 << (modelicaParser.T__83 - 66)) | (1 << (modelicaParser.T__85 - 66)) | (1 << (modelicaParser.T__86 - 66)) | (1 << (modelicaParser.IDENT - 66)) | (1 << (modelicaParser.STRING - 66)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 66)))) != 0):
                self.state = 989
                self.function_arguments()


            self.state = 992
            self.match(modelicaParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_argument(self):
            return self.getTypedRuleContext(modelicaParser.Function_argumentContext,0)


        def function_arguments(self):
            return self.getTypedRuleContext(modelicaParser.Function_argumentsContext,0)


        def for_indices(self):
            return self.getTypedRuleContext(modelicaParser.For_indicesContext,0)


        def named_arguments(self):
            return self.getTypedRuleContext(modelicaParser.Named_argumentsContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_function_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_arguments" ):
                listener.enterFunction_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_arguments" ):
                listener.exitFunction_arguments(self)




    def function_arguments(self):

        localctx = modelicaParser.Function_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_function_arguments)
        try:
            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 994
                self.function_argument()
                self.state = 999
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [modelicaParser.T__25]:
                    self.state = 995
                    self.match(modelicaParser.T__25)
                    self.state = 996
                    self.function_arguments()
                    pass
                elif token in [modelicaParser.T__56]:
                    self.state = 997
                    self.match(modelicaParser.T__56)
                    self.state = 998
                    self.for_indices()
                    pass
                elif token in [modelicaParser.T__23, modelicaParser.T__36]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1001
                self.named_arguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_argument(self):
            return self.getTypedRuleContext(modelicaParser.Named_argumentContext,0)


        def named_arguments(self):
            return self.getTypedRuleContext(modelicaParser.Named_argumentsContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_named_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_arguments" ):
                listener.enterNamed_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_arguments" ):
                listener.exitNamed_arguments(self)




    def named_arguments(self):

        localctx = modelicaParser.Named_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_named_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.named_argument()
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__25:
                self.state = 1005
                self.match(modelicaParser.T__25)
                self.state = 1006
                self.named_arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(modelicaParser.IDENT, 0)

        def function_argument(self):
            return self.getTypedRuleContext(modelicaParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_named_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_argument" ):
                listener.enterNamed_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_argument" ):
                listener.exitNamed_argument(self)




    def named_argument(self):

        localctx = modelicaParser.Named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_named_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(modelicaParser.IDENT)
            self.state = 1010
            self.match(modelicaParser.T__19)
            self.state = 1011
            self.function_argument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(modelicaParser.NameContext,0)


        def named_arguments(self):
            return self.getTypedRuleContext(modelicaParser.Named_argumentsContext,0)


        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_function_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument" ):
                listener.enterFunction_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument" ):
                listener.exitFunction_argument(self)




    def function_argument(self):

        localctx = modelicaParser.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_function_argument)
        self._la = 0 # Token type
        try:
            self.state = 1022
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1013
                self.match(modelicaParser.T__16)
                self.state = 1014
                self.name()
                self.state = 1015
                self.match(modelicaParser.T__21)
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==modelicaParser.IDENT:
                    self.state = 1016
                    self.named_arguments()


                self.state = 1019
                self.match(modelicaParser.T__23)
                pass
            elif token in [modelicaParser.T__17, modelicaParser.T__21, modelicaParser.T__24, modelicaParser.T__45, modelicaParser.T__48, modelicaParser.T__65, modelicaParser.T__72, modelicaParser.T__73, modelicaParser.T__74, modelicaParser.T__75, modelicaParser.T__81, modelicaParser.T__82, modelicaParser.T__83, modelicaParser.T__85, modelicaParser.T__86, modelicaParser.IDENT, modelicaParser.STRING, modelicaParser.UNSIGNED_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1021
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_output_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_expression_list" ):
                listener.enterOutput_expression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_expression_list" ):
                listener.exitOutput_expression_list(self)




    def output_expression_list(self):

        localctx = modelicaParser.Output_expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_output_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__17) | (1 << modelicaParser.T__21) | (1 << modelicaParser.T__24) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__48))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (modelicaParser.T__65 - 66)) | (1 << (modelicaParser.T__72 - 66)) | (1 << (modelicaParser.T__73 - 66)) | (1 << (modelicaParser.T__74 - 66)) | (1 << (modelicaParser.T__75 - 66)) | (1 << (modelicaParser.T__81 - 66)) | (1 << (modelicaParser.T__82 - 66)) | (1 << (modelicaParser.T__83 - 66)) | (1 << (modelicaParser.T__85 - 66)) | (1 << (modelicaParser.T__86 - 66)) | (1 << (modelicaParser.IDENT - 66)) | (1 << (modelicaParser.STRING - 66)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 66)))) != 0):
                self.state = 1024
                self.expression()


            self.state = 1033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 1027
                self.match(modelicaParser.T__25)
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << modelicaParser.T__17) | (1 << modelicaParser.T__21) | (1 << modelicaParser.T__24) | (1 << modelicaParser.T__45) | (1 << modelicaParser.T__48))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (modelicaParser.T__65 - 66)) | (1 << (modelicaParser.T__72 - 66)) | (1 << (modelicaParser.T__73 - 66)) | (1 << (modelicaParser.T__74 - 66)) | (1 << (modelicaParser.T__75 - 66)) | (1 << (modelicaParser.T__81 - 66)) | (1 << (modelicaParser.T__82 - 66)) | (1 << (modelicaParser.T__83 - 66)) | (1 << (modelicaParser.T__85 - 66)) | (1 << (modelicaParser.T__86 - 66)) | (1 << (modelicaParser.IDENT - 66)) | (1 << (modelicaParser.STRING - 66)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 66)))) != 0):
                    self.state = 1028
                    self.expression()


                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(modelicaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = modelicaParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.expression()
            self.state = 1041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 1037
                self.match(modelicaParser.T__25)
                self.state = 1038
                self.expression()
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_subscriptsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(modelicaParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(modelicaParser.SubscriptContext,i)


        def getRuleIndex(self):
            return modelicaParser.RULE_array_subscripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_subscripts" ):
                listener.enterArray_subscripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_subscripts" ):
                listener.exitArray_subscripts(self)




    def array_subscripts(self):

        localctx = modelicaParser.Array_subscriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_array_subscripts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(modelicaParser.T__83)
            self.state = 1045
            self.subscript()
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__25:
                self.state = 1046
                self.match(modelicaParser.T__25)
                self.state = 1047
                self.subscript()
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1053
            self.match(modelicaParser.T__84)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(modelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)




    def subscript(self):

        localctx = modelicaParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_subscript)
        try:
            self.state = 1057
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [modelicaParser.T__22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1055
                self.match(modelicaParser.T__22)
                pass
            elif token in [modelicaParser.T__17, modelicaParser.T__21, modelicaParser.T__24, modelicaParser.T__45, modelicaParser.T__48, modelicaParser.T__65, modelicaParser.T__72, modelicaParser.T__73, modelicaParser.T__74, modelicaParser.T__75, modelicaParser.T__81, modelicaParser.T__82, modelicaParser.T__83, modelicaParser.T__85, modelicaParser.T__86, modelicaParser.IDENT, modelicaParser.STRING, modelicaParser.UNSIGNED_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_comment(self):
            return self.getTypedRuleContext(modelicaParser.String_commentContext,0)


        def annotation(self):
            return self.getTypedRuleContext(modelicaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)




    def comment(self):

        localctx = modelicaParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.string_comment()
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==modelicaParser.T__87:
                self.state = 1060
                self.annotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_commentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(modelicaParser.STRING)
            else:
                return self.getToken(modelicaParser.STRING, i)

        def getRuleIndex(self):
            return modelicaParser.RULE_string_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_comment" ):
                listener.enterString_comment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_comment" ):
                listener.exitString_comment(self)




    def string_comment(self):

        localctx = modelicaParser.String_commentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_string_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(modelicaParser.STRING)
            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==modelicaParser.T__72:
                self.state = 1064
                self.match(modelicaParser.T__72)
                self.state = 1065
                self.match(modelicaParser.STRING)
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_annotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(modelicaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_model_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_annotation" ):
                listener.enterModel_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_annotation" ):
                listener.exitModel_annotation(self)




    def model_annotation(self):

        localctx = modelicaParser.Model_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_model_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_modification(self):
            return self.getTypedRuleContext(modelicaParser.Class_modificationContext,0)


        def getRuleIndex(self):
            return modelicaParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = modelicaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(modelicaParser.T__87)
            self.state = 1074
            self.class_modification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





